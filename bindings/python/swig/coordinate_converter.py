# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _coordinate_converter

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _coordinate_converter.SWIG_PyInstanceMethod_New
_swig_new_static_method = _coordinate_converter.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _coordinate_converter.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coordinate_converter.delete_SwigPyIterator
    value = _swig_new_instance_method(_coordinate_converter.SwigPyIterator_value)
    incr = _swig_new_instance_method(_coordinate_converter.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_coordinate_converter.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_coordinate_converter.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_coordinate_converter.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_coordinate_converter.SwigPyIterator_copy)
    next = _swig_new_instance_method(_coordinate_converter.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_coordinate_converter.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_coordinate_converter.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_coordinate_converter.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_coordinate_converter.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_coordinate_converter.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_coordinate_converter.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_coordinate_converter.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_coordinate_converter.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_coordinate_converter.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _coordinate_converter:
_coordinate_converter.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _coordinate_converter.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
class CoordinateConverter(geocal_swig.generic_object.GenericObject):
    r"""

    This class is used to convert from and to a particular coordinate
    system.

    There are some functions that can work equal well with any map
    coordinate system, and where we want the decision of what coordinate
    system to be made outside of the function (e.g., the program
    map_project, where the user selects the coordinate system to map
    project to).

    The solution we use here is to make use of the Strategy pattern (see
    "Design Patterns" by Erich Gamma et. al.). This class is the base
    class defining the interface to a general coordinate convertor.

    This class allows conversion to and from whatever coordinate system
    has been selected. The meaning of the X, Y, and Z value passed in and
    out of the functions depends on what concrete specialization of this
    class is used. For uses where the ambiguity isn't acceptable, it is
    not appropriate to use this class (i.e., the various Strategies of
    coordinate conversions aren't really exchangeable then).

    C++ includes: coordinate_converter.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    EARTH_NAIF_CODE = _coordinate_converter.CoordinateConverter_EARTH_NAIF_CODE
    convert_from_coordinate = _swig_new_instance_method(_coordinate_converter.CoordinateConverter_convert_from_coordinate)
    convert_to_coordinate = _swig_new_instance_method(_coordinate_converter.CoordinateConverter_convert_to_coordinate)
    _v_naif_code = _swig_new_instance_method(_coordinate_converter.CoordinateConverter__v_naif_code)

    @property
    def naif_code(self):
        return self._v_naif_code()

    create = _swig_new_instance_method(_coordinate_converter.CoordinateConverter_create)
    is_same = _swig_new_instance_method(_coordinate_converter.CoordinateConverter_is_same)
    __str__ = _swig_new_instance_method(_coordinate_converter.CoordinateConverter___str__)
    __swig_destroy__ = _coordinate_converter.delete_CoordinateConverter

# Register CoordinateConverter in _coordinate_converter:
_coordinate_converter.CoordinateConverter_swigregister(CoordinateConverter)
class GeodeticConverter(CoordinateConverter):
    r"""

    CoordinateConverter that goes to and from Geodetic coordinates.

    C++ includes: coordinate_converter.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    convert_from_coordinate = _swig_new_instance_method(_coordinate_converter.GeodeticConverter_convert_from_coordinate)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)


    def __init__(self):
        _coordinate_converter.GeodeticConverter_swiginit(self, _coordinate_converter.new_GeodeticConverter())
    __swig_destroy__ = _coordinate_converter.delete_GeodeticConverter

# Register GeodeticConverter in _coordinate_converter:
_coordinate_converter.GeodeticConverter_swigregister(GeodeticConverter)
class Geodetic360Converter(CoordinateConverter):
    r"""

    CoordinateConverter that goes to and from Geodetic360 coordinates.

    C++ includes: coordinate_converter.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    convert_from_coordinate = _swig_new_instance_method(_coordinate_converter.Geodetic360Converter_convert_from_coordinate)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)


    def __init__(self):
        _coordinate_converter.Geodetic360Converter_swiginit(self, _coordinate_converter.new_Geodetic360Converter())
    __swig_destroy__ = _coordinate_converter.delete_Geodetic360Converter

# Register Geodetic360Converter in _coordinate_converter:
_coordinate_converter.Geodetic360Converter_swigregister(Geodetic360Converter)
class GeodeticRadianConverter(CoordinateConverter):
    r"""

    CoordinateConverter that goes to and from Geodetic coordinates.

    This variations uses radians instead

    C++ includes: coordinate_converter.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    convert_from_coordinate = _swig_new_instance_method(_coordinate_converter.GeodeticRadianConverter_convert_from_coordinate)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)


    def __init__(self):
        _coordinate_converter.GeodeticRadianConverter_swiginit(self, _coordinate_converter.new_GeodeticRadianConverter())
    __swig_destroy__ = _coordinate_converter.delete_GeodeticRadianConverter

# Register GeodeticRadianConverter in _coordinate_converter:
_coordinate_converter.GeodeticRadianConverter_swigregister(GeodeticRadianConverter)
class GeodeticRadian2piConverter(CoordinateConverter):
    r"""

    CoordinateConverter that goes to and from Geodetic coordinates.

    This variations uses radians instead. This version has longitude
    between 0 and 360 degrees instead of -180 to 180

    C++ includes: coordinate_converter.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    convert_from_coordinate = _swig_new_instance_method(_coordinate_converter.GeodeticRadian2piConverter_convert_from_coordinate)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)


    def __init__(self):
        _coordinate_converter.GeodeticRadian2piConverter_swiginit(self, _coordinate_converter.new_GeodeticRadian2piConverter())
    __swig_destroy__ = _coordinate_converter.delete_GeodeticRadian2piConverter

# Register GeodeticRadian2piConverter in _coordinate_converter:
_coordinate_converter.GeodeticRadian2piConverter_swigregister(GeodeticRadian2piConverter)

__all__ = ["CoordinateConverter","GeodeticConverter","Geodetic360Converter","GeodeticRadianConverter","GeodeticRadian2piConverter"]


