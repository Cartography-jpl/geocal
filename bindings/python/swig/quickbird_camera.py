# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _quickbird_camera

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _quickbird_camera.SWIG_PyInstanceMethod_New
_swig_new_static_method = _quickbird_camera.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _quickbird_camera.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickbird_camera.delete_SwigPyIterator
    value = _swig_new_instance_method(_quickbird_camera.SwigPyIterator_value)
    incr = _swig_new_instance_method(_quickbird_camera.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_quickbird_camera.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_quickbird_camera.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_quickbird_camera.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_quickbird_camera.SwigPyIterator_copy)
    next = _swig_new_instance_method(_quickbird_camera.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_quickbird_camera.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_quickbird_camera.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_quickbird_camera.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_quickbird_camera.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_quickbird_camera.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_quickbird_camera.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_quickbird_camera.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_quickbird_camera.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_quickbird_camera.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _quickbird_camera:
_quickbird_camera.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _quickbird_camera.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.quaternion_camera
import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.camera
import geocal_swig.with_parameter
class QuickBirdCamera(geocal_swig.quaternion_camera.QuaternionCamera):
    r"""

    This class models a the QuickBird camera.

    It is used to convert ScLookVector to FrameCoordinate and vice versa.

    The QuickBird camera is described by metadata supplied with the
    QuickBird data, a ".GEO" file. This is potentially dynamic, and
    potentially accounts for nonlinearities in the optics. However, in
    practice all of the GEO file we have are exactly the same, and all the
    nonlinear terms are set to 0. I'm not sure if this is because the
    camera really is very stable and the optics very linear, or just that
    DigitalGlobe didn't do a very good job at geometric camera
    calibration. In any case, rather than reading in this file we just
    hardwire the coefficients into this class. This is something we can
    revisit in the future if needed.

    This model is for the Panchromatic band only. We could easily extend
    this to other bands, but right now we only work with the Panchromatic
    data.

    C++ includes: quickbird_camera.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""

        QuickBirdCamera::QuickBirdCamera()
        Constructor.

        At this point, all of the camera coefficients are hardwired in this
        class. We can change this in the future if needed. 
        """
        _quickbird_camera.QuickBirdCamera_swiginit(self, _quickbird_camera.new_QuickBirdCamera())
    __swig_destroy__ = _quickbird_camera.delete_QuickBirdCamera

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)


# Register QuickBirdCamera in _quickbird_camera:
_quickbird_camera.QuickBirdCamera_swigregister(QuickBirdCamera)

__all__ = ["QuickBirdCamera"]


