# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _igc_rolling_shutter

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _igc_rolling_shutter.SWIG_PyInstanceMethod_New
_swig_new_static_method = _igc_rolling_shutter.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _igc_rolling_shutter.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _igc_rolling_shutter.delete_SwigPyIterator
    value = _swig_new_instance_method(_igc_rolling_shutter.SwigPyIterator_value)
    incr = _swig_new_instance_method(_igc_rolling_shutter.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_igc_rolling_shutter.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_igc_rolling_shutter.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_igc_rolling_shutter.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_igc_rolling_shutter.SwigPyIterator_copy)
    next = _swig_new_instance_method(_igc_rolling_shutter.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_igc_rolling_shutter.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_igc_rolling_shutter.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_igc_rolling_shutter.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_igc_rolling_shutter.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_igc_rolling_shutter.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_igc_rolling_shutter.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_igc_rolling_shutter.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_igc_rolling_shutter.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_igc_rolling_shutter.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _igc_rolling_shutter:
_igc_rolling_shutter.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _igc_rolling_shutter.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.image_ground_connection
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
import geocal_swig.observer
class IgcRollingShutter(geocal_swig.image_ground_connection.ImageGroundConnection):
    r"""

    This is a ImageGroundConnection where the connection is made by
    OrbitData and a Camera.

    This is similar to OrbitDataImageGroundConnection, however this is
    intended for use with a rolling shutter camera.

    A rolling shutter is common with CMOS sensors. Rather than recording
    an image at a single instance, the image is recorded by scanning over
    the camera rapidly in either the line or sample direction.

    If the camera is moving while the image is taken (e.g., it is on an
    aircraft), then significant differences can occur between modeling
    this as close a frame camera vs. modeling the rolling shutter.

    We currently only support the line roll direction, although we have
    some interface support for sample roll direction (just in case we need
    to expand this in the future).

    Note that this class assumes that the orbit data varies smoothly over
    the time that the rolling shutter operates. We speed up the class by
    taking the orbit data at the start and end of the rolling shutter and
    interpolating. If this is not true of the orbit data, then there will
    be significant errors in the calculations done by this class.

    C++ includes: igc_rolling_shutter.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ROLL_LINE_DIRECTION = _igc_rolling_shutter.IgcRollingShutter_ROLL_LINE_DIRECTION
    ROLL_SAMPLE_DIRECTION = _igc_rolling_shutter.IgcRollingShutter_ROLL_SAMPLE_DIRECTION

    def __init__(self, *args):
        r"""

        GeoCal::IgcRollingShutter::IgcRollingShutter(const boost::shared_ptr< Orbit > &Orb, const boost::shared_ptr<
        TimeTable > &Time_table, const boost::shared_ptr< Camera > &Cam, const
        boost::shared_ptr< Dem > &D, const boost::shared_ptr< RasterImage >
        &Img, RollDirection Roll_direction=ROLL_LINE_DIRECTION, const
        std::string Title="", const boost::shared_ptr< Refraction >
        &Ref=boost::shared_ptr< Refraction >(), double Resolution=30, int
        Band=0, double Max_height=9000)
        GeoCal::IgcRollingShutter::IgcRollingShutter
        Constructor that takes a Orbit and a Time_table.
        If the roll direction is in the line direction we assume that all the
        samples for a particular line are acquired at the same time, and if
        the roll direction is in the sample direction we assume that all the
        lines for a particular sample are acquired at the same time.

        You can optionally include a approximate refraction correction, the
        default is not to.

        NOTE: refraction doesn't seem to actually be used. I think this was
        something we started to add, but didn't actually complete. We can come
        back to this. Usually the effect of refraction is pretty small. 
        """
        _igc_rolling_shutter.IgcRollingShutter_swiginit(self, _igc_rolling_shutter.new_IgcRollingShutter(*args))
    cf_look_vector = _swig_new_instance_method(_igc_rolling_shutter.IgcRollingShutter_cf_look_vector)
    _v_orbit = _swig_new_instance_method(_igc_rolling_shutter.IgcRollingShutter__v_orbit)

    @property
    def orbit(self):
        return self._v_orbit()

    @orbit.setter
    def orbit(self, value):
      self._v_orbit(value)

    _v_time_table = _swig_new_instance_method(_igc_rolling_shutter.IgcRollingShutter__v_time_table)

    @property
    def time_table(self):
        return self._v_time_table()

    @time_table.setter
    def time_table(self, value):
      self._v_time_table(value)

    _v_camera = _swig_new_instance_method(_igc_rolling_shutter.IgcRollingShutter__v_camera)

    @property
    def camera(self):
        return self._v_camera()

    @camera.setter
    def camera(self, value):
      self._v_camera(value)

    _v_resolution = _swig_new_instance_method(_igc_rolling_shutter.IgcRollingShutter__v_resolution)

    @property
    def resolution(self):
        return self._v_resolution()

    @resolution.setter
    def resolution(self, value):
      self._v_resolution(value)

    _v_refraction = _swig_new_instance_method(_igc_rolling_shutter.IgcRollingShutter__v_refraction)

    @property
    def refraction(self):
        return self._v_refraction()

    @refraction.setter
    def refraction(self, value):
      self._v_refraction(value)

    _v_band = _swig_new_instance_method(_igc_rolling_shutter.IgcRollingShutter__v_band)

    @property
    def band(self):
        return self._v_band()

    @band.setter
    def band(self, value):
      self._v_band(value)

    _v_max_height = _swig_new_instance_method(_igc_rolling_shutter.IgcRollingShutter__v_max_height)

    @property
    def max_height(self):
        return self._v_max_height()

    @max_height.setter
    def max_height(self, value):
      self._v_max_height(value)


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _igc_rolling_shutter.delete_IgcRollingShutter

# Register IgcRollingShutter in _igc_rolling_shutter:
_igc_rolling_shutter.IgcRollingShutter_swigregister(IgcRollingShutter)

__all__ = ["IgcRollingShutter"]


