# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _ogr_coordinate

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _ogr_coordinate.SWIG_PyInstanceMethod_New
_swig_new_static_method = _ogr_coordinate.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _ogr_coordinate.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ogr_coordinate.delete_SwigPyIterator
    value = _swig_new_instance_method(_ogr_coordinate.SwigPyIterator_value)
    incr = _swig_new_instance_method(_ogr_coordinate.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_ogr_coordinate.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_ogr_coordinate.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_ogr_coordinate.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_ogr_coordinate.SwigPyIterator_copy)
    next = _swig_new_instance_method(_ogr_coordinate.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_ogr_coordinate.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_ogr_coordinate.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_ogr_coordinate.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_ogr_coordinate.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_ogr_coordinate.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_ogr_coordinate.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_ogr_coordinate.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_ogr_coordinate.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_ogr_coordinate.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ogr_coordinate:
_ogr_coordinate.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _ogr_coordinate.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.ground_coordinate
import geocal_swig.look_vector
import geocal_swig.coordinate_converter
import geocal_swig.dem
import geocal_swig.observer
import geocal_swig.with_parameter
class OgrWrapper(geocal_swig.generic_object.GenericObject):
    r"""

    This is a wrapper around the OGRSpatialReference class.

    We hold onto a OGRSpatialReference class and a transformation from
    that coordinate system to the Geodetic coordinate system. This class
    handles the lifetime of these objects. This is separated out from
    OgrCoordinate because typically we'll have lots of OgrCoordinates that
    have the same OgrWrapper.

    Note a complication in axis ordering. The WKT changed to include axis
    ordering, seehttps://trac.osgeo.org/gdal/wiki/rfc20_srs_axes
    andhttps://trac.osgeo.org/gdal/wiki/rfc73_proj6_wkt2_srsbarn (axis
    ordering section). This change took place in GDAL 3. All our code was
    written before this change, so in lots of places we assume the old
    behavior. Our low level coordinate code doesn't actually care, but
    anything using this likely makes assumptions about what the order is.
    We also will need to support GDAL 2 for sometime in addition got GDAL
    3.

    So we don't break a lot of existing code, we take a
    "use_traditional_gis_order" flag. If this is true, we use the
    OAMS_TRADITIONAL_GIS_ORDER. false is an error if we are using gdal
    older than version 3 (since it isn't supported with gdal 2), otherwise
    we use OAMS_AUTHORITY_COMPLIANT. At some point we can just directly
    take the GDAL enumeration, but since this is in GDAL 3 only we instead
    take a boolean that can be use with 2.

    We don't directly support OAMS_CUSTOM, although you can pass a
    OGRSpatialReference directly with that. However, serialization isn't
    currently supported for OAMS_CUSTOM. We could add that if needed, we
    just need to think through how to save that. For now, I don't see much
    of a need for that.

    C++ includes: ogr_coordinate.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        OgrWrapper::OgrWrapper(const boost::shared_ptr< OGRSpatialReference > &Ogr)
        Constructor, from an existing OGRSpatialReference. 
        """
        _ogr_coordinate.OgrWrapper_swiginit(self, _ogr_coordinate.new_OgrWrapper(*args))
    add_spatial_reference = _swig_new_static_method(_ogr_coordinate.OgrWrapper_add_spatial_reference)
    from_epsg = _swig_new_static_method(_ogr_coordinate.OgrWrapper_from_epsg)
    from_proj4 = _swig_new_static_method(_ogr_coordinate.OgrWrapper_from_proj4)
    _v_ogr = _swig_new_instance_method(_ogr_coordinate.OgrWrapper__v_ogr)

    @property
    def ogr(self):
        return self._v_ogr()

    _v_transform = _swig_new_instance_method(_ogr_coordinate.OgrWrapper__v_transform)

    @property
    def transform(self):
        return self._v_transform()

    _v_inverse_transform = _swig_new_instance_method(_ogr_coordinate.OgrWrapper__v_inverse_transform)

    @property
    def inverse_transform(self):
        return self._v_inverse_transform()

    _v_cf_transform = _swig_new_instance_method(_ogr_coordinate.OgrWrapper__v_cf_transform)

    @property
    def cf_transform(self):
        return self._v_cf_transform()

    _v_cf_inverse_transform = _swig_new_instance_method(_ogr_coordinate.OgrWrapper__v_cf_inverse_transform)

    @property
    def cf_inverse_transform(self):
        return self._v_cf_inverse_transform()

    _v_projected_cs_type_geo_key = _swig_new_instance_method(_ogr_coordinate.OgrWrapper__v_projected_cs_type_geo_key)

    @property
    def projected_cs_type_geo_key(self):
        return self._v_projected_cs_type_geo_key()

    _v_pcs_citation_geo_key = _swig_new_instance_method(_ogr_coordinate.OgrWrapper__v_pcs_citation_geo_key)

    @property
    def pcs_citation_geo_key(self):
        return self._v_pcs_citation_geo_key()

    _v_use_traditional_gis_order = _swig_new_instance_method(_ogr_coordinate.OgrWrapper__v_use_traditional_gis_order)

    @property
    def use_traditional_gis_order(self):
        return self._v_use_traditional_gis_order()

    _v_geogcs_name = _swig_new_instance_method(_ogr_coordinate.OgrWrapper__v_geogcs_name)

    @property
    def geogcs_name(self):
        return self._v_geogcs_name()

    _v_wkt = _swig_new_instance_method(_ogr_coordinate.OgrWrapper__v_wkt)

    @property
    def wkt(self):
        return self._v_wkt()

    _v_pretty_wkt = _swig_new_instance_method(_ogr_coordinate.OgrWrapper__v_pretty_wkt)

    @property
    def pretty_wkt(self):
        return self._v_pretty_wkt()

    _v_naif_code = _swig_new_instance_method(_ogr_coordinate.OgrWrapper__v_naif_code)

    @property
    def naif_code(self):
        return self._v_naif_code()

    __str__ = _swig_new_instance_method(_ogr_coordinate.OgrWrapper___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _ogr_coordinate.delete_OgrWrapper

# Register OgrWrapper in _ogr_coordinate:
_ogr_coordinate.OgrWrapper_swigregister(OgrWrapper)
class OgrCoordinate(geocal_swig.ground_coordinate.GroundCoordinate):
    r"""

    This is a ground coordinate, implemented by the OGRSpatialReference
    class supplied with GDAL.

    This class is particularly useful for working with
    GdalMapProjectedImage or VicarMapProjectedImage. The
    OGRSpatialReference can work with a number of ways of describing a
    coordinate system, including Well Known Text format (WKT) of the
    OpenGIS Transformation specification and the EPSG specification. Note
    in particular the EPSG specification is what is used by geotiff, the
    format used by the AFIDS system.

    You can see the documentation for OGRSpatialReference
    athttp://www.gdal.org/ogr/osr_tutorial.html.

    See note in OgrWrapper about axis order.

    C++ includes: ogr_coordinate.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        OgrCoordinate::OgrCoordinate(const boost::shared_ptr< OgrWrapper > &Ogr, const GroundCoordinate
        &G)
        Convert from GroundCoordinate to the coordinate system given by Ogr.

        """
        _ogr_coordinate.OgrCoordinate_swiginit(self, _ogr_coordinate.new_OgrCoordinate(*args))
    to_proj4 = _swig_new_instance_method(_ogr_coordinate.OgrCoordinate_to_proj4)
    _v_ogr = _swig_new_instance_method(_ogr_coordinate.OgrCoordinate__v_ogr)

    @property
    def ogr(self):
        return self._v_ogr()

    _v_utm_zone = _swig_new_instance_method(_ogr_coordinate.OgrCoordinate__v_utm_zone)

    @property
    def utm_zone(self):
        return self._v_utm_zone()

    x = property(_ogr_coordinate.OgrCoordinate_x_get, _ogr_coordinate.OgrCoordinate_x_set)
    y = property(_ogr_coordinate.OgrCoordinate_y_get, _ogr_coordinate.OgrCoordinate_y_set)
    z = property(_ogr_coordinate.OgrCoordinate_z_get, _ogr_coordinate.OgrCoordinate_z_set)
    to_utm = _swig_new_static_method(_ogr_coordinate.OgrCoordinate_to_utm)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _ogr_coordinate.delete_OgrCoordinate

# Register OgrCoordinate in _ogr_coordinate:
_ogr_coordinate.OgrCoordinate_swigregister(OgrCoordinate)
class OgrCoordinateConverter(geocal_swig.coordinate_converter.CoordinateConverter):
    r"""

    This is a CoordinateConverter for working with OgrCoordinates.

    See note in OgrWrap about axis order.

    C++ includes: ogr_coordinate.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Ogr):
        r"""

        GeoCal::OgrCoordinateConverter::OgrCoordinateConverter(const boost::shared_ptr< OgrWrapper > Ogr)
        Constructor. 
        """
        _ogr_coordinate.OgrCoordinateConverter_swiginit(self, _ogr_coordinate.new_OgrCoordinateConverter(Ogr))
    _v_ogr = _swig_new_instance_method(_ogr_coordinate.OgrCoordinateConverter__v_ogr)

    @property
    def ogr(self):
        return self._v_ogr()

    convert_from_coordinate = _swig_new_instance_method(_ogr_coordinate.OgrCoordinateConverter_convert_from_coordinate)
    utm_converter = _swig_new_static_method(_ogr_coordinate.OgrCoordinateConverter_utm_converter)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _ogr_coordinate.delete_OgrCoordinateConverter

# Register OgrCoordinateConverter in _ogr_coordinate:
_ogr_coordinate.OgrCoordinateConverter_swigregister(OgrCoordinateConverter)

__all__ = ["OgrWrapper","OgrCoordinate","OgrCoordinateConverter"]


