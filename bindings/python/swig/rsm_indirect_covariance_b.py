# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rsm_indirect_covariance_b.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_rsm_indirect_covariance_b')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_rsm_indirect_covariance_b')
    _rsm_indirect_covariance_b = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rsm_indirect_covariance_b', [dirname(__file__)])
        except ImportError:
            import _rsm_indirect_covariance_b
            return _rsm_indirect_covariance_b
        try:
            _mod = imp.load_module('_rsm_indirect_covariance_b', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _rsm_indirect_covariance_b = swig_import_helper()
    del swig_import_helper
else:
    import _rsm_indirect_covariance_b
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SWIG_MODULE_ALREADY_DONE = _rsm_indirect_covariance_b.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rsm_indirect_covariance_b.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_rsm_indirect_covariance_b.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_rsm_indirect_covariance_b.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_rsm_indirect_covariance_b.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_rsm_indirect_covariance_b.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_rsm_indirect_covariance_b.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_rsm_indirect_covariance_b.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_rsm_indirect_covariance_b.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_rsm_indirect_covariance_b.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_rsm_indirect_covariance_b.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_rsm_indirect_covariance_b.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_rsm_indirect_covariance_b.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_rsm_indirect_covariance_b.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_rsm_indirect_covariance_b.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_rsm_indirect_covariance_b.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_rsm_indirect_covariance_b.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_rsm_indirect_covariance_b.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _rsm_indirect_covariance_b.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _rsm_indirect_covariance_b.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.rsm_indirect_covariance
import geocal_swig.generic_object
import geocal_swig.rsm_adjustable_parameter_b
import geocal_swig.rsm_adjustable_parameter
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class RsmBSubgroup(geocal_swig.generic_object.GenericObject):
    """

    This handles a single "independent subgroup", basically a set of
    original parameters that has a given covariance and time behavior.

    C++ includes: rsm_indirect_covariance_b.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        GeoCal::RsmBSubgroup::RsmBSubgroup()

        """
        _rsm_indirect_covariance_b.RsmBSubgroup_swiginit(self, _rsm_indirect_covariance_b.new_RsmBSubgroup(*args))

    def _v_number_parameter(self):
        """

        int GeoCal::RsmBSubgroup::number_parameter() const

        """
        return _rsm_indirect_covariance_b.RsmBSubgroup__v_number_parameter(self)


    @property
    def number_parameter(self):
        return self._v_number_parameter()


    def _v_is_csm_correlation(self):
        """

        bool GeoCal::RsmBSubgroup::is_csm_correlation() const

        """
        return _rsm_indirect_covariance_b.RsmBSubgroup__v_is_csm_correlation(self)


    @property
    def is_csm_correlation(self):
        return self._v_is_csm_correlation()


    def _v_covariance(self):
        """

        const blitz::Array<double, 2>& GeoCal::RsmBSubgroup::covariance() const

        """
        return _rsm_indirect_covariance_b.RsmBSubgroup__v_covariance(self)


    @property
    def covariance(self):
        return self._v_covariance()


    def _v_time_correlation(self):
        """

        const blitz::Array<double, 2>& GeoCal::RsmBSubgroup::time_correlation() const

        """
        return _rsm_indirect_covariance_b.RsmBSubgroup__v_time_correlation(self)


    @property
    def time_correlation(self):
        return self._v_time_correlation()


    def _v_time_correlation_domain_flag(self):
        """

        int GeoCal::RsmBSubgroup::time_correlation_domain_flag() const

        """
        return _rsm_indirect_covariance_b.RsmBSubgroup__v_time_correlation_domain_flag(self)


    @property
    def time_correlation_domain_flag(self):
        return self._v_time_correlation_domain_flag()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _rsm_indirect_covariance_b.delete_RsmBSubgroup
RsmBSubgroup._v_number_parameter = new_instancemethod(_rsm_indirect_covariance_b.RsmBSubgroup__v_number_parameter, None, RsmBSubgroup)
RsmBSubgroup._v_is_csm_correlation = new_instancemethod(_rsm_indirect_covariance_b.RsmBSubgroup__v_is_csm_correlation, None, RsmBSubgroup)
RsmBSubgroup._v_covariance = new_instancemethod(_rsm_indirect_covariance_b.RsmBSubgroup__v_covariance, None, RsmBSubgroup)
RsmBSubgroup._v_time_correlation = new_instancemethod(_rsm_indirect_covariance_b.RsmBSubgroup__v_time_correlation, None, RsmBSubgroup)
RsmBSubgroup._v_time_correlation_domain_flag = new_instancemethod(_rsm_indirect_covariance_b.RsmBSubgroup__v_time_correlation_domain_flag, None, RsmBSubgroup)
RsmBSubgroup.__str__ = new_instancemethod(_rsm_indirect_covariance_b.RsmBSubgroup___str__, None, RsmBSubgroup)
RsmBSubgroup_swigregister = _rsm_indirect_covariance_b.RsmBSubgroup_swigregister
RsmBSubgroup_swigregister(RsmBSubgroup)

class RsmBUnmodeledCovariance(geocal_swig.generic_object.GenericObject):
    """

    This handles the unmodeled covariance, this is just complicated enough
    to be worth pulling out.

    C++ includes: rsm_indirect_covariance_b.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        GeoCal::RsmBUnmodeledCovariance::RsmBUnmodeledCovariance()

        """
        _rsm_indirect_covariance_b.RsmBUnmodeledCovariance_swiginit(self, _rsm_indirect_covariance_b.new_RsmBUnmodeledCovariance(*args))

    def _v_is_csm_correlation(self):
        """

        bool GeoCal::RsmBUnmodeledCovariance::is_csm_correlation() const

        """
        return _rsm_indirect_covariance_b.RsmBUnmodeledCovariance__v_is_csm_correlation(self)


    @property
    def is_csm_correlation(self):
        return self._v_is_csm_correlation()


    def _v_covariance(self):
        """

        const blitz::Array<double, 2>& GeoCal::RsmBUnmodeledCovariance::covariance() const

        """
        return _rsm_indirect_covariance_b.RsmBUnmodeledCovariance__v_covariance(self)


    @property
    def covariance(self):
        return self._v_covariance()


    def _v_row_time_correlation(self):
        """

        const blitz::Array<double, 2>& GeoCal::RsmBUnmodeledCovariance::row_time_correlation() const

        """
        return _rsm_indirect_covariance_b.RsmBUnmodeledCovariance__v_row_time_correlation(self)


    @property
    def row_time_correlation(self):
        return self._v_row_time_correlation()


    def _v_col_time_correlation(self):
        """

        const blitz::Array<double, 2>& GeoCal::RsmBUnmodeledCovariance::col_time_correlation() const

        """
        return _rsm_indirect_covariance_b.RsmBUnmodeledCovariance__v_col_time_correlation(self)


    @property
    def col_time_correlation(self):
        return self._v_col_time_correlation()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _rsm_indirect_covariance_b.delete_RsmBUnmodeledCovariance
RsmBUnmodeledCovariance._v_is_csm_correlation = new_instancemethod(_rsm_indirect_covariance_b.RsmBUnmodeledCovariance__v_is_csm_correlation, None, RsmBUnmodeledCovariance)
RsmBUnmodeledCovariance._v_covariance = new_instancemethod(_rsm_indirect_covariance_b.RsmBUnmodeledCovariance__v_covariance, None, RsmBUnmodeledCovariance)
RsmBUnmodeledCovariance._v_row_time_correlation = new_instancemethod(_rsm_indirect_covariance_b.RsmBUnmodeledCovariance__v_row_time_correlation, None, RsmBUnmodeledCovariance)
RsmBUnmodeledCovariance._v_col_time_correlation = new_instancemethod(_rsm_indirect_covariance_b.RsmBUnmodeledCovariance__v_col_time_correlation, None, RsmBUnmodeledCovariance)
RsmBUnmodeledCovariance.__str__ = new_instancemethod(_rsm_indirect_covariance_b.RsmBUnmodeledCovariance___str__, None, RsmBUnmodeledCovariance)
RsmBUnmodeledCovariance_swigregister = _rsm_indirect_covariance_b.RsmBUnmodeledCovariance_swigregister
RsmBUnmodeledCovariance_swigregister(RsmBUnmodeledCovariance)

class RsmIndirectCovarianceB(geocal_swig.rsm_indirect_covariance.RsmIndirectCovariance, geocal_swig.rsm_adjustable_parameter_b.RsmBParameterDesc):
    """

    This is used to handle the RSM indirect covariance.

    This supports RSMECB.

    C++ includes: rsm_indirect_covariance_b.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        RsmIndirectCovarianceB::RsmIndirectCovarianceB(const RsmIndirectCovarianceB &V)

        """
        _rsm_indirect_covariance_b.RsmIndirectCovarianceB_swiginit(self, _rsm_indirect_covariance_b.new_RsmIndirectCovarianceB(*args))

    def tre_string(self):
        """

        std::string RsmIndirectCovarianceB::tre_string() const

        """
        return _rsm_indirect_covariance_b.RsmIndirectCovarianceB_tre_string(self)


    def read_tre_string(Tre_in):
        """

        boost::shared_ptr< RsmIndirectCovarianceB > RsmIndirectCovarianceB::read_tre_string(const std::string &Tre_in)
        Read a TRE string.

        Note that the TRE does not contain all the fields we have in a
        RsmRationalPolynomial. However the fields that aren't contained are
        ones used for fitting the RSM, so in practice this doesn't matter. We
        just set the various fields to the default values found in the
        constructor.

        This should have all the TRE except for the front CETAG and CEL. It is
        convenient to treat these fields as special. (We can revisit this in
        the future if we need to). 
        """
        return _rsm_indirect_covariance_b.RsmIndirectCovarianceB_read_tre_string(Tre_in)

    read_tre_string = staticmethod(read_tre_string)

    def _v_covariance_version_date(self, *args):
        """

        void GeoCal::RsmIndirectCovarianceB::covariance_version_date(const std::string &V)

        """
        return _rsm_indirect_covariance_b.RsmIndirectCovarianceB__v_covariance_version_date(self, *args)


    @property
    def covariance_version_date(self):
        return self._v_covariance_version_date()

    @covariance_version_date.setter
    def covariance_version_date(self, value):
      self._v_covariance_version_date(value)


    def _v_has_indirect_error_covariance(self):
        """

        bool GeoCal::RsmIndirectCovarianceB::has_indirect_error_covariance() const

        """
        return _rsm_indirect_covariance_b.RsmIndirectCovarianceB__v_has_indirect_error_covariance(self)


    @property
    def has_indirect_error_covariance(self):
        return self._v_has_indirect_error_covariance()


    def _v_has_unmodeled_error_covariance(self):
        """

        bool GeoCal::RsmIndirectCovarianceB::has_unmodeled_error_covariance() const

        """
        return _rsm_indirect_covariance_b.RsmIndirectCovarianceB__v_has_unmodeled_error_covariance(self)


    @property
    def has_unmodeled_error_covariance(self):
        return self._v_has_unmodeled_error_covariance()


    def _v_number_original_parameter(self):
        """

        int RsmIndirectCovarianceB::number_original_parameter() const

        """
        return _rsm_indirect_covariance_b.RsmIndirectCovarianceB__v_number_original_parameter(self)


    @property
    def number_original_parameter(self):
        return self._v_number_original_parameter()


    def _v_subgroup(self, *args):
        """

        void GeoCal::RsmIndirectCovarianceB::subgroup(const std::vector< boost::shared_ptr< RsmBSubgroup > > &V)

        """
        return _rsm_indirect_covariance_b.RsmIndirectCovarianceB__v_subgroup(self, *args)


    @property
    def subgroup(self):
        return self._v_subgroup()

    @subgroup.setter
    def subgroup(self, value):
      self._v_subgroup(value)


    def _v_mapping_matrix(self, *args):
        """

        void GeoCal::RsmIndirectCovarianceB::mapping_matrix(const blitz::Array< double, 2 > &V)

        """
        return _rsm_indirect_covariance_b.RsmIndirectCovarianceB__v_mapping_matrix(self, *args)


    @property
    def mapping_matrix(self):
        return self._v_mapping_matrix()

    @mapping_matrix.setter
    def mapping_matrix(self, value):
      self._v_mapping_matrix(value)


    def _v_unmodeled_covariance(self, *args):
        """

        void GeoCal::RsmIndirectCovarianceB::unmodeled_covariance(const boost::shared_ptr< RsmBUnmodeledCovariance > &V)

        """
        return _rsm_indirect_covariance_b.RsmIndirectCovarianceB__v_unmodeled_covariance(self, *args)


    @property
    def unmodeled_covariance(self):
        return self._v_unmodeled_covariance()

    @unmodeled_covariance.setter
    def unmodeled_covariance(self, value):
      self._v_unmodeled_covariance(value)


    def subgroup_i(self, I):
        """

        const RsmBSubgroup& GeoCal::RsmIndirectCovarianceB::subgroup_i(int I) const

        """
        return _rsm_indirect_covariance_b.RsmIndirectCovarianceB_subgroup_i(self, I)


    def add_subgroup(self, V):
        """

        void GeoCal::RsmIndirectCovarianceB::add_subgroup(const boost::shared_ptr< RsmBSubgroup > &V)

        """
        return _rsm_indirect_covariance_b.RsmIndirectCovarianceB_add_subgroup(self, V)


    def check_consistent(self):
        """

        void RsmIndirectCovarianceB::check_consistent() const
        We have a few different pieces that need to match sizes.

        We don't check this as the object is created/modified because we may
        be in an inconsistent state during construction (e.g., we have added
        subgroups, but haven't yet modified the mapping_matrix). This routine
        does that consistency check, and throws an exception if things aren't
        consistent. Called before creating and after reading a TRE. 
        """
        return _rsm_indirect_covariance_b.RsmIndirectCovarianceB_check_consistent(self)


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _rsm_indirect_covariance_b.delete_RsmIndirectCovarianceB
RsmIndirectCovarianceB.tre_string = new_instancemethod(_rsm_indirect_covariance_b.RsmIndirectCovarianceB_tre_string, None, RsmIndirectCovarianceB)
RsmIndirectCovarianceB._v_covariance_version_date = new_instancemethod(_rsm_indirect_covariance_b.RsmIndirectCovarianceB__v_covariance_version_date, None, RsmIndirectCovarianceB)
RsmIndirectCovarianceB._v_has_indirect_error_covariance = new_instancemethod(_rsm_indirect_covariance_b.RsmIndirectCovarianceB__v_has_indirect_error_covariance, None, RsmIndirectCovarianceB)
RsmIndirectCovarianceB._v_has_unmodeled_error_covariance = new_instancemethod(_rsm_indirect_covariance_b.RsmIndirectCovarianceB__v_has_unmodeled_error_covariance, None, RsmIndirectCovarianceB)
RsmIndirectCovarianceB._v_number_original_parameter = new_instancemethod(_rsm_indirect_covariance_b.RsmIndirectCovarianceB__v_number_original_parameter, None, RsmIndirectCovarianceB)
RsmIndirectCovarianceB._v_subgroup = new_instancemethod(_rsm_indirect_covariance_b.RsmIndirectCovarianceB__v_subgroup, None, RsmIndirectCovarianceB)
RsmIndirectCovarianceB._v_mapping_matrix = new_instancemethod(_rsm_indirect_covariance_b.RsmIndirectCovarianceB__v_mapping_matrix, None, RsmIndirectCovarianceB)
RsmIndirectCovarianceB._v_unmodeled_covariance = new_instancemethod(_rsm_indirect_covariance_b.RsmIndirectCovarianceB__v_unmodeled_covariance, None, RsmIndirectCovarianceB)
RsmIndirectCovarianceB.subgroup_i = new_instancemethod(_rsm_indirect_covariance_b.RsmIndirectCovarianceB_subgroup_i, None, RsmIndirectCovarianceB)
RsmIndirectCovarianceB.add_subgroup = new_instancemethod(_rsm_indirect_covariance_b.RsmIndirectCovarianceB_add_subgroup, None, RsmIndirectCovarianceB)
RsmIndirectCovarianceB.check_consistent = new_instancemethod(_rsm_indirect_covariance_b.RsmIndirectCovarianceB_check_consistent, None, RsmIndirectCovarianceB)
RsmIndirectCovarianceB_swigregister = _rsm_indirect_covariance_b.RsmIndirectCovarianceB_swigregister
RsmIndirectCovarianceB_swigregister(RsmIndirectCovarianceB)

def RsmIndirectCovarianceB_read_tre_string(Tre_in):
    """

    boost::shared_ptr< RsmIndirectCovarianceB > RsmIndirectCovarianceB::read_tre_string(const std::string &Tre_in)
    Read a TRE string.

    Note that the TRE does not contain all the fields we have in a
    RsmRationalPolynomial. However the fields that aren't contained are
    ones used for fitting the RSM, so in practice this doesn't matter. We
    just set the various fields to the default values found in the
    constructor.

    This should have all the TRE except for the front CETAG and CEL. It is
    convenient to treat these fields as special. (We can revisit this in
    the future if we need to). 
    """
    return _rsm_indirect_covariance_b.RsmIndirectCovarianceB_read_tre_string(Tre_in)

class Vector_RsmBSubgroup(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _rsm_indirect_covariance_b.Vector_RsmBSubgroup_swiginit(self, _rsm_indirect_covariance_b.new_Vector_RsmBSubgroup(*args))
    __swig_destroy__ = _rsm_indirect_covariance_b.delete_Vector_RsmBSubgroup
Vector_RsmBSubgroup.iterator = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_iterator, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.__nonzero__ = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup___nonzero__, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.__bool__ = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup___bool__, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.__len__ = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup___len__, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.__getslice__ = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup___getslice__, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.__setslice__ = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup___setslice__, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.__delslice__ = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup___delslice__, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.__delitem__ = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup___delitem__, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.__getitem__ = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup___getitem__, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.__setitem__ = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup___setitem__, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.pop = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_pop, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.append = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_append, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.empty = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_empty, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.size = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_size, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.swap = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_swap, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.begin = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_begin, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.end = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_end, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.rbegin = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_rbegin, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.rend = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_rend, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.clear = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_clear, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.get_allocator = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_get_allocator, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.pop_back = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_pop_back, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.erase = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_erase, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.push_back = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_push_back, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.front = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_front, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.back = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_back, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.assign = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_assign, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.resize = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_resize, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.insert = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_insert, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.reserve = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_reserve, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup.capacity = new_instancemethod(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_capacity, None, Vector_RsmBSubgroup)
Vector_RsmBSubgroup_swigregister = _rsm_indirect_covariance_b.Vector_RsmBSubgroup_swigregister
Vector_RsmBSubgroup_swigregister(Vector_RsmBSubgroup)


__all__ = ["RsmIndirectCovarianceB","RsmBSubgroup","Vector_RsmBSubgroup","RsmBUnmodeledCovariance"]



