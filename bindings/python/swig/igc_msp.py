# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _igc_msp

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _igc_msp.SWIG_PyInstanceMethod_New
_swig_new_static_method = _igc_msp.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _igc_msp.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _igc_msp.delete_SwigPyIterator
    value = _swig_new_instance_method(_igc_msp.SwigPyIterator_value)
    incr = _swig_new_instance_method(_igc_msp.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_igc_msp.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_igc_msp.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_igc_msp.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_igc_msp.SwigPyIterator_copy)
    next = _swig_new_instance_method(_igc_msp.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_igc_msp.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_igc_msp.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_igc_msp.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_igc_msp.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_igc_msp.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_igc_msp.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_igc_msp.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_igc_msp.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_igc_msp.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _igc_msp:
_igc_msp.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _igc_msp.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.image_ground_connection
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
have_msp_supported = _igc_msp.have_msp_supported
class IgcMsp(geocal_swig.image_ground_connection.ImageGroundConnectionCopy):
    r"""

    This is an ImageGroundConnection that uses the MSP (Mensuration
    Service Program) library to implement an ImageGroundConnection.

    This uses a set of plugins for the CSM (Community Sensor Model,
    seehttps://github.com/sminster/csm) to support various sensor models.
    In particular, this supports various NITF formats such as RPC, RSM,
    SENSRB, GLAS/GFM.

    Note this goes from the CSM library to our ImageGroundConnection
    interface. We may well write a plugin to go the other way at some
    point, so software that uses the CSM library can use GeoCal
    ImageGroundConnection objects.

    C++ includes: igc_msp.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        IgcMsp::IgcMsp(const std::string &Fname, const boost::shared_ptr< Dem >
        &D=boost::shared_ptr< Dem >(new SimpleDem()), int Image_index=0)
        GeoCal::IgcMsp::IgcMsp
        Constructor.
        Note to use the MSP library, you should make sure the proper
        environment variables are set. This happens in the normal GeoCal
        setup, but the variables are MSP_DATA_DIR, MSPCCS_DATA, and
        CSM_PLUGIN_DIR. Note the directory should end in "/", just as a
        convention - so /foo/bar/plugins/. 
        """
        _igc_msp.IgcMsp_swiginit(self, _igc_msp.new_IgcMsp(*args))
    _v_covariance = _swig_new_instance_method(_igc_msp.IgcMsp__v_covariance)

    @property
    def covariance(self):
        return self._v_covariance()

    joint_covariance = _swig_new_instance_method(_igc_msp.IgcMsp_joint_covariance)
    msp_print_plugin_list = _swig_new_static_method(_igc_msp.IgcMsp_msp_print_plugin_list)
    msp_register_plugin = _swig_new_static_method(_igc_msp.IgcMsp_msp_register_plugin)
    msp_plugin_list = _swig_new_static_method(_igc_msp.IgcMsp_msp_plugin_list)
    msp_model_list = _swig_new_static_method(_igc_msp.IgcMsp_msp_model_list)
    image_ids = _swig_new_static_method(_igc_msp.IgcMsp_image_ids)
    sensor_velocity = _swig_new_instance_method(_igc_msp.IgcMsp_sensor_velocity)
    generate_rsm_tre = _swig_new_instance_method(_igc_msp.IgcMsp_generate_rsm_tre)
    ground_coordinate_with_cov = _swig_new_instance_method(_igc_msp.IgcMsp_ground_coordinate_with_cov)
    ce90_le90 = _swig_new_instance_method(_igc_msp.IgcMsp_ce90_le90)
    _v_family = _swig_new_instance_method(_igc_msp.IgcMsp__v_family)

    @property
    def family(self):
        return self._v_family()

    _v_version = _swig_new_instance_method(_igc_msp.IgcMsp__v_version)

    @property
    def version(self):
        return self._v_version()

    _v_model_name = _swig_new_instance_method(_igc_msp.IgcMsp__v_model_name)

    @property
    def model_name(self):
        return self._v_model_name()

    _v_file_name = _swig_new_instance_method(_igc_msp.IgcMsp__v_file_name)

    @property
    def file_name(self):
        return self._v_file_name()

    _v_image_index = _swig_new_instance_method(_igc_msp.IgcMsp__v_image_index)

    @property
    def image_index(self):
        return self._v_image_index()

    _v_pedigree = _swig_new_instance_method(_igc_msp.IgcMsp__v_pedigree)

    @property
    def pedigree(self):
        return self._v_pedigree()

    _v_image_identifer = _swig_new_instance_method(_igc_msp.IgcMsp__v_image_identifer)

    @property
    def image_identifer(self):
        return self._v_image_identifer()

    _v_sensor_identifer = _swig_new_instance_method(_igc_msp.IgcMsp__v_sensor_identifer)

    @property
    def sensor_identifer(self):
        return self._v_sensor_identifer()

    _v_platform_identifer = _swig_new_instance_method(_igc_msp.IgcMsp__v_platform_identifer)

    @property
    def platform_identifer(self):
        return self._v_platform_identifer()

    _v_collection_identifer = _swig_new_instance_method(_igc_msp.IgcMsp__v_collection_identifer)

    @property
    def collection_identifer(self):
        return self._v_collection_identifer()

    _v_trajectory_identifer = _swig_new_instance_method(_igc_msp.IgcMsp__v_trajectory_identifer)

    @property
    def trajectory_identifer(self):
        return self._v_trajectory_identifer()

    _v_sensor_type = _swig_new_instance_method(_igc_msp.IgcMsp__v_sensor_type)

    @property
    def sensor_type(self):
        return self._v_sensor_type()

    _v_sensor_mode = _swig_new_instance_method(_igc_msp.IgcMsp__v_sensor_mode)

    @property
    def sensor_mode(self):
        return self._v_sensor_mode()

    _v_reference_date_time = _swig_new_instance_method(_igc_msp.IgcMsp__v_reference_date_time)

    @property
    def reference_date_time(self):
        return self._v_reference_date_time()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _igc_msp.delete_IgcMsp

# Register IgcMsp in _igc_msp:
_igc_msp.IgcMsp_swigregister(IgcMsp)

__all__ = ["IgcMsp","have_msp_supported"]


