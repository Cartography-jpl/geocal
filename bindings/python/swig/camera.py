# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _camera

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _camera.SWIG_PyInstanceMethod_New
_swig_new_static_method = _camera.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _camera.delete_SwigPyIterator
    value = _swig_new_instance_method(_camera.SwigPyIterator_value)
    incr = _swig_new_instance_method(_camera.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_camera.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_camera.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_camera.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_camera.SwigPyIterator_copy)
    next = _swig_new_instance_method(_camera.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_camera.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_camera.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_camera.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_camera.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_camera.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_camera.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_camera.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_camera.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_camera.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _camera:
_camera.SwigPyIterator_swigregister(SwigPyIterator)
SWIG_MODULE_ALREADY_DONE = _camera.SWIG_MODULE_ALREADY_DONE
SHARED_PTR_DISOWN = _camera.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.with_parameter
class ObservableCamera(geocal_swig.generic_object.GenericObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _camera.delete_ObservableCamera
    add_observer_and_keep_reference = _swig_new_instance_method(_camera.ObservableCamera_add_observer_and_keep_reference)
    add_observer = _swig_new_instance_method(_camera.ObservableCamera_add_observer)
    remove_observer = _swig_new_instance_method(_camera.ObservableCamera_remove_observer)

# Register ObservableCamera in _camera:
_camera.ObservableCamera_swigregister(ObservableCamera)
class ObserverCamera(geocal_swig.generic_object.GenericObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _camera.ObserverCamera_swiginit(self, _camera.new_ObserverCamera())
    __swig_destroy__ = _camera.delete_ObserverCamera
    notify_update = _swig_new_instance_method(_camera.ObserverCamera_notify_update)
    notify_add = _swig_new_instance_method(_camera.ObserverCamera_notify_add)
    notify_remove = _swig_new_instance_method(_camera.ObserverCamera_notify_remove)

# Register ObserverCamera in _camera:
_camera.ObserverCamera_swigregister(ObserverCamera)
class Camera(ObservableCamera, geocal_swig.with_parameter.WithParameter):
    r"""

    This class models a frame camera.

    It is used to convert ScLookVector to FrameCoordinate and vice versa.

    Other objects may depend on the Camera, and should be updated when the
    Camera is updated. To facilitate that, this class in an Oberverable,
    and objects can add themselves as Observers to be notified when the
    Camera is updated.

    C++ includes: camera.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""

        GeoCal::Camera::Camera()
        GeoCal::Camera::Camera
        Default constructor.

        """
        if self.__class__ == Camera:
            _self = None
        else:
            _self = self
        _camera.Camera_swiginit(self, _camera.new_Camera(_self, ))
    desc = _swig_new_instance_method(_camera.Camera_desc)
    add_observer = _swig_new_instance_method(_camera.Camera_add_observer)
    remove_observer = _swig_new_instance_method(_camera.Camera_remove_observer)
    integration_time = _swig_new_instance_method(_camera.Camera_integration_time)
    _v_number_band = _swig_new_instance_method(_camera.Camera__v_number_band)

    @property
    def number_band(self):
        return self._v_number_band()

    number_line = _swig_new_instance_method(_camera.Camera_number_line)
    number_sample = _swig_new_instance_method(_camera.Camera_number_sample)
    frame_coordinate = _swig_new_instance_method(_camera.Camera_frame_coordinate)
    frame_coordinate_with_derivative = _swig_new_instance_method(_camera.Camera_frame_coordinate_with_derivative)
    frame_line_coordinate = _swig_new_instance_method(_camera.Camera_frame_line_coordinate)
    sc_look_vector = _swig_new_instance_method(_camera.Camera_sc_look_vector)
    sc_look_vector_with_derivative = _swig_new_instance_method(_camera.Camera_sc_look_vector_with_derivative)
    __str__ = _swig_new_instance_method(_camera.Camera___str__)
    _v_parameter = _swig_new_instance_method(_camera.Camera__v_parameter)

    @property
    def parameter(self):
        return self._v_parameter()

    @parameter.setter
    def parameter(self, value):
      self._v_parameter(value)

    _v_parameter_with_derivative = _swig_new_instance_method(_camera.Camera__v_parameter_with_derivative)

    @property
    def parameter_with_derivative(self):
        return self._v_parameter_with_derivative()

    @parameter_with_derivative.setter
    def parameter_with_derivative(self, value):
      self._v_parameter_with_derivative(value)

    _v_parameter_name = _swig_new_instance_method(_camera.Camera__v_parameter_name)

    @property
    def parameter_name(self):
        return self._v_parameter_name()

    _v_parameter_subset = _swig_new_instance_method(_camera.Camera__v_parameter_subset)

    @property
    def parameter_subset(self):
        return self._v_parameter_subset()

    @parameter_subset.setter
    def parameter_subset(self, value):
      self._v_parameter_subset(value)

    _v_parameter_with_derivative_subset = _swig_new_instance_method(_camera.Camera__v_parameter_with_derivative_subset)

    @property
    def parameter_with_derivative_subset(self):
        return self._v_parameter_with_derivative_subset()

    @parameter_with_derivative_subset.setter
    def parameter_with_derivative_subset(self, value):
      self._v_parameter_with_derivative_subset(value)

    _v_parameter_name_subset = _swig_new_instance_method(_camera.Camera__v_parameter_name_subset)

    @property
    def parameter_name_subset(self):
        return self._v_parameter_name_subset()

    _v_parameter_mask = _swig_new_instance_method(_camera.Camera__v_parameter_mask)

    @property
    def parameter_mask(self):
        return self._v_parameter_mask()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    notify_update_do = _swig_new_instance_method(_camera.Camera_notify_update_do)
    __swig_destroy__ = _camera.delete_Camera
    def __disown__(self):
        self.this.disown()
        _camera.disown_Camera(self)
        return weakref.proxy(self)

# Register Camera in _camera:
_camera.Camera_swigregister(Camera)
class SubCamera(Camera):
    r"""

    This is an adapter of a Camera, that presents a subset of the full
    camera as a smaller camera.

    C++ includes: camera.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Cam, Start_line, Start_sample, Number_line, Number_sample):
        r"""

        GeoCal::SubCamera::SubCamera(const boost::shared_ptr< Camera > &Cam, int Start_line, int
        Start_sample, int Number_line, int Number_sample)
        GeoCal::SubCamera::SubCamera
        """
        _camera.SubCamera_swiginit(self, _camera.new_SubCamera(Cam, Start_line, Start_sample, Number_line, Number_sample))
    _v_full_camera = _swig_new_instance_method(_camera.SubCamera__v_full_camera)

    @property
    def full_camera(self):
        return self._v_full_camera()

    _v_start_line = _swig_new_instance_method(_camera.SubCamera__v_start_line)

    @property
    def start_line(self):
        return self._v_start_line()

    _v_start_sample = _swig_new_instance_method(_camera.SubCamera__v_start_sample)

    @property
    def start_sample(self):
        return self._v_start_sample()

    __swig_destroy__ = _camera.delete_SubCamera

# Register SubCamera in _camera:
_camera.SubCamera_swigregister(SubCamera)
class SimpleCamera(Camera):
    r"""

    This is a simple Camera.

    It is not intended as a realistic camera model, but rather as
    supplying a simple class to use for testing. The defaults are for the
    nominal MISR DF camera, red band.

    C++ includes: camera.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        SimpleCamera::SimpleCamera(double Beta=58 *Constant::deg_to_rad, double Delta=-2.7
        *Constant::deg_to_rad, double Epsilon=0, double Focal=123.8e-3, double
        line_pitch=18e-6, double sample_pitch=21e-6, int Number_line=1, int
        Number_sample=1504)
        GeoCal::SimpleCamera::SimpleCamera
        This creates SimpleCamera with the given data.
        The default data is for the nominal MISR DF, red band. 
        """
        _camera.SimpleCamera_swiginit(self, _camera.new_SimpleCamera(*args))
    _v_beta = _swig_new_instance_method(_camera.SimpleCamera__v_beta)

    @property
    def beta(self):
        return self._v_beta()

    _v_delta = _swig_new_instance_method(_camera.SimpleCamera__v_delta)

    @property
    def delta(self):
        return self._v_delta()

    _v_epsilon = _swig_new_instance_method(_camera.SimpleCamera__v_epsilon)

    @property
    def epsilon(self):
        return self._v_epsilon()

    _v_focal_length = _swig_new_instance_method(_camera.SimpleCamera__v_focal_length)

    @property
    def focal_length(self):
        return self._v_focal_length()

    _v_line_pitch = _swig_new_instance_method(_camera.SimpleCamera__v_line_pitch)

    @property
    def line_pitch(self):
        return self._v_line_pitch()

    _v_sample_pitch = _swig_new_instance_method(_camera.SimpleCamera__v_sample_pitch)

    @property
    def sample_pitch(self):
        return self._v_sample_pitch()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _camera.delete_SimpleCamera

# Register SimpleCamera in _camera:
_camera.SimpleCamera_swigregister(SimpleCamera)
class Vector_Camera(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_camera.Vector_Camera_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_camera.Vector_Camera___nonzero__)
    __bool__ = _swig_new_instance_method(_camera.Vector_Camera___bool__)
    __len__ = _swig_new_instance_method(_camera.Vector_Camera___len__)
    __getslice__ = _swig_new_instance_method(_camera.Vector_Camera___getslice__)
    __setslice__ = _swig_new_instance_method(_camera.Vector_Camera___setslice__)
    __delslice__ = _swig_new_instance_method(_camera.Vector_Camera___delslice__)
    __delitem__ = _swig_new_instance_method(_camera.Vector_Camera___delitem__)
    __getitem__ = _swig_new_instance_method(_camera.Vector_Camera___getitem__)
    __setitem__ = _swig_new_instance_method(_camera.Vector_Camera___setitem__)
    pop = _swig_new_instance_method(_camera.Vector_Camera_pop)
    append = _swig_new_instance_method(_camera.Vector_Camera_append)
    empty = _swig_new_instance_method(_camera.Vector_Camera_empty)
    size = _swig_new_instance_method(_camera.Vector_Camera_size)
    swap = _swig_new_instance_method(_camera.Vector_Camera_swap)
    begin = _swig_new_instance_method(_camera.Vector_Camera_begin)
    end = _swig_new_instance_method(_camera.Vector_Camera_end)
    rbegin = _swig_new_instance_method(_camera.Vector_Camera_rbegin)
    rend = _swig_new_instance_method(_camera.Vector_Camera_rend)
    clear = _swig_new_instance_method(_camera.Vector_Camera_clear)
    get_allocator = _swig_new_instance_method(_camera.Vector_Camera_get_allocator)
    pop_back = _swig_new_instance_method(_camera.Vector_Camera_pop_back)
    erase = _swig_new_instance_method(_camera.Vector_Camera_erase)

    def __init__(self, *args):
        _camera.Vector_Camera_swiginit(self, _camera.new_Vector_Camera(*args))
    push_back = _swig_new_instance_method(_camera.Vector_Camera_push_back)
    front = _swig_new_instance_method(_camera.Vector_Camera_front)
    back = _swig_new_instance_method(_camera.Vector_Camera_back)
    assign = _swig_new_instance_method(_camera.Vector_Camera_assign)
    resize = _swig_new_instance_method(_camera.Vector_Camera_resize)
    insert = _swig_new_instance_method(_camera.Vector_Camera_insert)
    reserve = _swig_new_instance_method(_camera.Vector_Camera_reserve)
    capacity = _swig_new_instance_method(_camera.Vector_Camera_capacity)
    __swig_destroy__ = _camera.delete_Vector_Camera

# Register Vector_Camera in _camera:
_camera.Vector_Camera_swigregister(Vector_Camera)

__all__ = ["ObserverCamera","ObservableCamera","Camera","SimpleCamera","Vector_Camera","SubCamera"]


