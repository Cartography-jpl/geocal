# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _planet_coordinate

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _planet_coordinate.SWIG_PyInstanceMethod_New
_swig_new_static_method = _planet_coordinate.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _planet_coordinate.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _planet_coordinate.delete_SwigPyIterator
    value = _swig_new_instance_method(_planet_coordinate.SwigPyIterator_value)
    incr = _swig_new_instance_method(_planet_coordinate.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_planet_coordinate.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_planet_coordinate.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_planet_coordinate.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_planet_coordinate.SwigPyIterator_copy)
    next = _swig_new_instance_method(_planet_coordinate.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_planet_coordinate.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_planet_coordinate.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_planet_coordinate.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_planet_coordinate.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_planet_coordinate.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_planet_coordinate.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_planet_coordinate.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_planet_coordinate.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_planet_coordinate.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _planet_coordinate:
_planet_coordinate.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _planet_coordinate.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.ground_coordinate
import geocal_swig.generic_object
import geocal_swig.look_vector
import geocal_swig.dem
import geocal_swig.coordinate_converter
import geocal_swig.observer
import geocal_swig.with_parameter
class PlanetConstant(object):
    r"""

    Constants for a planet.

    Note that "Planet" also includes "Moon of planet", basically
    anything with a NAIF_CODE

    C++ includes: planet_coordinate.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MARS_NAIF_CODE = _planet_coordinate.PlanetConstant_MARS_NAIF_CODE
    EUROPA_NAIF_CODE = _planet_coordinate.PlanetConstant_EUROPA_NAIF_CODE
    CERES_NAIF_CODE = _planet_coordinate.PlanetConstant_CERES_NAIF_CODE
    MOON_NAIF_CODE = _planet_coordinate.PlanetConstant_MOON_NAIF_CODE
    a = _swig_new_static_method(_planet_coordinate.PlanetConstant_a)
    b = _swig_new_static_method(_planet_coordinate.PlanetConstant_b)
    esq = _swig_new_static_method(_planet_coordinate.PlanetConstant_esq)
    flattening = _swig_new_static_method(_planet_coordinate.PlanetConstant_flattening)
    inverse_flattening = _swig_new_static_method(_planet_coordinate.PlanetConstant_inverse_flattening)
    name = _swig_new_static_method(_planet_coordinate.PlanetConstant_name)

    def __init__(self):
        _planet_coordinate.PlanetConstant_swiginit(self, _planet_coordinate.new_PlanetConstant())
    __swig_destroy__ = _planet_coordinate.delete_PlanetConstant

# Register PlanetConstant in _planet_coordinate:
_planet_coordinate.PlanetConstant_swigregister(PlanetConstant)
class PlanetFixed(geocal_swig.ground_coordinate.CartesianFixed):
    r"""

    This is a ground coordinate, expressed in fixed Planet coordinates.

    Note that "Planet" also includes "Moon of planet", basically
    anything with a NAIF_CODE

    C++ includes: planet_coordinate.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::PlanetFixed::PlanetFixed(int Naif_code=-1)
        GeoCal::PlanetFixed::PlanetFixed
        Default constructor.

        """
        _planet_coordinate.PlanetFixed_swiginit(self, _planet_coordinate.new_PlanetFixed(*args))
    reference_surface_intersect_approximate = _swig_new_instance_method(_planet_coordinate.PlanetFixed_reference_surface_intersect_approximate)
    target_position = _swig_new_static_method(_planet_coordinate.PlanetFixed_target_position)
    orbit_data = _swig_new_static_method(_planet_coordinate.PlanetFixed_orbit_data)
    _v_planet_radius = _swig_new_instance_method(_planet_coordinate.PlanetFixed__v_planet_radius)

    @property
    def planet_radius(self):
        return self._v_planet_radius()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _planet_coordinate.delete_PlanetFixed

# Register PlanetFixed in _planet_coordinate:
_planet_coordinate.PlanetFixed_swigregister(PlanetFixed)
class Planetocentric(geocal_swig.ground_coordinate.GroundCoordinate):
    r"""

    This is Planet coordinates as Planetocentric latitude, longitude, and
    height above the reference ellipsoid.

    This is the planet equivalent of Geocentric ( not Geodetic). Height is
    relative to the ellipsoid, but latitude is relative to center of
    planet rather than normal of ellipsoid.

    Note that "Planet" also includes "Moon of planet", basically
    anything with a NAIF_CODE

    C++ includes: planet_coordinate.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::Planetocentric::Planetocentric(int Naif_code=-1)
        GeoCal::Planetocentric::Planetocentric
        Default constructor.

        """
        _planet_coordinate.Planetocentric_swiginit(self, _planet_coordinate.new_Planetocentric(*args))

    @property
    def height_reference_surface(self):
        return self._v_height_reference_surface()


    @property
    def latitude(self):
        return self._v_latitude()


    @property
    def longitude(self):
        return self._v_longitude()

    _v_planet_radius = _swig_new_instance_method(_planet_coordinate.Planetocentric__v_planet_radius)

    @property
    def planet_radius(self):
        return self._v_planet_radius()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _planet_coordinate.delete_Planetocentric

# Register Planetocentric in _planet_coordinate:
_planet_coordinate.Planetocentric_swigregister(Planetocentric)
class PlanetInertial(geocal_swig.ground_coordinate.CartesianInertial):
    r"""

    This is a Planet Intertial coordinate.

    Note that "Planet" also includes "Moon of planet", basically
    anything with a NAIF_CODE

    C++ includes: planet_coordinate.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::PlanetInertial::PlanetInertial(int Naif_code=-1)
        GeoCal::PlanetInertial::PlanetInertial
        Default constructor, doesn't initialize position.

        """
        _planet_coordinate.PlanetInertial_swiginit(self, _planet_coordinate.new_PlanetInertial(*args))
    reference_surface_intersect_approximate = _swig_new_instance_method(_planet_coordinate.PlanetInertial_reference_surface_intersect_approximate)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _planet_coordinate.delete_PlanetInertial

# Register PlanetInertial in _planet_coordinate:
_planet_coordinate.PlanetInertial_swigregister(PlanetInertial)
class PlanetocentricConverter(geocal_swig.coordinate_converter.CoordinateConverter):
    r"""

    CoordinateConverter that goes to and from Planetocentric coordinates.

    C++ includes: planet_coordinate.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Naif_code=-1):
        r"""

        GeoCal::PlanetocentricConverter::PlanetocentricConverter(int Naif_code=-1)
        GeoCal::PlanetocentricConverter::PlanetocentricConverter
        Constructor.

        """
        _planet_coordinate.PlanetocentricConverter_swiginit(self, _planet_coordinate.new_PlanetocentricConverter(Naif_code))
    convert_from_coordinate = _swig_new_instance_method(_planet_coordinate.PlanetocentricConverter_convert_from_coordinate)
    _v_naif_code = _swig_new_instance_method(_planet_coordinate.PlanetocentricConverter__v_naif_code)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _planet_coordinate.delete_PlanetocentricConverter

# Register PlanetocentricConverter in _planet_coordinate:
_planet_coordinate.PlanetocentricConverter_swigregister(PlanetocentricConverter)
class PlanetSimpleDem(geocal_swig.dem.Dem):
    r"""

    C++ includes: planet_coordinate.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::PlanetSimpleDem::PlanetSimpleDem(int Naif_code=-1)
        GeoCal::PlanetSimpleDem::PlanetSimpleDem
        Default constructor.

        """
        _planet_coordinate.PlanetSimpleDem_swiginit(self, _planet_coordinate.new_PlanetSimpleDem(*args))
    _v_h = _swig_new_instance_method(_planet_coordinate.PlanetSimpleDem__v_h)

    @property
    def h(self):
        return self._v_h()

    @h.setter
    def h(self, value):
      self._v_h(value)

    _v_naif_code = _swig_new_instance_method(_planet_coordinate.PlanetSimpleDem__v_naif_code)

    @property
    def naif_code(self):
        return self._v_naif_code()

    @naif_code.setter
    def naif_code(self, value):
      self._v_naif_code(value)


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _planet_coordinate.delete_PlanetSimpleDem

# Register PlanetSimpleDem in _planet_coordinate:
_planet_coordinate.PlanetSimpleDem_swigregister(PlanetSimpleDem)

__all__ = ["PlanetConstant","PlanetFixed","PlanetInertial","Planetocentric","PlanetocentricConverter","PlanetSimpleDem"]


