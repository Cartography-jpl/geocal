# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _ray_caster_resampler

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _ray_caster_resampler.SWIG_PyInstanceMethod_New
_swig_new_static_method = _ray_caster_resampler.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ray_caster_resampler.delete_SwigPyIterator
    value = _swig_new_instance_method(_ray_caster_resampler.SwigPyIterator_value)
    incr = _swig_new_instance_method(_ray_caster_resampler.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_ray_caster_resampler.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_ray_caster_resampler.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_ray_caster_resampler.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_ray_caster_resampler.SwigPyIterator_copy)
    next = _swig_new_instance_method(_ray_caster_resampler.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_ray_caster_resampler.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_ray_caster_resampler.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_ray_caster_resampler.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_ray_caster_resampler.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_ray_caster_resampler.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_ray_caster_resampler.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_ray_caster_resampler.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_ray_caster_resampler.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_ray_caster_resampler.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ray_caster_resampler:
_ray_caster_resampler.SwigPyIterator_swigregister(SwigPyIterator)
SWIG_MODULE_ALREADY_DONE = _ray_caster_resampler.SWIG_MODULE_ALREADY_DONE
SHARED_PTR_DISOWN = _ray_caster_resampler.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class RayCasterResampler(geocal_swig.generic_object.GenericObject):
    r"""

    This is used to project data to the surface using a RayCaster.

    This is similar to IgcMapProjected, except rather than going from the
    ground to the image we go from the image to the ground. Depending on
    the type of ImageGroundConnection we are using, one or the other
    direction can be much faster.

    This class is really designed to be wrapped in python. Although it
    could be used from C++, it would probably be a bit awkward. We can
    always rework this if needed, but I expect the primary use of this
    will be programs like igc_project.

    There are two steps involved:

    The initial ray casting, determining where each pixel goes in the
    final map.

    Resampling the data to create the final radiance data.

    Step 1 can be done in parallel to speed things up. We currently have
    step 2 needing to be done serially, I'm not sure that it could be done
    in parallel.

    For step 1, The subsetting should be done on Ray_caster (so like
    IgcRayCaster where we specify the start and number of lines).
    ray_cast_step() steps through all the positions in the ray caster.

    C++ includes: ray_caster_resampler.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Ray_caster, Map_info):
        r"""

        RayCasterResampler::RayCasterResampler(const boost::shared_ptr< RayCaster > &Ray_caster, const
        boost::shared_ptr< MapInfo > &Map_info)
        Constructor. 
        """
        _ray_caster_resampler.RayCasterResampler_swiginit(self, _ray_caster_resampler.new_RayCasterResampler(Ray_caster, Map_info))
    ray_cast_step = _swig_new_instance_method(_ray_caster_resampler.RayCasterResampler_ray_cast_step)
    final_rad_step = _swig_new_instance_method(_ray_caster_resampler.RayCasterResampler_final_rad_step)
    _v_ray_caster = _swig_new_instance_method(_ray_caster_resampler.RayCasterResampler__v_ray_caster)

    @property
    def ray_caster(self):
        return self._v_ray_caster()

    _v_map_info = _swig_new_instance_method(_ray_caster_resampler.RayCasterResampler__v_map_info)

    @property
    def map_info(self):
        return self._v_map_info()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _ray_caster_resampler.delete_RayCasterResampler

# Register RayCasterResampler in _ray_caster_resampler:
_ray_caster_resampler.RayCasterResampler_swigregister(RayCasterResampler)

__all__ = ["RayCasterResampler"]


