# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _iterative_morphological_dilation

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _iterative_morphological_dilation.SWIG_PyInstanceMethod_New
_swig_new_static_method = _iterative_morphological_dilation.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _iterative_morphological_dilation.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _iterative_morphological_dilation.delete_SwigPyIterator
    value = _swig_new_instance_method(_iterative_morphological_dilation.SwigPyIterator_value)
    incr = _swig_new_instance_method(_iterative_morphological_dilation.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_iterative_morphological_dilation.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_iterative_morphological_dilation.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_iterative_morphological_dilation.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_iterative_morphological_dilation.SwigPyIterator_copy)
    next = _swig_new_instance_method(_iterative_morphological_dilation.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_iterative_morphological_dilation.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_iterative_morphological_dilation.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_iterative_morphological_dilation.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_iterative_morphological_dilation.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_iterative_morphological_dilation.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_iterative_morphological_dilation.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_iterative_morphological_dilation.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_iterative_morphological_dilation.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_iterative_morphological_dilation.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _iterative_morphological_dilation:
_iterative_morphological_dilation.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _iterative_morphological_dilation.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
class IterativeMorphologicalDilation(geocal_swig.generic_object.GenericObject):
    r"""

    This is a simple algorithm to fill in missing pixels in an image.

    This looks at all the pixels that are on the "edge" of the image -
    so pixels that aren't filled in but have at least one neighbor. We
    then fill in those pixels, and repeat the process iteratively. This is
    sometimes referred to as the "grass fire" algorithm.

    C++ includes: iterative_morphological_dilation.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    C_ORDER = _iterative_morphological_dilation.IterativeMorphologicalDilation_C_ORDER
    RANDOM_ORDER = _iterative_morphological_dilation.IterativeMorphologicalDilation_RANDOM_ORDER
    MOST_NEIGHBORS_FIRST = _iterative_morphological_dilation.IterativeMorphologicalDilation_MOST_NEIGHBORS_FIRST
    FLAT_WEIGHTED_AVERAGE = _iterative_morphological_dilation.IterativeMorphologicalDilation_FLAT_WEIGHTED_AVERAGE
    GAUSSIAN_WEIGHTED_AVERAGE = _iterative_morphological_dilation.IterativeMorphologicalDilation_GAUSSIAN_WEIGHTED_AVERAGE
    NEIGBORHOOD_MEDIAN = _iterative_morphological_dilation.IterativeMorphologicalDilation_NEIGBORHOOD_MEDIAN

    def __init__(self, *args):
        r"""

        IterativeMorphologicalDilation::IterativeMorphologicalDilation(const blitz::Array< double, 2 > &Image, const blitz::Array< bool, 2 >
        &Mask, int Window_size=3, double Sigma=-1, PredictionType
        Prediction_type=GAUSSIAN_WEIGHTED_AVERAGE, FrontierFillOrder
        Frontier_fill_order=RANDOM_ORDER)
        Constructor.

        The Mask is "true" where we don't have Image data and wish to fill
        in data (i.e., this is the same sense as ImageMask).

        Right now, this just works with blitz arrays. We could extend this to
        work with RasterImage and ImageMask. But this is often called from
        python, which interacts better with blitz arrays (which map to numpy
        arrays in python). 
        """
        _iterative_morphological_dilation.IterativeMorphologicalDilation_swiginit(self, _iterative_morphological_dilation.new_IterativeMorphologicalDilation(*args))
    __str__ = _swig_new_instance_method(_iterative_morphological_dilation.IterativeMorphologicalDilation___str__)
    _v_filled_image = _swig_new_instance_method(_iterative_morphological_dilation.IterativeMorphologicalDilation__v_filled_image)

    @property
    def filled_image(self):
        return self._v_filled_image()

    _v_filled_mask = _swig_new_instance_method(_iterative_morphological_dilation.IterativeMorphologicalDilation__v_filled_mask)

    @property
    def filled_mask(self):
        return self._v_filled_mask()

    _v_kernel = _swig_new_instance_method(_iterative_morphological_dilation.IterativeMorphologicalDilation__v_kernel)

    @property
    def kernel(self):
        return self._v_kernel()

    _v_frontier_fill_order = _swig_new_instance_method(_iterative_morphological_dilation.IterativeMorphologicalDilation__v_frontier_fill_order)

    @property
    def frontier_fill_order(self):
        return self._v_frontier_fill_order()

    _v_iteration_count = _swig_new_instance_method(_iterative_morphological_dilation.IterativeMorphologicalDilation__v_iteration_count)

    @property
    def iteration_count(self):
        return self._v_iteration_count()

    _v_window_size = _swig_new_instance_method(_iterative_morphological_dilation.IterativeMorphologicalDilation__v_window_size)

    @property
    def window_size(self):
        return self._v_window_size()

    _v_sigma = _swig_new_instance_method(_iterative_morphological_dilation.IterativeMorphologicalDilation__v_sigma)

    @property
    def sigma(self):
        return self._v_sigma()

    _v_prediction_type = _swig_new_instance_method(_iterative_morphological_dilation.IterativeMorphologicalDilation__v_prediction_type)

    @property
    def prediction_type(self):
        return self._v_prediction_type()

    set_random_seed = _swig_new_static_method(_iterative_morphological_dilation.IterativeMorphologicalDilation_set_random_seed)
    fill_missing_data = _swig_new_instance_method(_iterative_morphological_dilation.IterativeMorphologicalDilation_fill_missing_data)
    predicted_value = _swig_new_instance_method(_iterative_morphological_dilation.IterativeMorphologicalDilation_predicted_value)
    frontier_pixel_find = _swig_new_instance_method(_iterative_morphological_dilation.IterativeMorphologicalDilation_frontier_pixel_find)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _iterative_morphological_dilation.delete_IterativeMorphologicalDilation

# Register IterativeMorphologicalDilation in _iterative_morphological_dilation:
_iterative_morphological_dilation.IterativeMorphologicalDilation_swigregister(IterativeMorphologicalDilation)

__all__ = ["IterativeMorphologicalDilation"]


