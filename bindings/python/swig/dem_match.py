# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _dem_match.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dem_match', [dirname(__file__)])
        except ImportError:
            import _dem_match
            return _dem_match
        if fp is not None:
            try:
                _mod = imp.load_module('_dem_match', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _dem_match = swig_import_helper()
    del swig_import_helper
else:
    import _dem_match
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _dem_match.SHARED_PTR_DISOWN
def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst
 
def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class DemMatch(geocal_swig.generic_object.GenericObject):
    """
    This class does matching between two images, and then finds the
    intersection of these two images.

    This defines a Dem surface.

    I'm not really sure how this class should be arranged. Currently, this
    is used by the python class DemGenerate, and this is just the part
    that we want to have in C++. This may evolve over time, and change
    exactly what we do here.

    C++ includes: dem_match.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        GeoCal::DemMatch::DemMatch(const boost::shared_ptr< ImageToImageMatch > &Match, const
        boost::shared_ptr< RayIntersect > &Ray_intersect, double
        Max_dist_good_point)
        Constructor. 
        """
        _dem_match.DemMatch_swiginit(self,_dem_match.new_DemMatch(*args))
    def surface_point(self, *args):
        """
        blitz::Array< double, 2 > DemMatch::surface_point(const MapInfo &Mi, bool Include_ic=false) const
        Variation of surface_point where we go from the Surface.

        This requires that our image matcher is a SurfaceImageToImageMatch.
        But this runs much faster for ImageGroundConnection where calculating
        ground_coordinate is expensive. 
        """
        return _dem_match.DemMatch_surface_point(self, *args)

    def _v_match(self):
        """
        boost::shared_ptr<ImageToImageMatch> GeoCal::DemMatch::match() const

        """
        return _dem_match.DemMatch__v_match(self)

    @property
    def match(self):
        return self._v_match()

    def _v_ray_intersect(self):
        """
        boost::shared_ptr<RayIntersect> GeoCal::DemMatch::ray_intersect() const

        """
        return _dem_match.DemMatch__v_ray_intersect(self)

    @property
    def ray_intersect(self):
        return self._v_ray_intersect()

    def _v_max_distance(self):
        """
        double GeoCal::DemMatch::max_distance() const

        """
        return _dem_match.DemMatch__v_max_distance(self)

    @property
    def max_distance(self):
        return self._v_max_distance()

    def _v_number_point(self):
        """
        int GeoCal::DemMatch::number_point() const
        Total number of points we attempted matching in last call to
        surface_point. 
        """
        return _dem_match.DemMatch__v_number_point(self)

    @property
    def number_point(self):
        return self._v_number_point()

    def _v_number_match(self):
        """
        int GeoCal::DemMatch::number_match() const
        Number of successful matches in last call to surface_point. 
        """
        return _dem_match.DemMatch__v_number_match(self)

    @property
    def number_match(self):
        return self._v_number_match()

    def _v_number_success(self):
        """
        int GeoCal::DemMatch::number_success() const
        Number of point matched that then satisfied epipolar constraint in
        last call to surface_point, so total number of points returned. 
        """
        return _dem_match.DemMatch__v_number_success(self)

    @property
    def number_success(self):
        return self._v_number_success()

    def _v_diagnostic(self):
        """
        blitz::Array<int, 1> GeoCal::DemMatch::diagnostic() const
        Diagnostic values for failed image matches in the last call to
        surface_point. 
        """
        return _dem_match.DemMatch__v_diagnostic(self)

    @property
    def diagnostic(self):
        return self._v_diagnostic()

    def _v_all_distance_stat(self):
        """
        const boost::shared_ptr<Statistic>& GeoCal::DemMatch::all_distance_stat() const
        Statistics on distance for last call to surface point, including all
        matches (including those later rejected). 
        """
        return _dem_match.DemMatch__v_all_distance_stat(self)

    @property
    def all_distance_stat(self):
        return self._v_all_distance_stat()

    def _v_good_distance_stat(self):
        """
        const boost::shared_ptr<Statistic>& GeoCal::DemMatch::good_distance_stat() const
        Statistics on distance for last call to surface point, only including
        matches that are accepted as good points. 
        """
        return _dem_match.DemMatch__v_good_distance_stat(self)

    @property
    def good_distance_stat(self):
        return self._v_good_distance_stat()

    @classmethod
    def pickle_format_version(cls):
      return 1

    def __reduce__(self):
      return _new_from_init, (self.__class__, 1, self.match,self.ray_intersect,self.max_distance)

    __swig_destroy__ = _dem_match.delete_DemMatch
DemMatch.surface_point = new_instancemethod(_dem_match.DemMatch_surface_point,None,DemMatch)
DemMatch.__str__ = new_instancemethod(_dem_match.DemMatch___str__,None,DemMatch)
DemMatch._v_match = new_instancemethod(_dem_match.DemMatch__v_match,None,DemMatch)
DemMatch._v_ray_intersect = new_instancemethod(_dem_match.DemMatch__v_ray_intersect,None,DemMatch)
DemMatch._v_max_distance = new_instancemethod(_dem_match.DemMatch__v_max_distance,None,DemMatch)
DemMatch._v_number_point = new_instancemethod(_dem_match.DemMatch__v_number_point,None,DemMatch)
DemMatch._v_number_match = new_instancemethod(_dem_match.DemMatch__v_number_match,None,DemMatch)
DemMatch._v_number_success = new_instancemethod(_dem_match.DemMatch__v_number_success,None,DemMatch)
DemMatch._v_diagnostic = new_instancemethod(_dem_match.DemMatch__v_diagnostic,None,DemMatch)
DemMatch._v_all_distance_stat = new_instancemethod(_dem_match.DemMatch__v_all_distance_stat,None,DemMatch)
DemMatch._v_good_distance_stat = new_instancemethod(_dem_match.DemMatch__v_good_distance_stat,None,DemMatch)
DemMatch_swigregister = _dem_match.DemMatch_swigregister
DemMatch_swigregister(DemMatch)



