# Build these up as we go
libgeocal_la_SOURCES = 
SWIG_SRC=
SWIG_SRC_HDF5=
SWIG_SRC_GDAL=
libgeocal_la_LDFLAGS =
afidspythonvdev_PROGRAMS = 
dist_afidspythonvdev_SCRIPTS = 
dist_afidspythonvdev_DATA = 
SWIG_FLAG = 
pkgconfig_DATA+= @libgeocal@/../geocal.pc
geocalincdir = @includedir@/geocal
geocalinc_HEADERS =
geocalswiginc_HEADERS =
geocal_test_all_SOURCES = 

# Few different versions of boost filesystem. We want to consistent across code,
# so for now hold this as verison 3. It look like a bit of this moved into C++
# standard as of C++17, so this may go away in the future. But for now C++17 is a bit
# too new to require, so we stick with boost.
BOOST_CPPFLAGS+= -DBOOST_FILESYSTEM_VERSION=3
libgeocal_la_CXXFLAGS = $(AM_CXXFLAGS) $(CODE_COVERAGE_CXXFLAGS)
libgeocal_la_CFLAGS = $(AM_CFLAGS) $(CODE_COVERAGE_CFLAGS)
libgeocal_la_CPPFLAGS = $(AM_CPPFLAGS) $(VICAR_RTL_CFLAGS) $(BOOST_CPPFLAGS)
libgeocal_la_CPPFLAGS+= $(SPICE_CFLAGS) $(FFTW_CFLAGS) -I$(srcdir)/$(srcraw)
libgeocal_la_CPPFLAGS+= $(BLITZ_CFLAGS) $(CARTO_CFLAGS) $(CODE_COVERAGE_CPPFLAGS)
libgeocal_la_CPPFLAGS+= $(OPENMP_CFLAGS) $(GEOTIFF_CFLAGS)

EXTRA_libgeocal_la_DEPENDENCIES = $(VICAR_RTL_BUILD_DEPEND)
EXTRA_libgeocal_la_DEPENDENCIES+= $(CARTO_BUILD_DEPEND)

if HAVE_GDAL
# Include gdal in builds
libgeocal_la_LDFLAGS+= $(GDAL_LIBS) $(OPENSSL_LIBS)
libgeocal_la_CPPFLAGS+= $(GDAL_CFLAGS)
endif

# Include geotiff in builds
libgeocal_la_LDFLAGS+= $(GEOTIFF_LIBS)

# Include boost in builds
libgeocal_la_LDFLAGS+= -R $(BOOST_LIBDIR) -L$(BOOST_LIBDIR)
libgeocal_la_LDFLAGS+= $(BOOST_REGEX_LIB) $(BOOST_DATETIME_LIB)
libgeocal_la_LDFLAGS+= $(BOOST_IOSTREAMS_LIB) $(BOOST_FILESYSTEM_LIB)
libgeocal_la_LDFLAGS+= $(BOOST_SERIALIZATION_LIB) 

libgeocal_la_LDFLAGS+= $(OPENMP_CFLAGS)
# Include blitz in builds
libgeocal_la_LDFLAGS+= $(BLITZ_LIBS)

if HAVE_MSPI_SHARED
libgeocal_la_LDFLAGS+= $(MSPI_SHARED_LIBS)
libgeocal_la_CPPFLAGS+= $(MSPI_SHARED_CFLAGS)
endif

if HAVE_HDFEOS5
libgeocal_la_LDFLAGS+= $(HDFEOS5_LIB)
libgeocal_la_CPPFLAGS+= $(HDFEOS5_CFLAGS)
endif

if HAVE_HDF5
libgeocal_la_LDFLAGS+= $(HDF5_LIBS)
libgeocal_la_CPPFLAGS+= $(HDF5_CFLAGS)
endif 

# Include gsl in builds
libgeocal_la_LDFLAGS+= $(GSL_LIBS)

# Include FFTW in builds
libgeocal_la_LDFLAGS+= $(FFTW_LIBS)

# Include SDP toolkit
libgeocal_la_LDFLAGS+=$(SDP_LDFLAGS)

libgeocal_la_LDFLAGS+=$(CODE_COVERAGE_LIBS)

#=================================================================
# Target to just install geocal
# header, library, python

geocal_install: install-geocalincHEADERS install-geocalpkgpyexecLTLIBRARIES install-geocalpkgpythonPYTHON libgeocal.la
	$(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) libgeocal.la "$(DESTDIR)$(libdir)"

#=================================================================
# libgeocal: The main library

lib_LTLIBRARIES += libgeocal.la
libgeocal_la_LIBADD = $(CARTO_LIBS) $(VICAR_RTL_LIBS) $(FLIBS)
if BUILD_LIBRAW
libgeocal_la_LIBADD += libraw.la
endif
libgeocal_la_LIBADD += $(SPICE_LIBS)
libgeocal_la_LIBADD += $(MSPI_SHARED_LIBS)

#=================================================================
# Unit test
norm_raw = $(shell cd $(abs_srcdir)/@srcraw@; pwd)
norm_sdbx = $(shell cd $(abs_srcdir)/@srcsdbx@; pwd)
CODE_COVERAGE_IGNORE_PATTERN+= "*/thirdparty/libraw/*"
CODE_COVERAGE_IGNORE_PATTERN+= "*/thirdparty/libsdbx/*"
CODE_COVERAGE_IGNORE_PATTERN+= "*/lib/GeoCalCore/Support/boost/*"

check_PROGRAMS = geocal_test_all
geocal_test_all_SOURCES += @libgeocal@/test_all.cc
geocal_test_all_LDADD = libgeocal.la 
geocal_test_all_LDADD += $(CARTO_LIBS) $(VICAR_RTL_LIBS) $(SPICE_LIBS)
if BUILD_LIBRAW
geocal_test_all_LDADD += libraw.la
endif
geocal_test_all_LDADD += $(GDAL_LIBS) $(OPENSSL_LIBS) $(GEOTIFF_LIBS) $(CODE_COVERAGE_LIBS)
geocal_test_all_LDFLAGS = -no-install $(OPENMP_CFLAGS)
geocal_test_all_CPPFLAGS = $(AM_CPPFLAGS) $(CODE_COVERAGE_CPPFLAGS)
geocal_test_all_CPPFLAGS+= $(OPENMP_CFLAGS) $(GEOTIFF_CFLAGS)
geocal_test_all_CPPFLAGS+= $(VICAR_RTL_CFLAGS)
geocal_test_all_CPPFLAGS+= $(BOOST_CPPFLAGS) $(SPICE_CFLAGS) 
geocal_test_all_CPPFLAGS+= $(FFTW_CFLAGS) -I$(srcdir)/$(srcraw)
geocal_test_all_CPPFLAGS+= $(BLITZ_CFLAGS) $(CARTO_CFLAGS) $(GDAL_CFLAGS) $(HDF5_CFLAGS)
TESTS+= @libgeocal@/test_all.sh
EXTRA_DIST+= @libgeocal@/test_all.sh
# Variables used in testing
export abs_top_srcdir 
export run_test = *
if HAVE_AFIDS_DATA
export AFIDS_VDEV_DATA = $(AFIDS_DATA)/vdev
export ELEV_ROOT = $(AFIDS_DATA)/srtmL2_filled
endif
export AFIDS_COPERNICUS_DEM = @copernicusdem@
export AFIDS_COPERNICUS_LWM = @copernicuslwm@
export VICAR_GDALPLUGIN_HOME
export GDAL_DRIVER_PATH=$(VICAR_GDALPLUGIN_HOME)

if BUILD_VICAR_GDALPLUGIN
EXTRA_geocal_test_all_DEPENDENCIES = install_vicar_gdalplugin_early
endif

#=================================================================
# Normally check builds all the libraries and executables. This
# version builds just what is needed for unit tests, which is faster
# to do during development.

# We use to have this called geocal_check, which is inconsistent with
# the "normal" automake convention of names with a "-" instead of "_".
# So we've changed this. But I'm not sure that there isn't old scripts out
# there depending on the old name, so at least for a while accept both
# names
geocal_check: geocal-check

geocal-check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) geocal-check-am

geocal-check-am: geocal_test_all
	@echo "====================================================="
	@echo "This just builds and runs the geocal unit tests (useful"
	@echo "during development). It does not build the executables"
	@echo "and run the GeoCal unit tests, 'make check' for that."
	@echo "====================================================="
	$(srcdir)/$(libgeocal)/test_all.sh

#=================================================================
# This is needed by unit tests that work with VICAR files. VICAR
# wants to find a PDF file.

BUILT_SOURCES += dummy.pdf test_out/vicar_copy.img 
MOSTLYCLEANFILES = dummy.pdf test_out/vicar_copy.img 

EXTRA_DIST+= @libgeocal@/dummy.pdf

dummy.pdf : @libgeocal@/dummy.pdf
	cp $^ dummy.pdf

test_out/vicar_copy.img : @geocalunittestdata@/vicar.img
	mkdir -p test_out
	cp $^ $@
	chmod +w $@ 

CLEAN_HOOK+= clean_unit_test

clean_unit_test:
	-rm -rf test_out
	-rm -rf pytest_tmp

if WITH_DOCUMENTATION
#=================================================================
# Generate doxygen documentation

EXTRA_DIST+= config/doxygen.cfg
EXTRA_DIST+= config/doc_footer.html
EXTRA_DIST+= README.developer INSTALL
doc/geocal.tag: $(geocalinc_HEADERS) $(libgeocal_la_SOURCES) config/doxygen.cfg $(DOXYGEN_TARGET)
	$(MKDIR_P) doc/geocal
	-rm -f doc/geocal/html/*
	-rm -f doc/geocal/xml/*
	export PATH=$(bindir):$$PATH && \
        export LD_LIBRARY_PATH="$(DESTDIR)$(libdir):${LD_LIBRARY_PATH}" && \
        srcdir=$(srcdir)/@libgeocal@ DOCDIR=doc/geocal $(DOXYGEN) $(srcdir)/config/doxygen.cfg
	cp $(srcdir)/$(geocal_topdir)/README.developer doc/geocal/html
	cp $(srcdir)/$(geocal_topdir)/INSTALL doc/geocal/html

geocaldocdir = ${datarootdir}/doc/geocal
geocaldocsearchdir = ${geocaldocdir}/html/search

INSTALL_DATA_HOOK += install_doxygen_doc

install_doxygen_doc: doc/geocal.tag
	@COPY_DIRECTORY@ doc/geocal/html "$(DESTDIR)$(geocaldocdir)"

UNINSTALL_HOOK+= clean_doxygen_doc

clean_doxygen_doc:
	-rm -rf $(DESTDIR)$(geocaldocdir)

CLEAN_HOOK+= clean_doxygen_generate

clean_doxygen_generate:
	-rm -rf doc/geocal
	-rm -r doc/geocal.tag

#=================================================================
# Upload documentation to github pages
github-pages: doc/geocal.tag
	@echo "Note, this should usually be done from the main branch only"
	cd $(srcdir) && ghp-import $(abs_builddir)/doc/geocal/html -m "Update doxygen documentation"
	@echo "You now need to push the gh-pages branchs to github for these to be visible (git push origin gh-pages)"
endif
