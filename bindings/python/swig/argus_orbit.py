# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _argus_orbit

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _argus_orbit.SWIG_PyInstanceMethod_New
_swig_new_static_method = _argus_orbit.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _argus_orbit.delete_SwigPyIterator
    value = _swig_new_instance_method(_argus_orbit.SwigPyIterator_value)
    incr = _swig_new_instance_method(_argus_orbit.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_argus_orbit.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_argus_orbit.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_argus_orbit.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_argus_orbit.SwigPyIterator_copy)
    next = _swig_new_instance_method(_argus_orbit.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_argus_orbit.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_argus_orbit.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_argus_orbit.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_argus_orbit.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_argus_orbit.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_argus_orbit.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_argus_orbit.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_argus_orbit.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_argus_orbit.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _argus_orbit:
_argus_orbit.SwigPyIterator_swigregister(SwigPyIterator)
SWIG_MODULE_ALREADY_DONE = _argus_orbit.SWIG_MODULE_ALREADY_DONE
SHARED_PTR_DISOWN = _argus_orbit.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.orbit_quaternion_list
import geocal_swig.orbit
import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.with_parameter
import geocal_swig.look_vector
import geocal_swig.aircraft_orbit_data
import geocal_swig.raster_image_tiled_file
import geocal_swig.raster_image_variable
import geocal_swig.raster_image
import geocal_swig.geocal_exception
class ArgusOrbitData(geocal_swig.aircraft_orbit_data.AircraftOrbitData):
    r"""

    This is a single ARGUS navigation file record.

    In addition to the normal things in an OrbitData class, this contains
    some other metadata. This matches what is stored in the ARGUS CSV
    navigation file. The additional information is the file name of the
    JPEG image file collected by the camera and the camera number.

    Note that we don't have access to a direct measurement of the
    velocity. Rather than trying to do some clever estimate of the
    velocity, we just set it to 0.

    C++ includes: argus_orbit.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Tm, File_name, Camera_number, Position, Vel_fixed, Roll, Pitch, Heading):
        r"""

        GeoCal::ArgusOrbitData::ArgusOrbitData(const Time &Tm, const std::string &File_name, int Camera_number,
        const Geodetic &Position, const boost::array< double, 3 > &Vel_fixed,
        double Roll, double Pitch, double Heading)
        Constructor. 
        """
        _argus_orbit.ArgusOrbitData_swiginit(self, _argus_orbit.new_ArgusOrbitData(Tm, File_name, Camera_number, Position, Vel_fixed, Roll, Pitch, Heading))
    save_ortho = _swig_new_instance_method(_argus_orbit.ArgusOrbitData_save_ortho)
    add_ortho_to_image = _swig_new_instance_method(_argus_orbit.ArgusOrbitData_add_ortho_to_image)
    mosaic = _swig_new_static_method(_argus_orbit.ArgusOrbitData_mosaic)
    image = _swig_new_instance_method(_argus_orbit.ArgusOrbitData_image)
    _v_file_name = _swig_new_instance_method(_argus_orbit.ArgusOrbitData__v_file_name)

    @property
    def file_name(self):
        return self._v_file_name()

    _v_camera_number = _swig_new_instance_method(_argus_orbit.ArgusOrbitData__v_camera_number)

    @property
    def camera_number(self):
        return self._v_camera_number()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _argus_orbit.delete_ArgusOrbitData

# Register ArgusOrbitData in _argus_orbit:
_argus_orbit.ArgusOrbitData_swigregister(ArgusOrbitData)
class ArgusOrbit(geocal_swig.orbit_quaternion_list.OrbitQuaternionList):
    r"""

    This read a CSV navigation file and uses it to generate a Orbit.

    We access the data in two ways. The first is the standard time index,
    giving a OrbitData for that time (interpolating if needed). The second
    is by "row" and camera number. All the orbit data for a given row
    were acquired at nearly the same time. A row contains data for 1 or
    more cameras - once the instrument is fully working a row has data for
    cameras 1 through 13. We return a ArgusOrbitData, which in addition to
    having the normal OrbitData stuff has additional metadata information.

    C++ includes: argus_orbit.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Fname):
        r"""

        ArgusOrbit::ArgusOrbit(const std::string &Fname)
        Open the given file and use it to provide Orbit information.

        This file should be a CSV file containing one record per line, with
        the fields "File,Camera,Time,Lat,Lon,Alt,Roll,Pitch,Heading". The
        first line is assumed to be a header, and is discarded. The second
        line is the epoch that the times are measured relative to. 
        """
        _argus_orbit.ArgusOrbit_swiginit(self, _argus_orbit.new_ArgusOrbit(Fname))
    focal_length = _swig_new_instance_method(_argus_orbit.ArgusOrbit_focal_length)
    _v_number_row = _swig_new_instance_method(_argus_orbit.ArgusOrbit__v_number_row)

    @property
    def number_row(self):
        return self._v_number_row()

    nav = _swig_new_instance_method(_argus_orbit.ArgusOrbit_nav)
    _v_file_name = _swig_new_instance_method(_argus_orbit.ArgusOrbit__v_file_name)

    @property
    def file_name(self):
        return self._v_file_name()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _argus_orbit.delete_ArgusOrbit

# Register ArgusOrbit in _argus_orbit:
_argus_orbit.ArgusOrbit_swigregister(ArgusOrbit)
class Vector_ArgusOrbitData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData___nonzero__)
    __bool__ = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData___bool__)
    __len__ = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData___len__)
    __getslice__ = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData___getslice__)
    __setslice__ = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData___setslice__)
    __delslice__ = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData___delslice__)
    __delitem__ = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData___delitem__)
    __getitem__ = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData___getitem__)
    __setitem__ = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData___setitem__)
    pop = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_pop)
    append = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_append)
    empty = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_empty)
    size = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_size)
    swap = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_swap)
    begin = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_begin)
    end = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_end)
    rbegin = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_rbegin)
    rend = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_rend)
    clear = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_clear)
    get_allocator = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_get_allocator)
    pop_back = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_pop_back)
    erase = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_erase)

    def __init__(self, *args):
        _argus_orbit.Vector_ArgusOrbitData_swiginit(self, _argus_orbit.new_Vector_ArgusOrbitData(*args))
    push_back = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_push_back)
    front = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_front)
    back = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_back)
    assign = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_assign)
    resize = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_resize)
    insert = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_insert)
    reserve = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_reserve)
    capacity = _swig_new_instance_method(_argus_orbit.Vector_ArgusOrbitData_capacity)
    __swig_destroy__ = _argus_orbit.delete_Vector_ArgusOrbitData

# Register Vector_ArgusOrbitData in _argus_orbit:
_argus_orbit.Vector_ArgusOrbitData_swigregister(Vector_ArgusOrbitData)

__all__ = ["ArgusOrbitData","ArgusOrbit","Vector_ArgusOrbitData"]


