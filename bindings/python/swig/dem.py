# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _dem.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dem', [dirname(__file__)])
        except ImportError:
            import _dem
            return _dem
        if fp is not None:
            try:
                _mod = imp.load_module('_dem', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _dem = swig_import_helper()
    del swig_import_helper
else:
    import _dem
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dem.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_dem.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_dem.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_dem.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_dem.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_dem.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_dem.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_dem.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_dem.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_dem.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_dem.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_dem.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_dem.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_dem.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_dem.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_dem.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_dem.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _dem.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_dem.SHARED_PTR_DISOWN_swigconstant(_dem)
SHARED_PTR_DISOWN = _dem.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
class Dem(geocal_swig.generic_object.GenericObject):
    """

    This class gives an interface to a digital elevation model (DEM).

    C++ includes: dem.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def distance_to_surface(self, Gp):
        """

        virtual double GeoCal::Dem::distance_to_surface(const GroundCoordinate &Gp) const =0
        Return distance to surface directly above/below the given point.

        Distance is in meters. Positive means Gp is above the surface,
        negative means below. 
        """
        return _dem.Dem_distance_to_surface(self, Gp)


    def height_reference_surface(self, Gp):
        """

        virtual double GeoCal::Dem::height_reference_surface(const GroundCoordinate &Gp) const =0
        Return height of surface above/below the reference surface (e.g.,
        WGS-84 for the earth).

        Positive means above, negative below. This is in meters. 
        """
        return _dem.Dem_height_reference_surface(self, Gp)


    def intersect(self, Cf, Lv, Resolution, Max_height=9000):
        """

        boost::shared_ptr< CartesianFixed > Dem::intersect(const CartesianFixed &Cf, const CartesianFixedLookVector &Lv, double
        Resolution, double Max_height=9000) const
        Determine the intersection along a look vector from a starting
        position with the Dem (e.g., what point on the ground does a satellite
        see).

        This is brute force, so it won't mistakenly pick a plain behind a
        mountain.

        Resolution is the desired resolution in meters. Max_height is the
        maximum height we will encounter in the Dem - the default of 9 km is
        higher than the highest point in the world. 
        """
        return _dem.Dem_intersect(self, Cf, Lv, Resolution, Max_height)


    def intersect_start_length(self, Cf, Lv, Resolution, Start_length):
        """

        boost::shared_ptr< CartesianFixed > Dem::intersect_start_length(const CartesianFixed &Cf, const CartesianFixedLookVector &Lv, double
        Resolution, double Start_length) const
        Determine the intersection along a look vector from a starting
        position with the Dem (e.g., what point on the ground does a satellite
        see).

        Resolution is the desired resolution in meters.

        The starting length along the look vector is given. This might come
        from ray casting code, or it might come from the intersect function of
        this class. 
        """
        return _dem.Dem_intersect_start_length(self, Cf, Lv, Resolution, Start_length)


    def surface_point(self, Gp):
        """

        virtual boost::shared_ptr<GroundCoordinate> GeoCal::Dem::surface_point(const GroundCoordinate &Gp) const =0
        Return a GroundCoordinate on the surface directly above or below the
        given point. 
        """
        return _dem.Dem_surface_point(self, Gp)

    __swig_destroy__ = _dem.delete_Dem
Dem.distance_to_surface = new_instancemethod(_dem.Dem_distance_to_surface, None, Dem)
Dem.height_reference_surface = new_instancemethod(_dem.Dem_height_reference_surface, None, Dem)
Dem.intersect = new_instancemethod(_dem.Dem_intersect, None, Dem)
Dem.intersect_start_length = new_instancemethod(_dem.Dem_intersect_start_length, None, Dem)
Dem.surface_point = new_instancemethod(_dem.Dem_surface_point, None, Dem)
Dem.__str__ = new_instancemethod(_dem.Dem___str__, None, Dem)
Dem_swigregister = _dem.Dem_swigregister
Dem_swigregister(Dem)


__all__ = ["Dem"]



