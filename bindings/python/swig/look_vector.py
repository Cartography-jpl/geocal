# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _look_vector

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _look_vector.SWIG_PyInstanceMethod_New
_swig_new_static_method = _look_vector.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _look_vector.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _look_vector.delete_SwigPyIterator
    value = _swig_new_instance_method(_look_vector.SwigPyIterator_value)
    incr = _swig_new_instance_method(_look_vector.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_look_vector.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_look_vector.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_look_vector.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_look_vector.SwigPyIterator_copy)
    next = _swig_new_instance_method(_look_vector.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_look_vector.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_look_vector.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_look_vector.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_look_vector.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_look_vector.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_look_vector.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_look_vector.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_look_vector.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_look_vector.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _look_vector:
_look_vector.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _look_vector.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
class Vector_Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_look_vector.Vector_Time_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_look_vector.Vector_Time___nonzero__)
    __bool__ = _swig_new_instance_method(_look_vector.Vector_Time___bool__)
    __len__ = _swig_new_instance_method(_look_vector.Vector_Time___len__)
    __getslice__ = _swig_new_instance_method(_look_vector.Vector_Time___getslice__)
    __setslice__ = _swig_new_instance_method(_look_vector.Vector_Time___setslice__)
    __delslice__ = _swig_new_instance_method(_look_vector.Vector_Time___delslice__)
    __delitem__ = _swig_new_instance_method(_look_vector.Vector_Time___delitem__)
    __getitem__ = _swig_new_instance_method(_look_vector.Vector_Time___getitem__)
    __setitem__ = _swig_new_instance_method(_look_vector.Vector_Time___setitem__)
    pop = _swig_new_instance_method(_look_vector.Vector_Time_pop)
    append = _swig_new_instance_method(_look_vector.Vector_Time_append)
    empty = _swig_new_instance_method(_look_vector.Vector_Time_empty)
    size = _swig_new_instance_method(_look_vector.Vector_Time_size)
    swap = _swig_new_instance_method(_look_vector.Vector_Time_swap)
    begin = _swig_new_instance_method(_look_vector.Vector_Time_begin)
    end = _swig_new_instance_method(_look_vector.Vector_Time_end)
    rbegin = _swig_new_instance_method(_look_vector.Vector_Time_rbegin)
    rend = _swig_new_instance_method(_look_vector.Vector_Time_rend)
    clear = _swig_new_instance_method(_look_vector.Vector_Time_clear)
    get_allocator = _swig_new_instance_method(_look_vector.Vector_Time_get_allocator)
    pop_back = _swig_new_instance_method(_look_vector.Vector_Time_pop_back)
    erase = _swig_new_instance_method(_look_vector.Vector_Time_erase)

    def __init__(self, *args):
        _look_vector.Vector_Time_swiginit(self, _look_vector.new_Vector_Time(*args))
    push_back = _swig_new_instance_method(_look_vector.Vector_Time_push_back)
    front = _swig_new_instance_method(_look_vector.Vector_Time_front)
    back = _swig_new_instance_method(_look_vector.Vector_Time_back)
    assign = _swig_new_instance_method(_look_vector.Vector_Time_assign)
    resize = _swig_new_instance_method(_look_vector.Vector_Time_resize)
    insert = _swig_new_instance_method(_look_vector.Vector_Time_insert)
    reserve = _swig_new_instance_method(_look_vector.Vector_Time_reserve)
    capacity = _swig_new_instance_method(_look_vector.Vector_Time_capacity)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _look_vector.delete_Vector_Time

# Register Vector_Time in _look_vector:
_look_vector.Vector_Time_swigregister(Vector_Time)
class Vector_Time2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_look_vector.Vector_Time2_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_look_vector.Vector_Time2___nonzero__)
    __bool__ = _swig_new_instance_method(_look_vector.Vector_Time2___bool__)
    __len__ = _swig_new_instance_method(_look_vector.Vector_Time2___len__)
    __getslice__ = _swig_new_instance_method(_look_vector.Vector_Time2___getslice__)
    __setslice__ = _swig_new_instance_method(_look_vector.Vector_Time2___setslice__)
    __delslice__ = _swig_new_instance_method(_look_vector.Vector_Time2___delslice__)
    __delitem__ = _swig_new_instance_method(_look_vector.Vector_Time2___delitem__)
    __getitem__ = _swig_new_instance_method(_look_vector.Vector_Time2___getitem__)
    __setitem__ = _swig_new_instance_method(_look_vector.Vector_Time2___setitem__)
    pop = _swig_new_instance_method(_look_vector.Vector_Time2_pop)
    append = _swig_new_instance_method(_look_vector.Vector_Time2_append)
    empty = _swig_new_instance_method(_look_vector.Vector_Time2_empty)
    size = _swig_new_instance_method(_look_vector.Vector_Time2_size)
    swap = _swig_new_instance_method(_look_vector.Vector_Time2_swap)
    begin = _swig_new_instance_method(_look_vector.Vector_Time2_begin)
    end = _swig_new_instance_method(_look_vector.Vector_Time2_end)
    rbegin = _swig_new_instance_method(_look_vector.Vector_Time2_rbegin)
    rend = _swig_new_instance_method(_look_vector.Vector_Time2_rend)
    clear = _swig_new_instance_method(_look_vector.Vector_Time2_clear)
    get_allocator = _swig_new_instance_method(_look_vector.Vector_Time2_get_allocator)
    pop_back = _swig_new_instance_method(_look_vector.Vector_Time2_pop_back)
    erase = _swig_new_instance_method(_look_vector.Vector_Time2_erase)

    def __init__(self, *args):
        _look_vector.Vector_Time2_swiginit(self, _look_vector.new_Vector_Time2(*args))
    push_back = _swig_new_instance_method(_look_vector.Vector_Time2_push_back)
    front = _swig_new_instance_method(_look_vector.Vector_Time2_front)
    back = _swig_new_instance_method(_look_vector.Vector_Time2_back)
    assign = _swig_new_instance_method(_look_vector.Vector_Time2_assign)
    resize = _swig_new_instance_method(_look_vector.Vector_Time2_resize)
    insert = _swig_new_instance_method(_look_vector.Vector_Time2_insert)
    reserve = _swig_new_instance_method(_look_vector.Vector_Time2_reserve)
    capacity = _swig_new_instance_method(_look_vector.Vector_Time2_capacity)
    __swig_destroy__ = _look_vector.delete_Vector_Time2

# Register Vector_Time2 in _look_vector:
_look_vector.Vector_Time2_swigregister(Vector_Time2)
class LookVectorDouble(geocal_swig.generic_object.GenericObject):
    r"""

    This is a look vector in an unspecified coordinate system.

    Derived classes specify the coordinate system.

    C++ includes: look_vector.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    _v_look_vector = _swig_new_instance_method(_look_vector.LookVectorDouble__v_look_vector)

    @property
    def look_vector(self):
        return self._v_look_vector()

    @look_vector.setter
    def look_vector(self, value):
      self._v_look_vector(value)

    _v_direction = _swig_new_instance_method(_look_vector.LookVectorDouble__v_direction)

    @property
    def direction(self):
        return self._v_direction()

    _v_look_quaternion = _swig_new_instance_method(_look_vector.LookVectorDouble__v_look_quaternion)

    @property
    def look_quaternion(self):
        return self._v_look_quaternion()

    @look_quaternion.setter
    def look_quaternion(self, value):
      self._v_look_quaternion(value)

    _v_length = _swig_new_instance_method(_look_vector.LookVectorDouble__v_length)

    @property
    def length(self):
        return self._v_length()

    __str__ = _swig_new_instance_method(_look_vector.LookVectorDouble___str__)
    __swig_destroy__ = _look_vector.delete_LookVectorDouble

# Register LookVectorDouble in _look_vector:
_look_vector.LookVectorDouble_swigregister(LookVectorDouble)
class LookVectorAutoDerivativeDouble(geocal_swig.generic_object.GenericObject):
    r"""

    This is a look vector in an unspecified coordinate system.

    Derived classes specify the coordinate system.

    C++ includes: look_vector.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    _v_look_vector = _swig_new_instance_method(_look_vector.LookVectorAutoDerivativeDouble__v_look_vector)

    @property
    def look_vector(self):
        return self._v_look_vector()

    @look_vector.setter
    def look_vector(self, value):
      self._v_look_vector(value)

    _v_direction = _swig_new_instance_method(_look_vector.LookVectorAutoDerivativeDouble__v_direction)

    @property
    def direction(self):
        return self._v_direction()

    _v_look_quaternion = _swig_new_instance_method(_look_vector.LookVectorAutoDerivativeDouble__v_look_quaternion)

    @property
    def look_quaternion(self):
        return self._v_look_quaternion()

    @look_quaternion.setter
    def look_quaternion(self, value):
      self._v_look_quaternion(value)

    _v_length = _swig_new_instance_method(_look_vector.LookVectorAutoDerivativeDouble__v_length)

    @property
    def length(self):
        return self._v_length()

    __str__ = _swig_new_instance_method(_look_vector.LookVectorAutoDerivativeDouble___str__)
    __swig_destroy__ = _look_vector.delete_LookVectorAutoDerivativeDouble

# Register LookVectorAutoDerivativeDouble in _look_vector:
_look_vector.LookVectorAutoDerivativeDouble_swigregister(LookVectorAutoDerivativeDouble)
class ScLookVector(LookVectorDouble):
    r"""

    This is a look vector in an spacecraft coordinates.

    Note that there are different conventions used for the ScLookVector,
    you generally need to know what the convention used by the OrbitData
    is.

    The original MISR convention used +z in the down direction, +x in the
    generally velocity (along track) direction, and +y finished the right
    hand coordinate system.

    Another convention used (by for example sc2rpc) is +x goes in the
    sample direction, +y goes in the line direction, and +z points down.

    C++ includes: look_vector.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::ScLookVector::ScLookVector(double x, double y, double z)
        GeoCal::ScLookVector::ScLookVector
        Constructor.

        """
        _look_vector.ScLookVector_swiginit(self, _look_vector.new_ScLookVector(*args))
    __str__ = _swig_new_instance_method(_look_vector.ScLookVector___str__)
    field_angle = _swig_new_instance_method(_look_vector.ScLookVector_field_angle)
    create_from_field_angle = _swig_new_static_method(_look_vector.ScLookVector_create_from_field_angle)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _look_vector.delete_ScLookVector

# Register ScLookVector in _look_vector:
_look_vector.ScLookVector_swigregister(ScLookVector)
class ScLookVectorWithDerivative(LookVectorAutoDerivativeDouble):
    r"""

    This is a look vector in an spacecraft coordinates, including
    derivatives.

    C++ includes: look_vector.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::ScLookVectorWithDerivative::ScLookVectorWithDerivative(const ScLookVector &Slv)
        GeoCal::ScLookVectorWithDerivative::ScLookVectorWithDerivative
        """
        _look_vector.ScLookVectorWithDerivative_swiginit(self, _look_vector.new_ScLookVectorWithDerivative(*args))
    __str__ = _swig_new_instance_method(_look_vector.ScLookVectorWithDerivative___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _look_vector.delete_ScLookVectorWithDerivative

# Register ScLookVectorWithDerivative in _look_vector:
_look_vector.ScLookVectorWithDerivative_swigregister(ScLookVectorWithDerivative)
class CartesianInertialLookVector(LookVectorDouble):
    r"""

    This is a look vector in CartesianInertial coordinates.

    C++ includes: look_vector.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::CartesianInertialLookVector::CartesianInertialLookVector(double x, double y, double z)
        GeoCal::CartesianInertialLookVector::CartesianInertialLookVector
        Constructor.

        """
        _look_vector.CartesianInertialLookVector_swiginit(self, _look_vector.new_CartesianInertialLookVector(*args))
    __str__ = _swig_new_instance_method(_look_vector.CartesianInertialLookVector___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _look_vector.delete_CartesianInertialLookVector

# Register CartesianInertialLookVector in _look_vector:
_look_vector.CartesianInertialLookVector_swigregister(CartesianInertialLookVector)
class CartesianInertialLookVectorWithDerivative(LookVectorAutoDerivativeDouble):
    r"""

    This is a look vector in CartesianInertial coordinates.

    C++ includes: look_vector.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::CartesianInertialLookVectorWithDerivative::CartesianInertialLookVectorWithDerivative(const boost::math::quaternion< AutoDerivative< double > > &V)
        GeoCal::CartesianInertialLookVectorWithDerivative::CartesianInertialLo
        okVectorWithDerivative
        Constructor using quaternion.

        """
        _look_vector.CartesianInertialLookVectorWithDerivative_swiginit(self, _look_vector.new_CartesianInertialLookVectorWithDerivative(*args))
    __str__ = _swig_new_instance_method(_look_vector.CartesianInertialLookVectorWithDerivative___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _look_vector.delete_CartesianInertialLookVectorWithDerivative

# Register CartesianInertialLookVectorWithDerivative in _look_vector:
_look_vector.CartesianInertialLookVectorWithDerivative_swigregister(CartesianInertialLookVectorWithDerivative)
class DcsLookVector(LookVectorDouble):
    r"""

    This is a look vector in Detector Coordinate System coordinates.

    C++ includes: look_vector.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::DcsLookVector::DcsLookVector(double x, double y, double z)
        GeoCal::DcsLookVector::DcsLookVector
        Constructor.

        """
        _look_vector.DcsLookVector_swiginit(self, _look_vector.new_DcsLookVector(*args))
    __str__ = _swig_new_instance_method(_look_vector.DcsLookVector___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _look_vector.delete_DcsLookVector

# Register DcsLookVector in _look_vector:
_look_vector.DcsLookVector_swigregister(DcsLookVector)
class DcsLookVectorWithDerivative(LookVectorAutoDerivativeDouble):
    r"""

    This is a look vector in Detector Coordinate System coordinates,
    including derivatives.

    C++ includes: look_vector.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::DcsLookVectorWithDerivative::DcsLookVectorWithDerivative(const boost::math::quaternion< AutoDerivative< double > > &V)
        GeoCal::DcsLookVectorWithDerivative::DcsLookVectorWithDerivative
        Constructor using quaternion.

        """
        _look_vector.DcsLookVectorWithDerivative_swiginit(self, _look_vector.new_DcsLookVectorWithDerivative(*args))
    __str__ = _swig_new_instance_method(_look_vector.DcsLookVectorWithDerivative___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _look_vector.delete_DcsLookVectorWithDerivative

# Register DcsLookVectorWithDerivative in _look_vector:
_look_vector.DcsLookVectorWithDerivative_swigregister(DcsLookVectorWithDerivative)
class CartesianFixedLookVectorWithDerivative(LookVectorAutoDerivativeDouble):
    r"""

    This is a look vector in CartesianFixed coordinates.

    C++ includes: look_vector.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::CartesianFixedLookVectorWithDerivative::CartesianFixedLookVectorWithDerivative(const boost::math::quaternion< AutoDerivative< double > > &V)
        GeoCal::CartesianFixedLookVectorWithDerivative::CartesianFixedLookVect
        orWithDerivative
        Constructor using quaternion.

        """
        _look_vector.CartesianFixedLookVectorWithDerivative_swiginit(self, _look_vector.new_CartesianFixedLookVectorWithDerivative(*args))
    __str__ = _swig_new_instance_method(_look_vector.CartesianFixedLookVectorWithDerivative___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _look_vector.delete_CartesianFixedLookVectorWithDerivative

# Register CartesianFixedLookVectorWithDerivative in _look_vector:
_look_vector.CartesianFixedLookVectorWithDerivative_swigregister(CartesianFixedLookVectorWithDerivative)

__all__ = ["ScLookVector","ScLookVectorWithDerivative","CartesianInertialLookVector","CartesianInertialLookVectorWithDerivative","DcsLookVector","DcsLookVectorWithDerivative","CartesianFixedLookVectorWithDerivative"]


