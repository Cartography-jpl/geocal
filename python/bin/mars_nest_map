#! /usr/bin/env python
#
# This takes a unprojected PDS file, imports it to VICAR, and adds a
# RPC.

from geocal import *
import subprocess

version = "May 16, 2017"
usage='''Usage:
  mars_nest_map [options] <pds_image> <output_base_name>
  mars_nest_map -h | --help
  mars_nest_map -v | --version

This takes an unprojected PDS image, imports it to VICAR, and adds
a RPC.

*** Note *** The RPC generated has fairly large errors vs. the rigorous
model, on the order of 3 pixels for CTX data. This is because an RPC just
doesn't capture a push broom camera super well. We will need to implement a
more generate RSM instead. Also, we are not currently correcting the RPC at
all, this is based entirely on the ephemeris/attitude knowldege.

Also not clear what to do with masked pixels. Right now, we are just passing
this on.

We are also not currently including camera nonlinearities, this is just
something we will add in a bit.

Example:
   ./mars_nest_map --mapped-image=/data/smyth/MarsTest/MawrthVallis/ctx1_full_6m.img /raid26/tllogan/mars/mawrth_vallis/source/unmapped/P16_007388_2049_XI_24N020W.IMG ctx1
    write_image --number-process=20 --verbose --process-number-line=1000 --process-number-sample=1000 ctx1_igc_proj.xml ctx1_proj.img

Options:
  -h --help         
       Print this message

  --mapped-image=f
       Supply a mapped image we would like to compare against. We create
       a base_name_igc_projected.xml file that can then be translated to
       an image using write_image program.

  --spice-kernel-dir=f
       Give the directory to find the mars kernels. The default is
       os.environ["AFIDS_DATA"] + "/mars_kernel/mro_kernel", but this
       can be overridden

  -v --version      
       Print program version
'''

# Mapping between long name and shorter vicar name
long_name_to_vicar = { "pds_image" : "pdsimg",
                       "output_base_name" : "outbase",
                       "mapped_image" : "mapimg",
                       "spice_kernel_dir": "skerdir",
                       }
args = docopt_simple(usage, version=version,
                     long_name_to_vicar=long_name_to_vicar)
                     

def igc_for_context(lbl, fname):
    '''Process for context camera'''
    tstart = Time.parse_time(lbl["START_TIME"])
    tend = Time.parse_time(lbl["STOP_TIME"])
    if(args.spice_kernel_dir):
        bdir = args.spice_kernel_dir + "/"
    else:
        bdir = os.environ["AFIDS_DATA"] + "/mars_kernel/mro_kernel/"
    kdat = read_shelve(bdir + "kernel.json")
    # We need better logic here, but for now just set up the kernels we
    # handed
    klist = [bdir + "mro.ker",
             kdat["ck_kernel"].kernel(tstart),
             kdat["spk_kernel"].kernel(tend)]
    klist = [os.path.abspath(i) for i in klist]
    orb = SpicePlanetOrbit("MRO", "MRO_CTX", klist,
                           PlanetConstant.MARS_NAIF_CODE)
    img = GdalRasterImage(fname)
    focal_length = 350
    pitch = 7e-3
    left_masked = 38
    right_masked = 18
    # Ignore nonlinearities for now, and assume boresight is middle of active
    # pixels
    ctx_cam = QuaternionCamera(Quaternion_double(1,0,0,0), 1, img.number_sample,
                               pitch, pitch, focal_length, 
                               FrameCoordinate(0, 2500+left_masked))
    tt = ConstantSpacingTimeTable(tstart, tend,
                                  (tend- tstart) / (img.number_line-1))
    dem = PlanetSimpleDem(PlanetConstant.MARS_NAIF_CODE)
    orb_cache = OrbitListCache(orb, tt)
    ipi = Ipi(orb_cache, ctx_cam, 0, tstart, tend, tt)
    igc = IpiImageGroundConnection(ipi, dem, img)
    # Chop off masked pixels for map projecting
    igc_sub = OffsetImageGroundConnection(igc, 0, 38, igc.number_line, 5000)
    return igc, igc_sub

# Determine the image type
lbl = pds_label(args.pds_image)
if(lbl['INSTRUMENT_NAME'] == 'CONTEXT CAMERA'):
    igc, igc_sub = igc_for_context(lbl,args.pds_image)
else:
    raise RuntimeError("Not a recognized instrument name %s" %
                       lbl['INSTRUMENT_NAME'])

# For right now, output the igc so we have record of it
write_shelve(args.output_base_name + "_igc.xml", igc)
if(args.mapped_image):
    img_proj = GdalRasterImage(args.mapped_image)
    igc_proj = IgcMapProjected(img_proj.map_info, igc_sub, 10, -1, False,
                               1000,1000)
    write_shelve(args.output_base_name + "_igc_proj.xml", igc_proj)
    
# Write out the PDS label, in case there is something we need from it
with open(args.output_base_name + ".lbl", "wb") as fh:
    fh.write(pds_label_text(args.pds_image))
subprocess.run(["gdal_translate", "-of", "VRT", "-q", args.pds_image,
                args.output_base_name + ".vrt"], check=True)
fvrt = GdalRasterImage(args.output_base_name + ".vrt")
fvrt.set_rpc(Rpc.generate_rpc(igc, 0, 1000))
fvrt.close()
subprocess.run(["gdal_translate", "-of", "VICAR", 
                args.output_base_name + ".vrt",
                args.output_base_name + ".img"], check=True)
os.remove(args.output_base_name + ".vrt")


