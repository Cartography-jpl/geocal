# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _orbit_des

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _orbit_des.SWIG_PyInstanceMethod_New
_swig_new_static_method = _orbit_des.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _orbit_des.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _orbit_des.delete_SwigPyIterator
    value = _swig_new_instance_method(_orbit_des.SwigPyIterator_value)
    incr = _swig_new_instance_method(_orbit_des.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_orbit_des.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_orbit_des.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_orbit_des.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_orbit_des.SwigPyIterator_copy)
    next = _swig_new_instance_method(_orbit_des.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_orbit_des.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_orbit_des.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_orbit_des.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_orbit_des.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_orbit_des.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_orbit_des.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_orbit_des.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_orbit_des.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_orbit_des.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _orbit_des:
_orbit_des.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _orbit_des.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.orbit
import geocal_swig.observer
import geocal_swig.with_parameter
import geocal_swig.look_vector
class PosCsephb(geocal_swig.generic_object.GenericObject):
    r"""

    This handles position reading, writing, and interpolation.

    This uses the NITF DES CSEPHB (See the SNIP documentation).

    Note that this class doesn't read and write the full DES, only the
    data portion. It works with the python code found in
    geocal_des_extension.py.

    The CSEPHB DES doens't contain velocity. We calculate the velocity
    from the positions.

    Note that the the CSEPHB data is like a NITF TRE. But because it is a
    DES, it is potentially much larger. For efficiency, we read and write
    the data as istream and ostream rather than return strings as we
    typically do for TREs. On the python side, this can be mapped from a
    io object like FileHandle or BytesIO.

    C++ includes: orbit_des.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    EPHEMERIS_QUALITY_SUSPECT = _orbit_des.PosCsephb_EPHEMERIS_QUALITY_SUSPECT
    EPHEMERIS_QUALITY_GOOD = _orbit_des.PosCsephb_EPHEMERIS_QUALITY_GOOD
    NEAREST_NEIGHBOR = _orbit_des.PosCsephb_NEAREST_NEIGHBOR
    LINEAR = _orbit_des.PosCsephb_LINEAR
    LAGRANGE = _orbit_des.PosCsephb_LAGRANGE
    NO_LAGRANGE = _orbit_des.PosCsephb_NO_LAGRANGE
    LAGRANGE_1 = _orbit_des.PosCsephb_LAGRANGE_1
    LAGRANGE_3 = _orbit_des.PosCsephb_LAGRANGE_3
    LAGRANGE_5 = _orbit_des.PosCsephb_LAGRANGE_5
    LAGRANGE_7 = _orbit_des.PosCsephb_LAGRANGE_7
    SAME_AS_ORBIT = _orbit_des.PosCsephb_SAME_AS_ORBIT
    CARTESIAN_FIXED = _orbit_des.PosCsephb_CARTESIAN_FIXED
    CARTESIAN_INERTIAL = _orbit_des.PosCsephb_CARTESIAN_INERTIAL
    PREDICTED = _orbit_des.PosCsephb_PREDICTED
    ACTUAL = _orbit_des.PosCsephb_ACTUAL
    REFINED = _orbit_des.PosCsephb_REFINED

    def __init__(self, *args):
        r"""

        PosCsephb::PosCsephb(const Orbit &Orb, double Tstep, InterpolationType Itype=LINEAR,
        LagrangeOrder Lagrange_order=NO_LAGRANGE, EphemerisDataQuality
        E_quality=EPHEMERIS_QUALITY_GOOD, EphemerisSource E_source=ACTUAL,
        PositionType P_type=SAME_AS_ORBIT)
        GeoCal::PosCsephb::PosCsephb
        Constructor.
        We sample the position of the given Orbit at fixed spaces times. This
        version goes from the min_time() of the Orbit, up to max_time() (or
        more accurately, the largest time min_time() i * Tstep that is <=
        max_time()). 
        """
        _orbit_des.PosCsephb_swiginit(self, _orbit_des.new_PosCsephb(*args))
    pos_vel = _swig_new_instance_method(_orbit_des.PosCsephb_pos_vel)
    _v_is_cf = _swig_new_instance_method(_orbit_des.PosCsephb__v_is_cf)

    @property
    def is_cf(self):
        return self._v_is_cf()

    _v_min_time = _swig_new_instance_method(_orbit_des.PosCsephb__v_min_time)

    @property
    def min_time(self):
        return self._v_min_time()

    _v_max_time = _swig_new_instance_method(_orbit_des.PosCsephb__v_max_time)

    @property
    def max_time(self):
        return self._v_max_time()

    _v_time_step = _swig_new_instance_method(_orbit_des.PosCsephb__v_time_step)

    @property
    def time_step(self):
        return self._v_time_step()

    _v_interpolation_type = _swig_new_instance_method(_orbit_des.PosCsephb__v_interpolation_type)

    @property
    def interpolation_type(self):
        return self._v_interpolation_type()

    @interpolation_type.setter
    def interpolation_type(self, value):
      self._v_interpolation_type(value)

    _v_ephemeris_data_quality = _swig_new_instance_method(_orbit_des.PosCsephb__v_ephemeris_data_quality)

    @property
    def ephemeris_data_quality(self):
        return self._v_ephemeris_data_quality()

    @ephemeris_data_quality.setter
    def ephemeris_data_quality(self, value):
      self._v_ephemeris_data_quality(value)

    _v_ephemeris_source = _swig_new_instance_method(_orbit_des.PosCsephb__v_ephemeris_source)

    @property
    def ephemeris_source(self):
        return self._v_ephemeris_source()

    @ephemeris_source.setter
    def ephemeris_source(self, value):
      self._v_ephemeris_source(value)

    _v_lagrange_order = _swig_new_instance_method(_orbit_des.PosCsephb__v_lagrange_order)

    @property
    def lagrange_order(self):
        return self._v_lagrange_order()

    @lagrange_order.setter
    def lagrange_order(self, value):
      self._v_lagrange_order(value)

    _v_id = _swig_new_instance_method(_orbit_des.PosCsephb__v_id)

    @property
    def id(self):
        return self._v_id()

    @id.setter
    def id(self, value):
      self._v_id(value)

    _v_position_data = _swig_new_instance_method(_orbit_des.PosCsephb__v_position_data)

    @property
    def position_data(self):
        return self._v_position_data()

    min_time_split = _swig_new_instance_method(_orbit_des.PosCsephb_min_time_split)

    @property
    def qual_flag_eph(self):
        return self.ephemeris_data_quality

    @property
    def interp_type_eph(self):
        return self.interpolation_type

    @property
    def interp_order_eph(self):
        return self.lagrange_order

    @property
    def ephem_flag(self):  
        return self.ephemeris_source

    @property
    def eci_ecf_ephem(self):
        return (1 if self.is_cf else 0)

    @property
    def dt_ephem(self):
        return self.time_step

    @property
    def date_ephem(self):
        return int(self.min_time_split()[0])

    @property
    def t0_ephem(self):
        return float(self.min_time_split()[1])

    @property
    def reserved_len(self):
        return 0

    @property
    def num_ephem(self):
        return self.position_data.shape[0]

    @property
    def ephem_x(self):
        return self.position_data[:,0]

    @property
    def ephem_y(self):
        return self.position_data[:,1]

    @property
    def ephem_z(self):
        return self.position_data[:,2]

    des_write = _swig_new_instance_method(_orbit_des.PosCsephb_des_write)
    des_read = _swig_new_static_method(_orbit_des.PosCsephb_des_read)
    __str__ = _swig_new_instance_method(_orbit_des.PosCsephb___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _orbit_des.delete_PosCsephb

# Register PosCsephb in _orbit_des:
_orbit_des.PosCsephb_swigregister(PosCsephb)
class AttCsattb(geocal_swig.generic_object.GenericObject):
    r"""

    This handles attitude reading, writing, and interpolation.

    This uses the NITF DES CSEATTB (See the SNIP documentation).

    Note that this class doesn't read and write the full DES, only the
    data portion. It works with the python code found in
    geocal_des_extension.py.

    Note that the the CSATTB data is like a NITF TRE. But because it is a
    DES, it is potentially much larger. For efficiency, we read and write
    the data as istream and ostream rather than return strings as we
    typically do for TREs. On the python side, this can be mapped from a
    io object like FileHandle or BytesIO.

    Note that NITF has different convention for quaternions than we use
    internally with OrbitData. We use the functions nitf_to_quaternion and
    quaternion_to_nitf to map back and forth, look at the documentation of
    those functions to see what the mapping does.

    C++ includes: orbit_des.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ATTITUDE_QUALITY_SUSPECT = _orbit_des.AttCsattb_ATTITUDE_QUALITY_SUSPECT
    ATTITUDE_QUALITY_GOOD = _orbit_des.AttCsattb_ATTITUDE_QUALITY_GOOD
    NEAREST_NEIGHBOR = _orbit_des.AttCsattb_NEAREST_NEIGHBOR
    LINEAR = _orbit_des.AttCsattb_LINEAR
    LAGRANGE = _orbit_des.AttCsattb_LAGRANGE
    NO_LAGRANGE = _orbit_des.AttCsattb_NO_LAGRANGE
    LAGRANGE_1 = _orbit_des.AttCsattb_LAGRANGE_1
    LAGRANGE_3 = _orbit_des.AttCsattb_LAGRANGE_3
    LAGRANGE_5 = _orbit_des.AttCsattb_LAGRANGE_5
    LAGRANGE_7 = _orbit_des.AttCsattb_LAGRANGE_7
    SAME_AS_ORBIT = _orbit_des.AttCsattb_SAME_AS_ORBIT
    CARTESIAN_FIXED = _orbit_des.AttCsattb_CARTESIAN_FIXED
    CARTESIAN_INERTIAL = _orbit_des.AttCsattb_CARTESIAN_INERTIAL
    PREDICTED = _orbit_des.AttCsattb_PREDICTED
    ACTUAL = _orbit_des.AttCsattb_ACTUAL
    REFINED = _orbit_des.AttCsattb_REFINED

    def __init__(self, *args):
        r"""

        AttCsattb::AttCsattb(const Orbit &Orb, double Tstep, InterpolationType Itype=LINEAR,
        LagrangeOrder Lagrange_order=NO_LAGRANGE, AttitudeDataQuality
        A_quality=ATTITUDE_QUALITY_GOOD, AttitudeSource A_source=ACTUAL,
        AttitudeType A_type=SAME_AS_ORBIT)
        GeoCal::AttCsattb::AttCsattb
        Constructor.
        We sample the attitude of the given Orbit at fixed spaces times. This
        version goes from the min_time() of the Orbit, up to max_time() (or
        more accurately, the largest time min_time() i * Tstep that is <=
        max_time()). 
        """
        _orbit_des.AttCsattb_swiginit(self, _orbit_des.new_AttCsattb(*args))
    _v_id = _swig_new_instance_method(_orbit_des.AttCsattb__v_id)

    @property
    def id(self):
        return self._v_id()

    @id.setter
    def id(self, value):
      self._v_id(value)

    _v_is_cf = _swig_new_instance_method(_orbit_des.AttCsattb__v_is_cf)

    @property
    def is_cf(self):
        return self._v_is_cf()

    _v_min_time = _swig_new_instance_method(_orbit_des.AttCsattb__v_min_time)

    @property
    def min_time(self):
        return self._v_min_time()

    _v_max_time = _swig_new_instance_method(_orbit_des.AttCsattb__v_max_time)

    @property
    def max_time(self):
        return self._v_max_time()

    _v_time_step = _swig_new_instance_method(_orbit_des.AttCsattb__v_time_step)

    @property
    def time_step(self):
        return self._v_time_step()

    _v_interpolation_type = _swig_new_instance_method(_orbit_des.AttCsattb__v_interpolation_type)

    @property
    def interpolation_type(self):
        return self._v_interpolation_type()

    @interpolation_type.setter
    def interpolation_type(self, value):
      self._v_interpolation_type(value)

    _v_attitude_data_quality = _swig_new_instance_method(_orbit_des.AttCsattb__v_attitude_data_quality)

    @property
    def attitude_data_quality(self):
        return self._v_attitude_data_quality()

    @attitude_data_quality.setter
    def attitude_data_quality(self, value):
      self._v_attitude_data_quality(value)

    _v_attitude_source = _swig_new_instance_method(_orbit_des.AttCsattb__v_attitude_source)

    @property
    def attitude_source(self):
        return self._v_attitude_source()

    @attitude_source.setter
    def attitude_source(self, value):
      self._v_attitude_source(value)

    _v_lagrange_order = _swig_new_instance_method(_orbit_des.AttCsattb__v_lagrange_order)

    @property
    def lagrange_order(self):
        return self._v_lagrange_order()

    @lagrange_order.setter
    def lagrange_order(self, value):
      self._v_lagrange_order(value)

    _v_attitude_data = _swig_new_instance_method(_orbit_des.AttCsattb__v_attitude_data)

    @property
    def attitude_data(self):
        return self._v_attitude_data()

    att_q = _swig_new_instance_method(_orbit_des.AttCsattb_att_q)
    min_time_split = _swig_new_instance_method(_orbit_des.AttCsattb_min_time_split)

    @property
    def qual_flag_att(self):
        return self.attitude_data_quality

    @property
    def interp_type_att(self):
        return self.interpolation_type

    @property
    def interp_order_att(self):
        return self.lagrange_order

    @property
    def att_type(self):  
        return self.attitude_source

    @property
    def eci_ecf_att(self):
        return (1 if self.is_cf else 0)

    @property
    def dt_att(self):
        return self.time_step

    @property
    def date_att(self):
        return int(self.min_time_split()[0])

    @property
    def t0_att(self):
        return float(self.min_time_split()[1])

    @property
    def reserved_len(self):
        return 0

    @property
    def num_att(self):
        return self.attitude_data.shape[0]

    @property
    def q1(self):
        return self.attitude_data[:,0]

    @property
    def q2(self):
        return self.attitude_data[:,1]

    @property
    def q3(self):
        return self.attitude_data[:,2]

    @property
    def q4(self):
        return self.attitude_data[:,3]


    des_write = _swig_new_instance_method(_orbit_des.AttCsattb_des_write)
    des_read = _swig_new_static_method(_orbit_des.AttCsattb_des_read)
    __str__ = _swig_new_instance_method(_orbit_des.AttCsattb___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _orbit_des.delete_AttCsattb

# Register AttCsattb in _orbit_des:
_orbit_des.AttCsattb_swigregister(AttCsattb)
class OrbitDes(geocal_swig.orbit.Orbit):
    r"""

    This combines a PosCsephb and AttCsattb into an Orbit.

    Note that we calculate things for every time point. If you are using
    this a bit you may want to create a OrbitQuaternionList from this
    Orbit to speed things up.

    Note that this orbit uses a different convention for the ScLookVector
    coordinates than we use in for example KeplerOrbit based on the
    EOS/MISR convention. We have +y in the line/along track direction and
    +x in the sample/cross track direction. The other convention we use in
    other orbits (e.g., MISR) has +x in the line direction and +y in the
    sample direction.

    C++ includes: orbit_des.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        OrbitDes::OrbitDes(const boost::shared_ptr< PosCsephb > &Pos, const boost::shared_ptr<
        AttCsattb > &Att, int Naif_code=Ecr::EARTH_NAIF_CODE)
        GeoCal::OrbitDes::OrbitDes
        Constructor.

        """
        _orbit_des.OrbitDes_swiginit(self, _orbit_des.new_OrbitDes(*args))
    orbit_data = _swig_new_instance_method(_orbit_des.OrbitDes_orbit_data)
    convert_to_ci = _swig_new_instance_method(_orbit_des.OrbitDes_convert_to_ci)
    convert_to_cf = _swig_new_instance_method(_orbit_des.OrbitDes_convert_to_cf)
    _v_pos_csephb = _swig_new_instance_method(_orbit_des.OrbitDes__v_pos_csephb)

    @property
    def pos_csephb(self):
        return self._v_pos_csephb()

    _v_att_csattb = _swig_new_instance_method(_orbit_des.OrbitDes__v_att_csattb)

    @property
    def att_csattb(self):
        return self._v_att_csattb()

    _v_naif_code = _swig_new_instance_method(_orbit_des.OrbitDes__v_naif_code)

    @property
    def naif_code(self):
        return self._v_naif_code()

    @naif_code.setter
    def naif_code(self, value):
      self._v_naif_code(value)


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _orbit_des.delete_OrbitDes

# Register OrbitDes in _orbit_des:
_orbit_des.OrbitDes_swigregister(OrbitDes)

__all__ = ["PosCsephb","AttCsattb","OrbitDes"]


