#! /usr/bin/env python
#
# This creates a IgcCollection that uses GDAL data files for the DEM, 
# image, and RPC.
from afids import *

version = "October 11, 2013"
usage='''Usage: 
  shelve_igccol [options] <output> <dem> 
       <image> <title> [(<image> <title>)...]
  shelve_igccol [options] --from-shelve <output> <input>...
  shelve_igccol -h | --help
  shelve_igccol -v | --version

This creates a sqlite shelve object that holds a IgcCollection. The
output should be in "file:key" format, e.g., "my_data.db:igc". Each
of the images should also have a title which can be used when plotting
etc.

This can also be used to generate just a singe Image Ground Connection.
This is so similar to creating a collection that we don't have a separate
program for this, just a special option.

The DEM should be given as a "file:key" sqlite shelve object.

Options:
  -h --help         
       Print this message

  --fit-height-offset
       Fit for the height offset, in addition to RPC parameters. Note that
       in general the height_offset will *not* be an integer. NITF requires
       this to be an integer, so if you use this parameter you should be
       sure not to try to write the RPC to NITF.

  --from-shelve
       Get ImageGroundConnection from shelve objects, and put into a
       IgcCollection.

  --image-from-shelve
       Instead of getting images from a file, get them from a shelve object.
       This should be in a "file:key" format. 

  --image-ground-connection
       Make a ImageGroundConnection instead of a IgcCollection. We just
       take the first image etc. for this.

  --rpc-line-fit=list
       A comma separated list of 0 based parameters that we should set
       a being able to be fit (e.g., "0,1,3"). This assumes we want
       to fit the same values for each of the ImageGroundConnection,
       which is usually the case. We could create a more specific way
       to specify this for each ImageGroundConnection if we need
       to. [default: ]

  --rpc-sample-fit=list
       A comma separated list of 0 based parameters that we should set
       a being able to be fit (e.g., "0,1,3"). This assumes we want
       to fit the same values for each of the ImageGroundConnection,
       which is usually the case. We could create a more specific way
       to specify this for each ImageGroundConnection if we need
       to. [default: ]

  -v --version      
       Print program version
'''
# Parse command line arguments
args = docopt_simple(usage, version=version)

line_fit = []
for i in str(args.rpc_line_fit).split(','):
    if(i != ''):
        line_fit.append(int(i))
sample_fit = []
for i in str(args.rpc_sample_fit).split(','):
    if(i != ''):
        sample_fit.append(int(i))
fln = [False] * 20
fsmp = [False] * 20
for i in line_fit:
    fln[i] = True
for i in sample_fit:
    fsmp[i] = True

a = []
if(args.from_shelve):
    for inp in args.input:
        t = read_shelve(inp)
        a.append(t)
else:
    dem = read_shelve(args.dem)
    for i in range(len(args.image)):
        if(args.image_from_shelve):
            img = read_shelve(args.image[i])
            t = RpcImageGroundConnection(img.rpc, dem, img, args.title[i])
        elif VicarFile.is_vicar_file(args.image[i]):
            t = VicarImageGroundConnection(args.image[i], dem, 
                                           title=args.title[i])
        else:
            t = GdalImageGroundConnection(args.image[i], dem, 
                                          title=args.title[i])
        t.rpc.fit_line_numerator = fln
        t.rpc.fit_sample_numerator = fsmp
        if(args.fit_height_offset):
            t.fit_height_offset = True
        a.append(t)

igc_coll = IgcArray(a)
igc_coll.parameter_subset_mask = [True] * len(igc_coll.parameter)
if(args.image_ground_connection):
    write_shelve(args.output, a[0])
else:
    write_shelve(args.output, igc_coll)

