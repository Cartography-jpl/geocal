# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _spice_helper.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_spice_helper')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_spice_helper')
    _spice_helper = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_spice_helper', [dirname(__file__)])
        except ImportError:
            import _spice_helper
            return _spice_helper
        try:
            _mod = imp.load_module('_spice_helper', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _spice_helper = swig_import_helper()
    del swig_import_helper
else:
    import _spice_helper
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SWIG_MODULE_ALREADY_DONE = _spice_helper.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spice_helper.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_spice_helper.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_spice_helper.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_spice_helper.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_spice_helper.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_spice_helper.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_spice_helper.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_spice_helper.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_spice_helper.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_spice_helper.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_spice_helper.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_spice_helper.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_spice_helper.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_spice_helper.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_spice_helper.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_spice_helper.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_spice_helper.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _spice_helper.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _spice_helper.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.look_vector
class SpiceHelper(object):
    """

    This class centralizes all of the CSPICE calls from the CSPICE library
    (available from NAIF athttp://naif.jpl.nasa.gov/naif/pds.html).

    This class handles initializing CSPICE, and provides one place to
    modify if we ever need to replace the dependency on this library.

    SPICE depends on various kernels. We load the file found at
    $SPICEDATA/geocal.ker. This file in turn loads a number of other
    kernels, you can edit this file to change which kernels are used.

    C++ includes: spice_helper.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def have_spice():
        """

        bool SpiceHelper::have_spice()
        Return true if we have spice available, false otherwise. 
        """
        return _spice_helper.SpiceHelper_have_spice()

    have_spice = staticmethod(have_spice)

    def name_to_body(Name):
        """

        int SpiceHelper::name_to_body(const std::string &Name)
        Get ID given a name. 
        """
        return _spice_helper.SpiceHelper_name_to_body(Name)

    name_to_body = staticmethod(name_to_body)

    def body_name(Body_id):
        """

        std::string SpiceHelper::body_name(int Body_id)
        Return the body name for the given id. 
        """
        return _spice_helper.SpiceHelper_body_name(Body_id)

    body_name = staticmethod(body_name)

    def kernel_data_int(Dname):
        """

        int SpiceHelper::kernel_data_int(const std::string &Dname)
        Return a specific kernel value. This returns a single integer value.

        """
        return _spice_helper.SpiceHelper_kernel_data_int(Dname)

    kernel_data_int = staticmethod(kernel_data_int)

    def kernel_data_double(Dname):
        """

        double SpiceHelper::kernel_data_double(const std::string &Dname)
        Return a specific kernel value. This returns a single double value. 
        """
        return _spice_helper.SpiceHelper_kernel_data_double(Dname)

    kernel_data_double = staticmethod(kernel_data_double)

    def kernel_data_array_double(Dname):
        """

        blitz::Array< double, 1 > SpiceHelper::kernel_data_array_double(const std::string &Dname)
        Return a specific kernel value. This returns a array value. 
        """
        return _spice_helper.SpiceHelper_kernel_data_array_double(Dname)

    kernel_data_array_double = staticmethod(kernel_data_array_double)

    def latsrf(Body_id, Tm, Lat_deg, Lon_deg):
        """

        boost::shared_ptr< GroundCoordinate > SpiceHelper::latsrf(int Body_id, const Time &Tm, double Lat_deg, double Lon_deg)
        Return a surface point from latsrf.

        Note that although spice takes radians this function takes degrees.
        This does a single point, we can add something taking an array in the
        future if needed. 
        """
        return _spice_helper.SpiceHelper_latsrf(Body_id, Tm, Lat_deg, Lon_deg)

    latsrf = staticmethod(latsrf)

    def fixed_frame_name(Body_id):
        """

        std::string SpiceHelper::fixed_frame_name(int Body_id)
        Return the fixed frame name for the given body.

        We pull this out so we don't have lots of switch statements elsewhere.

        """
        return _spice_helper.SpiceHelper_fixed_frame_name(Body_id)

    fixed_frame_name = staticmethod(fixed_frame_name)

    def spice_available():
        """

        bool SpiceHelper::spice_available()
        Return true if we have SPICE functionality available, false otherwise.

        """
        return _spice_helper.SpiceHelper_spice_available()

    spice_available = staticmethod(spice_available)

    def spice_setup(*args):
        """

        void SpiceHelper::spice_setup(const std::string &Kernel="geocal.ker", bool
        Force_kernel_pool_reset=false)
        Set SPICE errors to just return, rather than aborting.

        If Force_kernel_pool_reset is true, then reset the kernel pool and
        start over.

        Note a special issue when using with python multiprocessor. In a way
        I've never been able to track down, the spice kernels are somehow
        mangled in the forked processes. I'm not sure what is not getting
        copied, we would regularly we get errors that looked like a corrupt
        kernel. For example:

        SPICE(BADSUBSCRIPT): Subscript out of range on file line 412,
        procedure "zzdafgsr". Attempt to access element 129 of variable
        "dpbuf".

        RuntimeError: SPICE toolkit error: SPICE(DAFBEGGTEND)

        Beginning address (8889045) greater than ending address (8889044).

        Not sure what the source of this is, but as a workaround we:

        Keep track of the process ID

        Keep a list of kernels loaded

        Check the process ID on each call to spice_setup.

        If it doesn't match, clear all the kernels and reload them.

        This happens transparently, and hopefully this will remove all the
        problems with forking. If not, we may need to look into this further,
        and perhaps track down the actual underlying issue with forking 
        """
        return _spice_helper.SpiceHelper_spice_setup(*args)

    spice_setup = staticmethod(spice_setup)

    def add_kernel(Kernel):
        """

        void SpiceHelper::add_kernel(const std::string &Kernel, bool Skip_save=false)
        Add an additional kernel, after the one we automatically get (i.e.,
        $SPICEDATA/geocal.ker).

        Skip_save is really meant for internal use, it skips saving the kernel
        in our list of kernels to reload on forking (see spice_setup comments
        for a description of this). 
        """
        return _spice_helper.SpiceHelper_add_kernel(Kernel)

    add_kernel = staticmethod(add_kernel)

    def kernel_loaded(Kernel):
        """

        bool SpiceHelper::kernel_loaded(const std::string &Kernel)
        Check if a given kernel file has already been loaded.

        Note that this is a bit limited, this checks against the exact name
        that was loaded. So if you load "dir/bar/foo.ker" and then check
        against "dir/./bar/foo.ker" will return false even though this is
        the same file. This is just a limitation of the spice function call.

        """
        return _spice_helper.SpiceHelper_kernel_loaded(Kernel)

    kernel_loaded = staticmethod(kernel_loaded)

    def conversion_quaternion(From, To, T):
        """

        boost::math::quaternion< double > SpiceHelper::conversion_quaternion(const std::string &From, const std::string &To, const Time &T)
        Return quaternion that converts between the two named coordinate
        systems. 
        """
        return _spice_helper.SpiceHelper_conversion_quaternion(From, To, T)

    conversion_quaternion = staticmethod(conversion_quaternion)

    def state_vector(*args):
        """

        void SpiceHelper::state_vector(int Body_id, const std::string &Target_name, const Time &T,
        boost::array< double, 3 > &Pos, boost::array< double, 3 > &Vel, const
        std::string &Abcorr="NONE")
        Get the state vector (position and velocity, in meters), in the fixed
        coordinates for the given Body_id, and the given Time.

        The Target name can be anything spice recognizes.

        The Abcorr should be any of the strings spkezp (https://naif.jpl.nasa.
        gov/pub/naif/toolkit_docs/C/cspice/spkezp_c.html) accepts (e.g.,
        "LT").

        Note that if you include the stellar correction (e.g., "LT+S") you
        should not also include the velocity aberration correction in e.g.,
        QuaternionOrbitData. Stellar correction gives the "apparent"
        position, which already accounts for the aberration angle correction.

        Also, it is important to note that the light time calculated is to the
        center of the Body, not the surface. If you are trying to find a
        intercept with something near the surface this can be considerably
        different (see sincpt_c vs spkezp_c in the SPICE documentation). So
        generally you don't want anything other than the default "NONE". 
        """
        return _spice_helper.SpiceHelper_state_vector(*args)

    state_vector = staticmethod(state_vector)

    def boresight_and_footprint(*args):
        """

        std::vector< boost::shared_ptr< GroundCoordinate > > SpiceHelper::boresight_and_footprint(const Time &T, int Body_id, const std::string &Satellite_name, const
        std::string &Camera_name, const std::string &Corr_type="CN+S")
        SPICE does not directly work with a full camera.

        However it can calculate boresight and footprint for instruments. This
        can be very useful to check a full ImageGroundConnection by checking
        that it agrees with SPICE on the boresight and footprint.

        The Corr_type is what is used by sincpt_c, check the SPICE
        documentation for this. You generally will want to use the default,
        but you can use some of the other possible values if you want to see
        if things we normally ignore are important (e.g., light travel time).

        Satellite_name is something like "MEX" (for mars express), and
        Camera_name is something like "MEX_HRSC_NADIR".

        We return a vector of GroundCoordinate. The first is the boresight,
        and the remaining are the footprint bounds in the order than spice
        returns them. 
        """
        return _spice_helper.SpiceHelper_boresight_and_footprint(*args)

    boresight_and_footprint = staticmethod(boresight_and_footprint)

    def surface_intersect(*args):
        """

        void SpiceHelper::surface_intersect(const Time &T, int Body_id, const std::string &Satellite_name, const
        std::string &Camera_name, const ScLookVector &Slv, boost::shared_ptr<
        GroundCoordinate > &Gc, double &Light_time, const std::string
        &Corr_type="CN+S", const std::string &Method="Ellipsoid")
        Use SPICE to find the intersection with the surface for a given
        ScLookVector.

        The Corr_type is what is used by sincpt_c, check the SPICE
        documentation for this.

        Satellite_name is something like "MEX" (for mars express), and
        Camera_name is something like "MEX_HRSC_NADIR".

        We return the GroundCoordinate on the surface ellipsoid, and the light
        time calculated (if applicable). 
        """
        return _spice_helper.SpiceHelper_surface_intersect(*args)

    surface_intersect = staticmethod(surface_intersect)

    def __init__(self):
        _spice_helper.SpiceHelper_swiginit(self, _spice_helper.new_SpiceHelper())
    __swig_destroy__ = _spice_helper.delete_SpiceHelper
SpiceHelper_swigregister = _spice_helper.SpiceHelper_swigregister
SpiceHelper_swigregister(SpiceHelper)

def SpiceHelper_have_spice():
    """

    bool SpiceHelper::have_spice()
    Return true if we have spice available, false otherwise. 
    """
    return _spice_helper.SpiceHelper_have_spice()

def SpiceHelper_name_to_body(Name):
    """

    int SpiceHelper::name_to_body(const std::string &Name)
    Get ID given a name. 
    """
    return _spice_helper.SpiceHelper_name_to_body(Name)

def SpiceHelper_body_name(Body_id):
    """

    std::string SpiceHelper::body_name(int Body_id)
    Return the body name for the given id. 
    """
    return _spice_helper.SpiceHelper_body_name(Body_id)

def SpiceHelper_kernel_data_int(Dname):
    """

    int SpiceHelper::kernel_data_int(const std::string &Dname)
    Return a specific kernel value. This returns a single integer value.

    """
    return _spice_helper.SpiceHelper_kernel_data_int(Dname)

def SpiceHelper_kernel_data_double(Dname):
    """

    double SpiceHelper::kernel_data_double(const std::string &Dname)
    Return a specific kernel value. This returns a single double value. 
    """
    return _spice_helper.SpiceHelper_kernel_data_double(Dname)

def SpiceHelper_kernel_data_array_double(Dname):
    """

    blitz::Array< double, 1 > SpiceHelper::kernel_data_array_double(const std::string &Dname)
    Return a specific kernel value. This returns a array value. 
    """
    return _spice_helper.SpiceHelper_kernel_data_array_double(Dname)

def SpiceHelper_latsrf(Body_id, Tm, Lat_deg, Lon_deg):
    """

    boost::shared_ptr< GroundCoordinate > SpiceHelper::latsrf(int Body_id, const Time &Tm, double Lat_deg, double Lon_deg)
    Return a surface point from latsrf.

    Note that although spice takes radians this function takes degrees.
    This does a single point, we can add something taking an array in the
    future if needed. 
    """
    return _spice_helper.SpiceHelper_latsrf(Body_id, Tm, Lat_deg, Lon_deg)

def SpiceHelper_fixed_frame_name(Body_id):
    """

    std::string SpiceHelper::fixed_frame_name(int Body_id)
    Return the fixed frame name for the given body.

    We pull this out so we don't have lots of switch statements elsewhere.

    """
    return _spice_helper.SpiceHelper_fixed_frame_name(Body_id)

def SpiceHelper_spice_available():
    """

    bool SpiceHelper::spice_available()
    Return true if we have SPICE functionality available, false otherwise.

    """
    return _spice_helper.SpiceHelper_spice_available()

def SpiceHelper_spice_setup(*args):
    """

    void SpiceHelper::spice_setup(const std::string &Kernel="geocal.ker", bool
    Force_kernel_pool_reset=false)
    Set SPICE errors to just return, rather than aborting.

    If Force_kernel_pool_reset is true, then reset the kernel pool and
    start over.

    Note a special issue when using with python multiprocessor. In a way
    I've never been able to track down, the spice kernels are somehow
    mangled in the forked processes. I'm not sure what is not getting
    copied, we would regularly we get errors that looked like a corrupt
    kernel. For example:

    SPICE(BADSUBSCRIPT): Subscript out of range on file line 412,
    procedure "zzdafgsr". Attempt to access element 129 of variable
    "dpbuf".

    RuntimeError: SPICE toolkit error: SPICE(DAFBEGGTEND)

    Beginning address (8889045) greater than ending address (8889044).

    Not sure what the source of this is, but as a workaround we:

    Keep track of the process ID

    Keep a list of kernels loaded

    Check the process ID on each call to spice_setup.

    If it doesn't match, clear all the kernels and reload them.

    This happens transparently, and hopefully this will remove all the
    problems with forking. If not, we may need to look into this further,
    and perhaps track down the actual underlying issue with forking 
    """
    return _spice_helper.SpiceHelper_spice_setup(*args)

def SpiceHelper_add_kernel(Kernel):
    """

    void SpiceHelper::add_kernel(const std::string &Kernel, bool Skip_save=false)
    Add an additional kernel, after the one we automatically get (i.e.,
    $SPICEDATA/geocal.ker).

    Skip_save is really meant for internal use, it skips saving the kernel
    in our list of kernels to reload on forking (see spice_setup comments
    for a description of this). 
    """
    return _spice_helper.SpiceHelper_add_kernel(Kernel)

def SpiceHelper_kernel_loaded(Kernel):
    """

    bool SpiceHelper::kernel_loaded(const std::string &Kernel)
    Check if a given kernel file has already been loaded.

    Note that this is a bit limited, this checks against the exact name
    that was loaded. So if you load "dir/bar/foo.ker" and then check
    against "dir/./bar/foo.ker" will return false even though this is
    the same file. This is just a limitation of the spice function call.

    """
    return _spice_helper.SpiceHelper_kernel_loaded(Kernel)

def SpiceHelper_conversion_quaternion(From, To, T):
    """

    boost::math::quaternion< double > SpiceHelper::conversion_quaternion(const std::string &From, const std::string &To, const Time &T)
    Return quaternion that converts between the two named coordinate
    systems. 
    """
    return _spice_helper.SpiceHelper_conversion_quaternion(From, To, T)

def SpiceHelper_state_vector(*args):
    """

    void SpiceHelper::state_vector(int Body_id, const std::string &Target_name, const Time &T,
    boost::array< double, 3 > &Pos, boost::array< double, 3 > &Vel, const
    std::string &Abcorr="NONE")
    Get the state vector (position and velocity, in meters), in the fixed
    coordinates for the given Body_id, and the given Time.

    The Target name can be anything spice recognizes.

    The Abcorr should be any of the strings spkezp (https://naif.jpl.nasa.
    gov/pub/naif/toolkit_docs/C/cspice/spkezp_c.html) accepts (e.g.,
    "LT").

    Note that if you include the stellar correction (e.g., "LT+S") you
    should not also include the velocity aberration correction in e.g.,
    QuaternionOrbitData. Stellar correction gives the "apparent"
    position, which already accounts for the aberration angle correction.

    Also, it is important to note that the light time calculated is to the
    center of the Body, not the surface. If you are trying to find a
    intercept with something near the surface this can be considerably
    different (see sincpt_c vs spkezp_c in the SPICE documentation). So
    generally you don't want anything other than the default "NONE". 
    """
    return _spice_helper.SpiceHelper_state_vector(*args)

def SpiceHelper_boresight_and_footprint(*args):
    """

    std::vector< boost::shared_ptr< GroundCoordinate > > SpiceHelper::boresight_and_footprint(const Time &T, int Body_id, const std::string &Satellite_name, const
    std::string &Camera_name, const std::string &Corr_type="CN+S")
    SPICE does not directly work with a full camera.

    However it can calculate boresight and footprint for instruments. This
    can be very useful to check a full ImageGroundConnection by checking
    that it agrees with SPICE on the boresight and footprint.

    The Corr_type is what is used by sincpt_c, check the SPICE
    documentation for this. You generally will want to use the default,
    but you can use some of the other possible values if you want to see
    if things we normally ignore are important (e.g., light travel time).

    Satellite_name is something like "MEX" (for mars express), and
    Camera_name is something like "MEX_HRSC_NADIR".

    We return a vector of GroundCoordinate. The first is the boresight,
    and the remaining are the footprint bounds in the order than spice
    returns them. 
    """
    return _spice_helper.SpiceHelper_boresight_and_footprint(*args)

def SpiceHelper_surface_intersect(*args):
    """

    void SpiceHelper::surface_intersect(const Time &T, int Body_id, const std::string &Satellite_name, const
    std::string &Camera_name, const ScLookVector &Slv, boost::shared_ptr<
    GroundCoordinate > &Gc, double &Light_time, const std::string
    &Corr_type="CN+S", const std::string &Method="Ellipsoid")
    Use SPICE to find the intersection with the surface for a given
    ScLookVector.

    The Corr_type is what is used by sincpt_c, check the SPICE
    documentation for this.

    Satellite_name is something like "MEX" (for mars express), and
    Camera_name is something like "MEX_HRSC_NADIR".

    We return the GroundCoordinate on the surface ellipsoid, and the light
    time calculated (if applicable). 
    """
    return _spice_helper.SpiceHelper_surface_intersect(*args)


__all__ = ["SpiceHelper"]



