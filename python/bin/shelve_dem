#! /usr/bin/env python
#
# This sets up a DEM into a shelve.

import geocal
import subprocess

version = "June 6, 2019"
usage='''Usage: 
  shelve_dem [options] <dem_file> <output>
  shelve_dem [options] <dem_file> <datum_file> <output>
  shelve_dem --srtm <output>
  shelve_dem --usgs <output>
  shelve_dem --constant-dem=h <output>
  shelve_dem -h | --help
  shelve_dem -v | --version

This generates an XML file that describes a DEM, which is then used
as an input to other programs.

You can supply a DEM file along with an optional Datum file. This should
be any format readable by GDAL (e.g., GeoTIFF) or VICAR format.

Options:
  -h --help         
       Print this message

  --outside-dem-not-error
       If a program attempts to read a DEM value outside of the supplied 
       file, this is normally treated as an error. Alternatively, you can
       specify this option and we will return a height of "0" for any
       attempt to read outside the DEM.

  --constant-dem=h
       Use a constant height DEM (a SimpleDem), with the given height.

  --dem-band=b
       The band of the DEM file to use (1 based). [default: 1]

  --datum-band=b
       The band of the Datum file to use (1 based). [default: 1]

  --constant-datum=u
       Use a datum with a constant undulation. This is useful as a quick
       way to add an offset to  DEM file. [default: 0.0]

  --egm96-datum
       Use the EGM 96 geoid datum (from EGM96_20_x100.HLF)

  --srtm
       Use the SRTM rather than supplying a DEM file.

  --usgs
       Use the USGS DEM (10 meter data over US)

  -v --version      
       Print program version
'''

# Mapping between long name and shorter vicar name
long_name_to_vicar = {
    "dem_file" : "dem",
    "datum_file" : "datum",
    "output" : "out",
    "outside_dem_not_error" : "outok",
    "constant_dem" : "cdem",
    "egm96_datum" : "edatum",
    "dem_band" : "banddem",
    "datum_band" : "banddatum",
    "constant_datum" : "cdatum",
    "srtm" : "srtm",
    "usgs": "usgs"}

args = geocal.docopt_simple(usage, version=version,
                            long_name_to_vicar=long_name_to_vicar)

dem = None
if(args.srtm):
    dem = geocal.SrtmDem()
elif(args.usgs):
    dem = geocal.UsgsDem("", not args.outside_dem_not_error)
elif(args.constant_dem is not None and args.constant_dem > -99999):
    dem = geocal.SimpleDem(args.constant_dem)
else:
    if(args.datum_file):
        datum = geocal.GdalDatum(args.datum_file, args.datum_band)
    elif(args.egm96_datum):
        datum = geocal.DatumGeoid96()
    else:
        datum = geocal.SimpleDatum(args.constant_datum)
    if geocal.VicarLiteFile.is_vicar_file(args.dem_file):
        dem = geocal.VicarLiteDem(args.dem_file, not args.outside_dem_not_error, 
                           datum, args.dem_band)
    else:
        # Check for mola file
        t = subprocess.run(["file", "-b", args.dem_file], stdout=subprocess.PIPE)
        if(t.returncode == 0 and t.stdout.find(b"PDS image data") >= 0):
            if(geocal.pds_label(args.dem_file)["DATA_SET_ID"].find("MOLA") >= 0):
                dem = geocal.MolaDemFile(args.dem_file, not args.outside_dem_not_error)
        if(dem is None):
            dem = geocal.GdalDem(args.dem_file, datum, args.dem_band, 
                          not args.outside_dem_not_error)

geocal.write_shelve(args.output, dem)



