# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _igc_array

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _igc_array.SWIG_PyInstanceMethod_New
_swig_new_static_method = _igc_array.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _igc_array.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _igc_array.delete_SwigPyIterator
    value = _swig_new_instance_method(_igc_array.SwigPyIterator_value)
    incr = _swig_new_instance_method(_igc_array.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_igc_array.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_igc_array.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_igc_array.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_igc_array.SwigPyIterator_copy)
    next = _swig_new_instance_method(_igc_array.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_igc_array.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_igc_array.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_igc_array.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_igc_array.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_igc_array.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_igc_array.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_igc_array.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_igc_array.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_igc_array.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _igc_array:
_igc_array.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _igc_array.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.igc_collection
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class IgcArray(geocal_swig.igc_collection.IgcCollection, geocal_swig.with_parameter.WithParameterNested):
    r"""

    This is a IgcCollection that is just an array of independent
    ImageGroundConnection.

    C++ includes: igc_array.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Igc_list, Assume_igc_independent=True):
        r"""

        IgcArray::IgcArray(const std::vector< boost::shared_ptr< ImageGroundConnection > >
        &Igc_list, bool Assume_igc_independent=true)
        Constructor.

        Note that we can make assumption about ImageGroundConnection being
        independent. If they are, then we can get a optimization in the
        jacobian calculation to speed it up. If they aren't (e.g., they share
        a common Orbit that has been added to the WithParameterNested), that
        is fine. We just take longer to do the calculation. But we need to
        know this to avoid making an incorrect optimization. Make sure
        Assume_igc_independent is set to the right value. 
        """
        _igc_array.IgcArray_swiginit(self, _igc_array.new_IgcArray(Igc_list, Assume_igc_independent))
    image_ground_connection = _swig_new_instance_method(_igc_array.IgcArray_image_ground_connection)
    add_igc = _swig_new_instance_method(_igc_array.IgcArray_add_igc)
    _v_assume_igc_independent = _swig_new_instance_method(_igc_array.IgcArray__v_assume_igc_independent)

    @property
    def assume_igc_independent(self):
        return self._v_assume_igc_independent()

    @assume_igc_independent.setter
    def assume_igc_independent(self, value):
      self._v_assume_igc_independent(value)


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _igc_array.delete_IgcArray

# Register IgcArray in _igc_array:
_igc_array.IgcArray_swigregister(IgcArray)

__all__ = ["IgcArray"]


