try:
    import pynitf
except ImportError:
    pass
from test_support import *
from geocal_swig import (PosCsephb, OrbitDes, Time, KeplerOrbit)
from geocal.geocal_nitf_des import *
import numpy as np

@require_pynitf
def test_poscsephb(isolated_dir):
    '''Create a file, and write out a DesCSEPHB.'''
    f = pynitf.NitfFile()
    t = Time.parse_time("1998-06-30T10:51:28.32Z")
    p = PosCsephb(KeplerOrbit(t, t + 100.0), 1.0)
    des = DesCSEPHB_geocal()
    des.pos_csephb = p
    f.des_segment.append(pynitf.NitfDesSegment(des=des))
    f.write("nitf_des.ntf")
    # Use the raw field class here
    pynitf.unregister_des_class(DesCSEPHB_geocal)
    f2 = pynitf.NitfFile("nitf_des.ntf")
    print(f2)
    # Now put back
    pynitf.register_des_class(DesCSEPHB_geocal, priority_order=-1)
    f2 = pynitf.NitfFile("nitf_des.ntf")
    print(f2)
    p2 = f2.des_segment[0].des.pos_csephb
    assert p.is_cf == p2.is_cf
    assert str(p.min_time) == str(p2.min_time)
    assert str(p.max_time) == str(p2.max_time)
    assert_almost_equal(p.time_step, p2.time_step)
    assert p.interpolation_type == p2.interpolation_type
    assert p.ephemeris_data_quality == p2.ephemeris_data_quality
    assert p.ephemeris_source == p2.ephemeris_source
    assert p.lagrange_order == p2.lagrange_order
    orb1 = OrbitDes(p)
    orb2 = OrbitDes(p2)
    for t in np.linspace(0, 100.0, 200):
        assert distance(orb1.position_cf(orb1.min_time+t),
                        orb2.position_cf(orb2.min_time+t)) < 0.01

    
# Temporary, make sure unit test from pynitf still works.
import six

def test_des_csephb_basic():

    r = 100
    offset1 = 1000
    offset2 = 2000

    d = pynitf.DesCSEPHB()

    d.qual_flag_eph = 1
    d.interp_type_eph = 1
    d.ephem_flag = 1
    d.eci_ecf_ephem = 0
    d.dt_ephem = 900.5
    d.date_ephem = 20170501
    d.t0_ephem = 235959.100001010
    d.num_ephem = r
    for n in range(r):
        d.ephem_x[n] = n * n
        d.ephem_y[n] = n * n + offset1
        d.ephem_z[n] = n * n + offset2
    d.reserved_len = 0

    fh = six.BytesIO()
    dseg = pynitf.NitfDesSegment(des=d);
    hs, ds = dseg.write_to_file(fh)
    print(fh.getvalue())
    assert fh.getvalue() == b'DECSEPHB DES               01U                                                                                                                                                                      0046                                    0  00000001110900.50000000020170501235959.10000101000100+00000000.00+00001000.00+00002000.00+00000001.00+00001001.00+00002001.00+00000004.00+00001004.00+00002004.00+00000009.00+00001009.00+00002009.00+00000016.00+00001016.00+00002016.00+00000025.00+00001025.00+00002025.00+00000036.00+00001036.00+00002036.00+00000049.00+00001049.00+00002049.00+00000064.00+00001064.00+00002064.00+00000081.00+00001081.00+00002081.00+00000100.00+00001100.00+00002100.00+00000121.00+00001121.00+00002121.00+00000144.00+00001144.00+00002144.00+00000169.00+00001169.00+00002169.00+00000196.00+00001196.00+00002196.00+00000225.00+00001225.00+00002225.00+00000256.00+00001256.00+00002256.00+00000289.00+00001289.00+00002289.00+00000324.00+00001324.00+00002324.00+00000361.00+00001361.00+00002361.00+00000400.00+00001400.00+00002400.00+00000441.00+00001441.00+00002441.00+00000484.00+00001484.00+00002484.00+00000529.00+00001529.00+00002529.00+00000576.00+00001576.00+00002576.00+00000625.00+00001625.00+00002625.00+00000676.00+00001676.00+00002676.00+00000729.00+00001729.00+00002729.00+00000784.00+00001784.00+00002784.00+00000841.00+00001841.00+00002841.00+00000900.00+00001900.00+00002900.00+00000961.00+00001961.00+00002961.00+00001024.00+00002024.00+00003024.00+00001089.00+00002089.00+00003089.00+00001156.00+00002156.00+00003156.00+00001225.00+00002225.00+00003225.00+00001296.00+00002296.00+00003296.00+00001369.00+00002369.00+00003369.00+00001444.00+00002444.00+00003444.00+00001521.00+00002521.00+00003521.00+00001600.00+00002600.00+00003600.00+00001681.00+00002681.00+00003681.00+00001764.00+00002764.00+00003764.00+00001849.00+00002849.00+00003849.00+00001936.00+00002936.00+00003936.00+00002025.00+00003025.00+00004025.00+00002116.00+00003116.00+00004116.00+00002209.00+00003209.00+00004209.00+00002304.00+00003304.00+00004304.00+00002401.00+00003401.00+00004401.00+00002500.00+00003500.00+00004500.00+00002601.00+00003601.00+00004601.00+00002704.00+00003704.00+00004704.00+00002809.00+00003809.00+00004809.00+00002916.00+00003916.00+00004916.00+00003025.00+00004025.00+00005025.00+00003136.00+00004136.00+00005136.00+00003249.00+00004249.00+00005249.00+00003364.00+00004364.00+00005364.00+00003481.00+00004481.00+00005481.00+00003600.00+00004600.00+00005600.00+00003721.00+00004721.00+00005721.00+00003844.00+00004844.00+00005844.00+00003969.00+00004969.00+00005969.00+00004096.00+00005096.00+00006096.00+00004225.00+00005225.00+00006225.00+00004356.00+00005356.00+00006356.00+00004489.00+00005489.00+00006489.00+00004624.00+00005624.00+00006624.00+00004761.00+00005761.00+00006761.00+00004900.00+00005900.00+00006900.00+00005041.00+00006041.00+00007041.00+00005184.00+00006184.00+00007184.00+00005329.00+00006329.00+00007329.00+00005476.00+00006476.00+00007476.00+00005625.00+00006625.00+00007625.00+00005776.00+00006776.00+00007776.00+00005929.00+00006929.00+00007929.00+00006084.00+00007084.00+00008084.00+00006241.00+00007241.00+00008241.00+00006400.00+00007400.00+00008400.00+00006561.00+00007561.00+00008561.00+00006724.00+00007724.00+00008724.00+00006889.00+00007889.00+00008889.00+00007056.00+00008056.00+00009056.00+00007225.00+00008225.00+00009225.00+00007396.00+00008396.00+00009396.00+00007569.00+00008569.00+00009569.00+00007744.00+00008744.00+00009744.00+00007921.00+00008921.00+00009921.00+00008100.00+00009100.00+00010100.00+00008281.00+00009281.00+00010281.00+00008464.00+00009464.00+00010464.00+00008649.00+00009649.00+00010649.00+00008836.00+00009836.00+00010836.00+00009025.00+00010025.00+00011025.00+00009216.00+00010216.00+00011216.00+00009409.00+00010409.00+00011409.00+00009604.00+00010604.00+00011604.00+00009801.00+00010801.00+00011801.0000000'
    fh2 = six.BytesIO(fh.getvalue())
    dseg2 = pynitf.NitfDesSegment(header_size=hs, data_size=ds)
    dseg2.read_from_file(fh2)
    d2 = dseg2.des

    assert d2.qual_flag_eph == 1
    assert d2.interp_type_eph == 1
    assert d2.ephem_flag == 1
    assert d2.eci_ecf_ephem == 0
    assert d2.dt_ephem == 900.5
    assert d2.date_ephem == 20170501
    print(d2.pos_csephb.min_time_split())
    assert d2.t0_ephem == 235959.100001010
    assert d2.num_ephem == r
    for n in range(r):
        assert d2.ephem_x[n] == n * n
        assert d2.ephem_y[n] == n * n + offset1
        assert d2.ephem_z[n] == n * n + offset2
    assert d2.reserved_len == 0

    print (d2.summary())
