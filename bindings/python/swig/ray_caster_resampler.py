# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ray_caster_resampler.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ray_caster_resampler')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ray_caster_resampler')
    _ray_caster_resampler = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ray_caster_resampler', [dirname(__file__)])
        except ImportError:
            import _ray_caster_resampler
            return _ray_caster_resampler
        try:
            _mod = imp.load_module('_ray_caster_resampler', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ray_caster_resampler = swig_import_helper()
    del swig_import_helper
else:
    import _ray_caster_resampler
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ray_caster_resampler.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ray_caster_resampler.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ray_caster_resampler.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ray_caster_resampler.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ray_caster_resampler.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ray_caster_resampler.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ray_caster_resampler.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ray_caster_resampler.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ray_caster_resampler.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ray_caster_resampler.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ray_caster_resampler.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ray_caster_resampler.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ray_caster_resampler.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ray_caster_resampler.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ray_caster_resampler.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ray_caster_resampler.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ray_caster_resampler.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ray_caster_resampler.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _ray_caster_resampler.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class RayCasterResampler(geocal_swig.generic_object.GenericObject):
    """

    This is used to project data to the surface using a RayCaster.

    This is similar to IgcMapProjected, except rather than going from the
    ground to the image we go from the image to the ground. Depending on
    the type of ImageGroundConnection we are using, one or the other
    direction can be much faster.

    Important* Res and Count_scratch should be initialized to 0 (e.g., use
    fill_image). This class does not do this, because we may be called in
    parallel. It is just assumed by this class that these images have been
    initialized.

    Because the data may be large, we make use of a second raster image to
    maintain the counts. Note also that the primary raster image will
    possibly have multiple pixels placed in it, so it should have a large
    enough range to include this (so for example a int 8 imake may want to
    allow int 16 during the calculation). You might need to copy the data
    to a final image of a smaller size afterwards - but since we would
    then need a scratch intermediate image there doesn't seem much of a
    downside to using this image.

    There are two steps involved:

    The initial ray casting

    Scaling the results with the count

    To support parallelization these two steps can be called to use a
    subset of the data. If you do this, you'll want to make sure the
    RasterImage you supply can support parallel writing - e.g.,
    VicarLiteRasterImage with memory mapping.

    The subsetting should be done on Ray_caster (so like IgcRayCaster
    where we specify the start and number of lines).

    C++ includes: ray_caster_resampler.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Ray_caster, Img, Res, Count_scratch):
        """

        RayCasterResampler::RayCasterResampler(const boost::shared_ptr< RayCaster > &Ray_caster, const
        boost::shared_ptr< RasterImage > &Img, const boost::shared_ptr<
        RasterImage > &Res, const boost::shared_ptr< RasterImage >
        &Count_scratch)
        Constructor. 
        """
        _ray_caster_resampler.RayCasterResampler_swiginit(self, _ray_caster_resampler.new_RayCasterResampler(Ray_caster, Img, Res, Count_scratch))

    def ray_cast_step(self):
        """

        void RayCasterResampler::ray_cast_step()
        Do ray cast step. 
        """
        return _ray_caster_resampler.RayCasterResampler_ray_cast_step(self)


    def final_rad_step(self, start_line, end_line):
        """

        void RayCasterResampler::final_rad_step(int start_line, int end_line)
        Do final radiance calculation step (scaling by count) This is in res()
        space. 
        """
        return _ray_caster_resampler.RayCasterResampler_final_rad_step(self, start_line, end_line)


    def _v_ray_caster(self):
        """

        const boost::shared_ptr<RayCaster>& GeoCal::RayCasterResampler::ray_caster() const

        """
        return _ray_caster_resampler.RayCasterResampler__v_ray_caster(self)


    @property
    def ray_caster(self):
        return self._v_ray_caster()


    def _v_image(self):
        """

        const boost::shared_ptr<RasterImage>& GeoCal::RayCasterResampler::image() const

        """
        return _ray_caster_resampler.RayCasterResampler__v_image(self)


    @property
    def image(self):
        return self._v_image()


    def _v_res(self):
        """

        const boost::shared_ptr<RasterImage>& GeoCal::RayCasterResampler::res() const

        """
        return _ray_caster_resampler.RayCasterResampler__v_res(self)


    @property
    def res(self):
        return self._v_res()


    def _v_count_scratch(self):
        """

        const boost::shared_ptr<RasterImage>& GeoCal::RayCasterResampler::count_scratch() const

        """
        return _ray_caster_resampler.RayCasterResampler__v_count_scratch(self)


    @property
    def count_scratch(self):
        return self._v_count_scratch()


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _ray_caster_resampler.delete_RayCasterResampler
RayCasterResampler.ray_cast_step = new_instancemethod(_ray_caster_resampler.RayCasterResampler_ray_cast_step, None, RayCasterResampler)
RayCasterResampler.final_rad_step = new_instancemethod(_ray_caster_resampler.RayCasterResampler_final_rad_step, None, RayCasterResampler)
RayCasterResampler._v_ray_caster = new_instancemethod(_ray_caster_resampler.RayCasterResampler__v_ray_caster, None, RayCasterResampler)
RayCasterResampler._v_image = new_instancemethod(_ray_caster_resampler.RayCasterResampler__v_image, None, RayCasterResampler)
RayCasterResampler._v_res = new_instancemethod(_ray_caster_resampler.RayCasterResampler__v_res, None, RayCasterResampler)
RayCasterResampler._v_count_scratch = new_instancemethod(_ray_caster_resampler.RayCasterResampler__v_count_scratch, None, RayCasterResampler)
RayCasterResampler_swigregister = _ray_caster_resampler.RayCasterResampler_swigregister
RayCasterResampler_swigregister(RayCasterResampler)


__all__ = ["RayCasterResampler"]



