# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _ibis_file

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _ibis_file.SWIG_PyInstanceMethod_New
_swig_new_static_method = _ibis_file.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _ibis_file.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ibis_file.delete_SwigPyIterator
    value = _swig_new_instance_method(_ibis_file.SwigPyIterator_value)
    incr = _swig_new_instance_method(_ibis_file.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_ibis_file.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_ibis_file.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_ibis_file.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_ibis_file.SwigPyIterator_copy)
    next = _swig_new_instance_method(_ibis_file.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_ibis_file.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_ibis_file.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_ibis_file.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_ibis_file.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_ibis_file.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_ibis_file.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_ibis_file.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_ibis_file.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_ibis_file.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ibis_file:
_ibis_file.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _ibis_file.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst


import numpy as np

import geocal_swig.generic_object
class IbisColumn_byte(object):
    r"""

    This class handles reading and writing a single column of a IBIS file.

    If you update a column and want the results to be written out, then
    you need to mark the "updated" flag as true, otherwise whatever
    changes are made won't be written to disk.

    C++ includes: ibis_file.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ibis_file = _swig_new_instance_method(_ibis_file.IbisColumn_byte_ibis_file)
    _v_column_index = _swig_new_instance_method(_ibis_file.IbisColumn_byte__v_column_index)

    @property
    def column_index(self):
        return self._v_column_index()

    _v_size_byte = _swig_new_instance_method(_ibis_file.IbisColumn_byte__v_size_byte)

    @property
    def size_byte(self):
        return self._v_size_byte()

    __str__ = _swig_new_instance_method(_ibis_file.IbisColumn_byte___str__)
    data = property(_ibis_file.IbisColumn_byte_data_get, _ibis_file.IbisColumn_byte_data_set)
    update = property(_ibis_file.IbisColumn_byte_update_get, _ibis_file.IbisColumn_byte_update_set)

    def __getitem__(self, i):
      return self.data[i]

    def __setitem__(self, i, v):
      self.update = True
      self.data[i] = v


    __swig_destroy__ = _ibis_file.delete_IbisColumn_byte

# Register IbisColumn_byte in _ibis_file:
_ibis_file.IbisColumn_byte_swigregister(IbisColumn_byte)
class IbisColumn_half(object):
    r"""

    This class handles reading and writing a single column of a IBIS file.

    If you update a column and want the results to be written out, then
    you need to mark the "updated" flag as true, otherwise whatever
    changes are made won't be written to disk.

    C++ includes: ibis_file.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ibis_file = _swig_new_instance_method(_ibis_file.IbisColumn_half_ibis_file)
    _v_column_index = _swig_new_instance_method(_ibis_file.IbisColumn_half__v_column_index)

    @property
    def column_index(self):
        return self._v_column_index()

    _v_size_byte = _swig_new_instance_method(_ibis_file.IbisColumn_half__v_size_byte)

    @property
    def size_byte(self):
        return self._v_size_byte()

    __str__ = _swig_new_instance_method(_ibis_file.IbisColumn_half___str__)
    data = property(_ibis_file.IbisColumn_half_data_get, _ibis_file.IbisColumn_half_data_set)
    update = property(_ibis_file.IbisColumn_half_update_get, _ibis_file.IbisColumn_half_update_set)

    def __getitem__(self, i):
      return self.data[i]

    def __setitem__(self, i, v):
      self.update = True
      self.data[i] = v


    __swig_destroy__ = _ibis_file.delete_IbisColumn_half

# Register IbisColumn_half in _ibis_file:
_ibis_file.IbisColumn_half_swigregister(IbisColumn_half)
class IbisColumn_full(object):
    r"""

    This class handles reading and writing a single column of a IBIS file.

    If you update a column and want the results to be written out, then
    you need to mark the "updated" flag as true, otherwise whatever
    changes are made won't be written to disk.

    C++ includes: ibis_file.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ibis_file = _swig_new_instance_method(_ibis_file.IbisColumn_full_ibis_file)
    _v_column_index = _swig_new_instance_method(_ibis_file.IbisColumn_full__v_column_index)

    @property
    def column_index(self):
        return self._v_column_index()

    _v_size_byte = _swig_new_instance_method(_ibis_file.IbisColumn_full__v_size_byte)

    @property
    def size_byte(self):
        return self._v_size_byte()

    __str__ = _swig_new_instance_method(_ibis_file.IbisColumn_full___str__)
    data = property(_ibis_file.IbisColumn_full_data_get, _ibis_file.IbisColumn_full_data_set)
    update = property(_ibis_file.IbisColumn_full_update_get, _ibis_file.IbisColumn_full_update_set)

    def __getitem__(self, i):
      return self.data[i]

    def __setitem__(self, i, v):
      self.update = True
      self.data[i] = v


    __swig_destroy__ = _ibis_file.delete_IbisColumn_full

# Register IbisColumn_full in _ibis_file:
_ibis_file.IbisColumn_full_swigregister(IbisColumn_full)
class IbisColumn_float(object):
    r"""

    This class handles reading and writing a single column of a IBIS file.

    If you update a column and want the results to be written out, then
    you need to mark the "updated" flag as true, otherwise whatever
    changes are made won't be written to disk.

    C++ includes: ibis_file.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ibis_file = _swig_new_instance_method(_ibis_file.IbisColumn_float_ibis_file)
    _v_column_index = _swig_new_instance_method(_ibis_file.IbisColumn_float__v_column_index)

    @property
    def column_index(self):
        return self._v_column_index()

    _v_size_byte = _swig_new_instance_method(_ibis_file.IbisColumn_float__v_size_byte)

    @property
    def size_byte(self):
        return self._v_size_byte()

    __str__ = _swig_new_instance_method(_ibis_file.IbisColumn_float___str__)
    data = property(_ibis_file.IbisColumn_float_data_get, _ibis_file.IbisColumn_float_data_set)
    update = property(_ibis_file.IbisColumn_float_update_get, _ibis_file.IbisColumn_float_update_set)

    def __getitem__(self, i):
      return self.data[i]

    def __setitem__(self, i, v):
      self.update = True
      self.data[i] = v


    __swig_destroy__ = _ibis_file.delete_IbisColumn_float

# Register IbisColumn_float in _ibis_file:
_ibis_file.IbisColumn_float_swigregister(IbisColumn_float)
class IbisColumn_double(object):
    r"""

    This class handles reading and writing a single column of a IBIS file.

    If you update a column and want the results to be written out, then
    you need to mark the "updated" flag as true, otherwise whatever
    changes are made won't be written to disk.

    C++ includes: ibis_file.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ibis_file = _swig_new_instance_method(_ibis_file.IbisColumn_double_ibis_file)
    _v_column_index = _swig_new_instance_method(_ibis_file.IbisColumn_double__v_column_index)

    @property
    def column_index(self):
        return self._v_column_index()

    _v_size_byte = _swig_new_instance_method(_ibis_file.IbisColumn_double__v_size_byte)

    @property
    def size_byte(self):
        return self._v_size_byte()

    __str__ = _swig_new_instance_method(_ibis_file.IbisColumn_double___str__)
    data = property(_ibis_file.IbisColumn_double_data_get, _ibis_file.IbisColumn_double_data_set)
    update = property(_ibis_file.IbisColumn_double_update_get, _ibis_file.IbisColumn_double_update_set)

    def __getitem__(self, i):
      return self.data[i]

    def __setitem__(self, i, v):
      self.update = True
      self.data[i] = v


    __swig_destroy__ = _ibis_file.delete_IbisColumn_double

# Register IbisColumn_double in _ibis_file:
_ibis_file.IbisColumn_double_swigregister(IbisColumn_double)
class IbisColumn_string(object):
    r"""

    This class handles reading and writing a single column of a IBIS file.

    If you update a column and want the results to be written out, then
    you need to mark the "updated" flag as true, otherwise whatever
    changes are made won't be written to disk.

    C++ includes: ibis_file.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ibis_file = _swig_new_instance_method(_ibis_file.IbisColumn_string_ibis_file)
    _v_column_index = _swig_new_instance_method(_ibis_file.IbisColumn_string__v_column_index)

    @property
    def column_index(self):
        return self._v_column_index()

    _v_size_byte = _swig_new_instance_method(_ibis_file.IbisColumn_string__v_size_byte)

    @property
    def size_byte(self):
        return self._v_size_byte()

    __str__ = _swig_new_instance_method(_ibis_file.IbisColumn_string___str__)
    data = property(_ibis_file.IbisColumn_string_data_get, _ibis_file.IbisColumn_string_data_set)
    update = property(_ibis_file.IbisColumn_string_update_get, _ibis_file.IbisColumn_string_update_set)

    def __getitem__(self, i):
      return self.data[i]

    def __setitem__(self, i, v):
      self.update = True
      self.data[i] = v


    __swig_destroy__ = _ibis_file.delete_IbisColumn_string

# Register IbisColumn_string in _ibis_file:
_ibis_file.IbisColumn_string_swigregister(IbisColumn_string)
class IbisFile(geocal_swig.generic_object.GenericObject):
    r"""

    This provides read and write for a IBIS file.

    IBIS is VICAR format used for tabulating raster format data -
    basically it is a table. This is used to interact with existing VICAR
    routines.

    The ASCII column type is a bit of a special case. For IBIS files, the
    ASCII column type is a fixed number of characters. We access this a
    std::string type. If you attempt to write a string that is too large
    for a column, then we silently truncate the string. Alternatively, we
    could have triggered an error in that case, but after thinking about
    it truncating seemed like the better choice. We can revisit this
    decision if it becomes clear that triggering an error would be better.

    As an implementation detail, the class VicarFile and IbisFile need to
    coordinate in translating file names to unit numbers since the same
    underlying Vicar routine zvunit is used by both. We arbitrarily have
    VicarFile handle this, and IbisFile accesses VicarFile when it needs
    to do this.

    C++ includes: ibis_file.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    READ = _ibis_file.IbisFile_READ
    WRITE = _ibis_file.IbisFile_WRITE
    UPDATE = _ibis_file.IbisFile_UPDATE
    VICAR_BYTE = _ibis_file.IbisFile_VICAR_BYTE
    VICAR_HALF = _ibis_file.IbisFile_VICAR_HALF
    VICAR_FULL = _ibis_file.IbisFile_VICAR_FULL
    VICAR_FLOAT = _ibis_file.IbisFile_VICAR_FLOAT
    VICAR_DOUBLE = _ibis_file.IbisFile_VICAR_DOUBLE
    VICAR_ASCII = _ibis_file.IbisFile_VICAR_ASCII

    def __init__(self, *args):
        r"""

        IbisFile::IbisFile(const std::string &Fname, int Number_row, const std::vector<
        std::string > &Format, const std::string &Organization="COLUMN")
        Create a new IBIS file.

        We pass in the number of rows and the format for each column. The
        format is given as a list of strings, with each string being one of
        the format types taken by the IBIS library - "BYTE", "HALF",
        "FULL", "REAL", "DOUB", "Ann" (e.g., "A10" for 10 character
        ASCII). The organization of the file can be given as "COLUMN" or
        "ROW". 
        """
        _ibis_file.IbisFile_swiginit(self, _ibis_file.new_IbisFile(*args))
    _v_access = _swig_new_instance_method(_ibis_file.IbisFile__v_access)

    @property
    def access(self):
        return self._v_access()

    close = _swig_new_instance_method(_ibis_file.IbisFile_close)
    column_data_type = _swig_new_instance_method(_ibis_file.IbisFile_column_data_type)
    _v_file_name = _swig_new_instance_method(_ibis_file.IbisFile__v_file_name)

    @property
    def file_name(self):
        return self._v_file_name()

    _v_ibis_fh = _swig_new_instance_method(_ibis_file.IbisFile__v_ibis_fh)

    @property
    def ibis_fh(self):
        return self._v_ibis_fh()

    _v_number_row = _swig_new_instance_method(_ibis_file.IbisFile__v_number_row)

    @property
    def number_row(self):
        return self._v_number_row()

    _v_number_col = _swig_new_instance_method(_ibis_file.IbisFile__v_number_col)

    @property
    def number_col(self):
        return self._v_number_col()

    _v_unit = _swig_new_instance_method(_ibis_file.IbisFile__v_unit)

    @property
    def unit(self):
        return self._v_unit()

    set_column_type = _swig_new_instance_method(_ibis_file.IbisFile_set_column_type)
    mark_updated = _swig_new_instance_method(_ibis_file.IbisFile_mark_updated)
    flush = _swig_new_instance_method(_ibis_file.IbisFile_flush)
    __str__ = _swig_new_instance_method(_ibis_file.IbisFile___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    column_byte = _swig_new_instance_method(_ibis_file.IbisFile_column_byte)
    column_half = _swig_new_instance_method(_ibis_file.IbisFile_column_half)
    column_full = _swig_new_instance_method(_ibis_file.IbisFile_column_full)
    column_float = _swig_new_instance_method(_ibis_file.IbisFile_column_float)
    column_double = _swig_new_instance_method(_ibis_file.IbisFile_column_double)
    column_string = _swig_new_instance_method(_ibis_file.IbisFile_column_string)
    __swig_destroy__ = _ibis_file.delete_IbisFile

# Register IbisFile in _ibis_file:
_ibis_file.IbisFile_swigregister(IbisFile)

__all__ = ["IbisFile","IbisColumn_byte","IbisColumn_half","IbisColumn_full","IbisColumn_float","IbisColumn_double","IbisColumn_string"]


