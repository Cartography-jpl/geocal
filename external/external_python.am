# We have a number of things that only need to be built of we are building
# python. We separate all that out here, just so we have this in one
# place. This gets included in external.am, but only if we are building
# python.

# ========================================================================
# Build SQLite

SQLITE_NAME = sqlite-autoconf-3070602
SQLITE_TARGET = $(DESTDIR)$(libdir)/libsqlite3.la
BUILT_SOURCES += $(SQLITE_TARGET)

$(SQLITE_TARGET): $(srcapyexternal)/$(SQLITE_NAME).tar.gz $(READLINE_TARGET)
	@echo "*************************** Building SQLite"
	-rm -rf $(SQLITE_NAME)
	${AMTAR} xzf $<
	cd $(SQLITE_NAME) && \
	export PATH=$(bindir):$$PATH && \
        export LD_LIBRARY_PATH="$(DESTDIR)$(libdir):${LD_LIBRARY_PATH}" && \
        ./configure --prefix=$(prefix) \
           CXX=$(CXX) CC=$(CC) F77=$(F77) && \
        $(MAKE) && $(MAKE) -j 1 install && exit 0; exit 1
	rm -rf $(SQLITE_NAME)
	@echo "========================== Done building SQLite"


# ========================================================================
# Build python

PYTHON_NAME = Python-2.7.1
PYTHON_TARGET = $(DESTDIR)$(bindir)/python
BUILT_SOURCES += $(PYTHON_TARGET)

# Note that rather annonying the python build requires that we be attached to
# a terminal, at least on a Mac. No particular reason that I can see, but 
# there you have it. What this means is that we can't build in the 
# background, e.g., "make >& make.out &"
# will get hung up with a "Stopped" state at some point in the python build.
# This means make needs to be run in the forground, or screen, or something
# like that. Perhaps there is a way around this, but I haven't found it.
$(PYTHON_TARGET): $(srcapyexternal)/$(PYTHON_NAME).tgz $(OPENSSL_TARGET) \
   $(ZLIB_TARGET) $(SQLITE_TARGET) $(TK_TARGET) $(READLINE_TARGET)
	@echo "*************************** Building python"
	-rm -rf $(PYTHON_NAME)
	${AMTAR} xzf $<
	cd $(PYTHON_NAME) && \
        export PATH=$(bindir):$$PATH && \
        export LD_LIBRARY_PATH="$(DESTDIR)$(libdir):${LD_LIBRARY_PATH}" && \
        ./configure --prefix=$(prefix) --enable-shared \
            CXX=$(CXX) CC=$(CC) F77=$(F77) && \
        $(MAKE) -j 1 && $(MAKE) -j 1 install && exit 0; exit 1
	rm -rf $(PYTHON_NAME)
	touch $(PYTHON_TARGET)
	@echo "========================== Done building python"

# ========================================================================
# Build ipython

IPYTHON_NAME = ipython-0.10.2
IPYTHON_TARGET = $(DESTDIR)$(bindir)/ipython

ipython: $(IPYTHON_TARGET)

INSTALL_DATA_HOOK+= ipython

$(IPYTHON_TARGET): $(srcapyexternal)/$(IPYTHON_NAME).tar.gz $(PYTHON_TARGET)
	@echo "*************************** Building ipython"
	-rm -rf $(IPYTHON_NAME)
	${AMTAR} xzf $<
	export PATH=$(bindir):$$PATH && \
        export LD_LIBRARY_PATH="$(DESTDIR)$(libdir):${LD_LIBRARY_PATH}" && \
        cd $(IPYTHON_NAME) && \
        $(PYTHON) setup.py install && exit 0; exit 1
	rm -rf $(IPYTHON_NAME)
	touch $(IPYTHON_TARGET)
	@echo "========================== Done building ipython"


# ========================================================================
# Build blas and lapack needed by numeric

include afids_python/external/blas/blas.am
include afids_python/external/lapack/lapack.am

# ========================================================================
# Build numeric
# 
# We currently use gfortran to build this. I'm not sure if we want to
# support g77, but if so the fcompiler line below needs to be changed.
# Note that somewhat oddly gnu95 actually picks out gfortran, not the
# older g95 compiler.

NUMERIC_NAME = numpy-1.6.1
NUMERIC_TARGET = $(DESTDIR)$(pythondir)/numpy/setup.py

$(NUMERIC_TARGET): $(srcapyexternal)/$(NUMERIC_NAME).tar.gz $(PYTHON_TARGET) libfblas.la libflapack.la
	@echo "*************************** Building numeric"
	$(MAKE) $(FBLAS_TARGET) 
	$(MAKE) $(FLAPACK_TARGET)
	-rm -rf $(NUMERIC_NAME)
	${AMTAR} xzf $<
	export PATH=$(bindir):$$PATH && \
        export LD_LIBRARY_PATH="$(DESTDIR)$(libdir):${LD_LIBRARY_PATH}" && \
        export BLAS=$(DESTDIR)$(libdir)/libfblas.a && \
        export LAPACK=$(DESTDIR)$(libdir)/libflapack.a && \
	export CC=$(CC) && \
        export F77=$(F77) && export F90=$(FC) && \
        cd $(NUMERIC_NAME) && \
        $(PYTHON) setup.py build --fcompiler=gnu95 && \
        $(PYTHON) setup.py install && exit 0; exit 1
	rm -rf $(NUMERIC_NAME)
	touch $(NUMERIC_TARGET)
	@echo "========================== Done building numeric"

# ========================================================================
# Build scipy

SCIPY_NAME = scipy-0.9.0
SCIPY_TARGET = $(DESTDIR)$(pythondir)/scipy/setup.py

$(SCIPY_TARGET): $(srcapyexternal)/$(SCIPY_NAME).tar.gz $(PYTHON_TARGET) \
   $(NUMERIC_TARGET) $(UMFPACK_TARGET)
	@echo "*************************** Building scipy"
	${AMTAR} xzf $<
	export PATH=$(bindir):$$PATH && \
        export LD_LIBRARY_PATH="$(DESTDIR)$(libdir):${LD_LIBRARY_PATH}" && \
        export BLAS=$(DESTDIR)$(libdir)/libfblas.a && \
        export LAPACK=$(DESTDIR)$(libdir)/libflapack.a && \
        export UMFPACK=$(DESTDIR)$(libdir)/libumfpack.a && \
	export CC=$(CC) && \
        export F77=$(F77) && export F90=$(FC) && \
        cd $(SCIPY_NAME) && \
        $(PYTHON) setup.py build --fcompiler=gnu95 && \
        $(PYTHON) setup.py install && exit 0; exit 1
	rm -rf $(SCIPY_NAME)
	touch $(SCIPY_TARGET)
	@echo "========================== Done building scipy"

# ========================================================================
# Build matplotlib

MATPLOTLIB_NAME = matplotlib-1.0.1
MATPLOTLIB_TARGET = $(DESTDIR)$(pythondir)/matplotlib/__init__.py

# This patch supports platforms that python think are "linux3"
MATPLOTLIB_PATCH = matplotlib-1.0.1-linux3.patch

BUILT_SOURCES += $(MATPLOTLIB_TARGET)

$(MATPLOTLIB_TARGET): $(srcapyexternal)/$(MATPLOTLIB_NAME).tar.gz \
   $(PYTHON_TARGET) $(NUMERIC_TARGET) $(SCIPY_TARGET)
	@echo "*************************** Building matplotlib"
	-rm -rf $(MATPLOTLIB_NAME)
	${AMTAR} xzf $<
	export PATH=$(bindir):$$PATH && \
        export LD_LIBRARY_PATH="$(DESTDIR)$(libdir):${LD_LIBRARY_PATH}" && \
        cd $(MATPLOTLIB_NAME) && \
        patch -p0 < $(abs_srcdir)/$(srcapyexternal)/$(MATPLOTLIB_PATCH) && \
        $(PYTHON) setup.py install && exit 0; exit 1
	rm -rf $(MATPLOTLIB_NAME)
	touch $(MATPLOTLIB_TARGET)
	@echo "========================== Done building matplotlib"

# ========================================================================
# Build setuptools

SETUPTOOLS_NAME = setuptools-0.6c11
SETUPTOOLS_TARGET = $(DESTDIR)$(bindir)/easy_install

BUILT_SOURCES += $(SETUPTOOLS_TARGET)

$(SETUPTOOLS_TARGET): $(srcapyexternal)/$(SETUPTOOLS_NAME).tar.gz \
   $(PYTHON_TARGET)
	@echo "*************************** Building setuptools"
	-rm -rf $(SETUPTOOLS_NAME)
	${AMTAR} xzf $<
	export PATH=$(bindir):$$PATH && \
        export LD_LIBRARY_PATH="$(DESTDIR)$(libdir):${LD_LIBRARY_PATH}" && \
        cd $(SETUPTOOLS_NAME) && \
        $(PYTHON) setup.py install && exit 0; exit 1
	rm -rf $(SETUPTOOLS_NAME)
	touch $(SETUPTOOLS_TARGET)
	@echo "========================== Done building setuptools"

# ========================================================================
# Build nose

NOSE_NAME = nose-1.1.2
NOSE_TARGET = $(DESTDIR)$(bindir)/nosetests

BUILT_SOURCES += $(NOSE_TARGET)

$(NOSE_TARGET): $(srcapyexternal)/$(NOSE_NAME).tar.gz \
   $(PYTHON_TARGET) $(SETUPTOOLS_TARGET)
	@echo "*************************** Building nose"
	-rm -rf $(NOSE_NAME)
	${AMTAR} xzf $<
	export PATH=$(bindir):$$PATH && \
        export LD_LIBRARY_PATH="$(DESTDIR)$(libdir):${LD_LIBRARY_PATH}" && \
        cd $(NOSE_NAME) && \
        $(PYTHON) setup.py install && exit 0; exit 1
	rm -rf $(NOSE_NAME)
	touch $(NOSE_TARGET)
	@echo "========================== Done building nose"


# ========================================================================
# Build docutils

DOCUTILS_NAME = docutils-0.8.1
DOCUTILS_TARGET = $(DESTDIR)$(pythondir)/docutils/__init__.py

$(DOCUTILS_TARGET): $(srcapyexternal)/$(DOCUTILS_NAME).tar.gz \
   $(PYTHON_TARGET) $(SETUPTOOLS_TARGET)
	@echo "*************************** Building docutils"
	-rm -rf $(DOCUTILS_NAME)
	${AMTAR} xzf $<
	export PATH=$(bindir):$$PATH && \
        export LD_LIBRARY_PATH="$(DESTDIR)$(libdir):${LD_LIBRARY_PATH}" && \
        cd $(DOCUTILS_NAME) && \
        $(PYTHON) setup.py install --prefix $(prefix) && exit 0; exit 1
	rm -rf $(DOCUTILS_NAME)
	touch $(DOCUTILS_TARGET)
	@echo "========================== Done building docutils"

# ========================================================================
# Build pygments

PYGMENTS_NAME = Pygments-1.4
PYGMENTS_TARGET = $(DESTDIR)$(pythondir)/Pygments-1.4-py2.7.egg/pygments/__init__.py

$(PYGMENTS_TARGET): $(srcapyexternal)/$(PYGMENTS_NAME).tar.gz \
   $(PYTHON_TARGET) $(SETUPTOOLS_TARGET)
	@echo "*************************** Building pygments"
	-rm -rf $(PYGMENTS_NAME)
	${AMTAR} xzf $<
	export PATH=$(bindir):$$PATH && \
        export LD_LIBRARY_PATH="$(DESTDIR)$(libdir):${LD_LIBRARY_PATH}" && \
        cd $(PYGMENTS_NAME) && \
        $(PYTHON) setup.py install --prefix $(prefix) && exit 0; exit 1
	rm -rf $(PYGMENTS_NAME)
	touch $(PYGMENTS_TARGET)
	@echo "========================== Done building pygments"

# ========================================================================
# Build jinja

JINJA_NAME = Jinja2-2.6
JINJA_TARGET = $(DESTDIR)$(pythondir)/Jinja2-2.6-py2.7.egg/jinja2/__init__.py

$(JINJA_TARGET): $(srcapyexternal)/$(JINJA_NAME).tar.gz \
   $(PYTHON_TARGET) $(SETUPTOOLS_TARGET)
	@echo "*************************** Building jinja"
	-rm -rf $(JINJA_NAME)
	${AMTAR} xzf $<
	export PATH=$(bindir):$$PATH && \
        export LD_LIBRARY_PATH="$(DESTDIR)$(libdir):${LD_LIBRARY_PATH}" && \
        cd $(JINJA_NAME) && \
        $(PYTHON) setup.py install --prefix $(prefix) && exit 0; exit 1
	rm -rf $(JINJA_NAME)
	touch $(JINJA_TARGET)
	@echo "========================== Done building jinja"

# ========================================================================
# Build sphinx

SPHINX_NAME = Sphinx-1.1.2
SPHINX_TARGET = $(DESTDIR)$(bindir)/sphinx-build
BUILT_SOURCES += $(SPHINX_TARGET)

$(SPHINX_TARGET): $(srcapyexternal)/$(SPHINX_NAME).tar.gz \
   $(PYTHON_TARGET) $(DOCUTILS_TARGET) $(PYGMENTS_TARGET) $(JINJA_TARGET) \
   $(SETUPTOOLS_TARGET)
	@echo "*************************** Building sphinx"
	-rm -rf $(SPHINX_NAME)
	${AMTAR} xzf $<
	export PATH=$(bindir):$$PATH && \
        export LD_LIBRARY_PATH="$(DESTDIR)$(libdir):${LD_LIBRARY_PATH}" && \
        cd $(SPHINX_NAME) && \
        $(PYTHON) setup.py install --prefix $(prefix) && exit 0; exit 1
	rm -rf $(SPHINX_NAME)
	touch $(SPHINX_TARGET)
	@echo "========================== Done building sphinx"

# ========================================================================
# Build UFconfig library

UFCONFIG_NAME = ufconfig-3.7.0
UFCONFIG_TARGET = $(DESTDIR)$(includedir)/UFconfig.h

$(UFCONFIG_TARGET): $(srcapyexternal)/$(UFCONFIG_NAME).tar.gz
	@echo "*************************** Building UFconfig"
	-rm -rf UFconfig
	${AMTAR} xzf $<
	$(MKDIR_P) $(DESTDIR)$(includedir)
	$(MKDIR_P) $(DESTDIR)$(libdir)
	$(INSTALL_HEADER) UFconfig/UFconfig.h $(DESTDIR)$(includedir)
	cd UFconfig && \
        $(abs_builddir)/libtool --tag=CXX --mode=compile \
        $(CC) $(CFLAGS) -I$(DESTDIR)$(includedir) -c UFconfig.c; \
        $(abs_builddir)/libtool --tag=CXX --mode=link \
        $(CXXLD) $(CXXFLAGS) -rpath $(libdir) \
        -o libufconfig.la *.lo && \
        $(abs_builddir)/libtool --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) libufconfig.la $(DESTDIR)$(libdir) && exit 0; exit 1
	rm -rf UFconfig
	touch $(UFCONFIG_TARGET)
	@echo "========================== Done building UFconfig"

# ========================================================================
# Build amf library

AMD_NAME = amd-2.2.3
AMD_TARGET = $(DESTDIR)$(includedir)/amd.h

# This patch is generated a gentoo, and add standard autotools to this build
AMD_PATCH = amd-autotool.patch

$(AMD_TARGET): $(srcapyexternal)/$(AMD_NAME).tar.gz $(UFCONFIG_TARGET) $(srcapyexternal)/$(AMD_PATCH)
	@echo "*************************** Building amd"
	-rm -rf AMD
	${AMTAR} xzf $<
	cd AMD && \
        patch -p1 < $(abs_srcdir)/$(srcapyexternal)/$(AMD_PATCH) && \
        chmod +x ./configure && \
        ./configure --prefix=$(prefix) CC=$(CC) F77=$(F77) \
            CPPFLAGS="-I$(includedir)"&& \
        $(MAKE) && $(MAKE) -j 1 install && exit 0; exit 1
	-rm -rf AMD
	touch $(AMD_TARGET)
	@echo "========================== Done building amd"

# ========================================================================
# Build umfpack

UMFPACK_NAME = umfpack-5.5.2
UMFPACK_TARGET = $(DESTDIR)$(includedir)/umfpack.h

# This patch is generated a gentoo, and add standard autotools to this build
UMFPACK_PATCH = umfpack-autotool.patch

$(UMFPACK_TARGET): $(srcapyexternal)/$(UMFPACK_NAME).tar.gz libfblas.la $(AMD_TARGET) $(srcapyexternal)/$(UMFPACK_PATCH)
	@echo "*************************** Building umfpack"
	$(MAKE) $(FBLAS_TARGET) 
	-rm -rf UMFPACK
	${AMTAR} xzf $<
	cd UMFPACK && \
        patch -p1 < $(abs_srcdir)/$(srcapyexternal)/$(UMFPACK_PATCH) && \
        chmod +x ./configure && \
	export PATH=$(bindir):$$PATH && \
        export LD_LIBRARY_PATH="$(DESTDIR)$(libdir):${LD_LIBRARY_PATH}" && \
        export BLAS_LIBS="-L$(libdir) -lfblas" && \
        ./configure --prefix=$(prefix) \
        --without-cholmod CC=$(CC) F77=$(F77) \
        LDFLAGS="-L$(libdir)" \
        CPPFLAGS="-I$(includedir)" && \
        $(MAKE) && $(MAKE) -j 1 install && exit 0; exit 1
	-rm -rf UMFPACK
	touch $(UMFPACK_TARGET)
	@echo "========================== Done building umfpack"

# ========================================================================
# Build h5py
H5PY_NAME = h5py-2.0.1
H5PY_TARGET = $(DESTDIR)$(pythondir)/h5py/__init__.py

BUILT_SOURCES += $(H5PY_TARGET)

$(H5PY_TARGET): $(srcapyexternal)/$(H5PY_NAME).tar.gz \
   $(PYTHON_TARGET) $(NUMERIC_TARGET) $(HDF5_TARGET)
	@echo "*************************** Building h5py"
	-rm -rf $(H5PY_NAME)
	${AMTAR} xzf $<
	export PATH=$(bindir):$$PATH && \
        export LD_LIBRARY_PATH="$(DESTDIR)$(libdir):${LD_LIBRARY_PATH}" && \
        cd $(H5PY_NAME) && python setup.py build --hdf5=$(prefix) && \
        $(PYTHON) setup.py install --prefix $(prefix) && exit 0; exit 1
	rm -rf $(H5PY_NAME)
	touch $(H5PY_TARGET)
	@echo "========================== Done building h5py"

