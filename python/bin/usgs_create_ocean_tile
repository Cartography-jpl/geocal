#! /usr/bin/env python
#
# This creates a USGS DEM tile that has a height relative to the datum
# of 0 everywhere, i.e., an ocean tile.

import geocal
import re
import numpy as np

version = "March 9, 2015"
usage='''Usage: 
  usgs_create_ocean_tile [options] <tile_coordinate>
  usgs_create_ocean_tile -h | --help
  usgs_create_ocean_tile -v | --version

This creates a USGS DEM tile that has a height relative to the datum
of 0 everywhere, i.e., an ocean tile. The tile coordinate should be 
in the same format at the USGS tiles, e.g, "n33w135".

Options:
  -h --help         
       Print this message

  -v --version      
       Print program version
'''

args = geocal.docopt_simple(usage, version=version)

# Get the upper left corner. Note that there is actually 6 pixel border around
# this, but we start initially with this value.
m = re.match(r'([ns])(\d+)([ew])(\d+)',args.tile_coordinate)
if(not m):
    raise RuntimeError("Coordinate is not in the right format. Should be like 'n35w120' or 's34e23'")
lat = int(m.group(2))
if(m.group(1) == 's'):
    lat = -lat
lon = int(m.group(4))
if(m.group(3) == 'w'):
    lon = -lon

# We just looked at one of the tile to get this full coordinate system
ogr = geocal.OgrWrapper('GEOGCS["NAD83",DATUM["North_American_Datum_1983",SPHEROID["unretrievable - using WGS84",6378137,298.257223563,AUTHORITY["EPSG","7019"]],AUTHORITY["EPSG","6269"]],PRIMEM["Greenwich",0],UNIT["degree",0.0174532925199433],AUTHORITY["EPSG","4269"]]')
cconv = geocal.OgrCoordinateConverter(ogr)

# Create the mapinfo that goes with this set
minfo = geocal.MapInfo(cconv, lon, lat, lon + 1, lat-1, 10800, 10800)
# Add border
minfo = minfo.subset(-6,-6,10812,10812)
f = geocal.GdalRasterImage("%s_10m.tif" % args.tile_coordinate, "gtiff", minfo, 1, 
                    geocal.GdalRasterImage.Int16, "COMPRESS=LZW")
f.write(0, 0, np.zeros((10812,10812), dtype=np.int16))
