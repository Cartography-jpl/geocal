# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _vicar_lite_file

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _vicar_lite_file.SWIG_PyInstanceMethod_New
_swig_new_static_method = _vicar_lite_file.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _vicar_lite_file.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vicar_lite_file.delete_SwigPyIterator
    value = _swig_new_instance_method(_vicar_lite_file.SwigPyIterator_value)
    incr = _swig_new_instance_method(_vicar_lite_file.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_vicar_lite_file.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_vicar_lite_file.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_vicar_lite_file.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_vicar_lite_file.SwigPyIterator_copy)
    next = _swig_new_instance_method(_vicar_lite_file.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_vicar_lite_file.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_vicar_lite_file.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_vicar_lite_file.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_vicar_lite_file.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_vicar_lite_file.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_vicar_lite_file.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_vicar_lite_file.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_vicar_lite_file.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_vicar_lite_file.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _vicar_lite_file:
_vicar_lite_file.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _vicar_lite_file.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.raster_image
import geocal_swig.look_vector
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
import geocal_swig.dem_map_info
class VicarLiteFile(geocal_swig.generic_object.GenericObject):
    r"""

    This handles opening and closing a Vicar file.

    This class doesn't actually read and write data, but is used by other
    classes which do.

    This class is a simple implementation of Vicar. It doesn't use the
    Vicar RTL library, which is the primary attraction of it. We can use
    this to read Vicar files in a context where we don't want to use the
    RTL library, or don't want to be constrained to running in the Vicar
    environment.

    This class does not handle new VICAR features such as compression.

    C++ includes: vicar_lite_file.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    VICAR_BYTE = _vicar_lite_file.VicarLiteFile_VICAR_BYTE
    VICAR_HALF = _vicar_lite_file.VicarLiteFile_VICAR_HALF
    VICAR_FULL = _vicar_lite_file.VicarLiteFile_VICAR_FULL
    VICAR_FLOAT = _vicar_lite_file.VicarLiteFile_VICAR_FLOAT
    VICAR_DOUBLE = _vicar_lite_file.VicarLiteFile_VICAR_DOUBLE
    READ = _vicar_lite_file.VicarLiteFile_READ
    WRITE = _vicar_lite_file.VicarLiteFile_WRITE
    UPDATE = _vicar_lite_file.VicarLiteFile_UPDATE

    def __init__(self, *args):
        r"""

        GeoCal::VicarLiteFile::VicarLiteFile(const std::string &Fname, int Number_line, int Number_sample, const
        std::string &Type="BYTE")
        GeoCal::VicarLiteFile::VicarLiteFile
        """
        _vicar_lite_file.VicarLiteFile_swiginit(self, _vicar_lite_file.new_VicarLiteFile(*args))
    __swig_destroy__ = _vicar_lite_file.delete_VicarLiteFile
    _v_access = _swig_new_instance_method(_vicar_lite_file.VicarLiteFile__v_access)

    @property
    def access(self):
        return self._v_access()

    _v_force_area_pixel = _swig_new_instance_method(_vicar_lite_file.VicarLiteFile__v_force_area_pixel)

    @property
    def force_area_pixel(self):
        return self._v_force_area_pixel()

    _v_data_offset = _swig_new_instance_method(_vicar_lite_file.VicarLiteFile__v_data_offset)

    @property
    def data_offset(self):
        return self._v_data_offset()

    _v_file_name = _swig_new_instance_method(_vicar_lite_file.VicarLiteFile__v_file_name)

    @property
    def file_name(self):
        return self._v_file_name()

    is_vicar_file = _swig_new_static_method(_vicar_lite_file.VicarLiteFile_is_vicar_file)
    _v_has_igc_glas_gfm = _swig_new_instance_method(_vicar_lite_file.VicarLiteFile__v_has_igc_glas_gfm)

    @property
    def has_igc_glas_gfm(self):
        return self._v_has_igc_glas_gfm()

    _v_igc_glas_gfm = _swig_new_instance_method(_vicar_lite_file.VicarLiteFile__v_igc_glas_gfm)

    @property
    def igc_glas_gfm(self):
        return self._v_igc_glas_gfm()

    _v_number_line = _swig_new_instance_method(_vicar_lite_file.VicarLiteFile__v_number_line)

    @property
    def number_line(self):
        return self._v_number_line()

    _v_number_sample = _swig_new_instance_method(_vicar_lite_file.VicarLiteFile__v_number_sample)

    @property
    def number_sample(self):
        return self._v_number_sample()

    _v_number_band = _swig_new_instance_method(_vicar_lite_file.VicarLiteFile__v_number_band)

    @property
    def number_band(self):
        return self._v_number_band()

    _v_number_line_binary = _swig_new_instance_method(_vicar_lite_file.VicarLiteFile__v_number_line_binary)

    @property
    def number_line_binary(self):
        return self._v_number_line_binary()

    _v_number_byte_binary = _swig_new_instance_method(_vicar_lite_file.VicarLiteFile__v_number_byte_binary)

    @property
    def number_byte_binary(self):
        return self._v_number_byte_binary()

    _v_type = _swig_new_instance_method(_vicar_lite_file.VicarLiteFile__v_type)

    @property
    def type(self):
        return self._v_type()

    _v_map_info = _swig_new_instance_method(_vicar_lite_file.VicarLiteFile__v_map_info)

    @property
    def map_info(self):
        return self._v_map_info()

    @map_info.setter
    def map_info(self, value):
      self._v_map_info(value)

    _v_rpc = _swig_new_instance_method(_vicar_lite_file.VicarLiteFile__v_rpc)

    @property
    def rpc(self):
        return self._v_rpc()

    @rpc.setter
    def rpc(self, value):
      self._v_rpc(value)

    _v_rsm = _swig_new_instance_method(_vicar_lite_file.VicarLiteFile__v_rsm)

    @property
    def rsm(self):
        return self._v_rsm()

    @rsm.setter
    def rsm(self, value):
      self._v_rsm(value)

    __str__ = _swig_new_instance_method(_vicar_lite_file.VicarLiteFile___str__)
    _v_is_compressed = _swig_new_instance_method(_vicar_lite_file.VicarLiteFile__v_is_compressed)

    @property
    def is_compressed(self):
        return self._v_is_compressed()

    label_string = _swig_new_instance_method(_vicar_lite_file.VicarLiteFile_label_string)
    label_list = _swig_new_instance_method(_vicar_lite_file.VicarLiteFile_label_list)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)


# Register VicarLiteFile in _vicar_lite_file:
_vicar_lite_file.VicarLiteFile_swigregister(VicarLiteFile)
class VicarLiteRasterImage(geocal_swig.raster_image.RasterImage):
    r"""

    This uses VicarLiteFile to implement a RasterImage.

    We use a VicarLiteFile to implement a RasterImage.

    C++ includes: vicar_lite_file.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::VicarLiteRasterImage::VicarLiteRasterImage(const std::string &Fname, int Band_id=1, access_type
        Access=VicarLiteFile::READ, int Number_tile_line=-1, int
        Number_tile_sample=-1, bool Force_area_pixel=false)
        GeoCal::VicarLiteRasterImage::VicarLiteRasterImage
        Constructor.
        The Force_area_pixel forces the file to be treated as "pixel as
        area" rather than "pixel as point". This is really just meant as a
        work around for the SRTM data, which incorrectly labels the data as
        "point" rather than "area". Since this is a 15 meter difference,
        it matters for many applications. Most users should just ignore this
        value. 
        """
        _vicar_lite_file.VicarLiteRasterImage_swiginit(self, _vicar_lite_file.new_VicarLiteRasterImage(*args))
    _v_file = _swig_new_instance_method(_vicar_lite_file.VicarLiteRasterImage__v_file)

    @property
    def file(self):
        return self._v_file()

    _v_is_compressed = _swig_new_instance_method(_vicar_lite_file.VicarLiteRasterImage__v_is_compressed)

    @property
    def is_compressed(self):
        return self._v_is_compressed()

    _v_band_id = _swig_new_instance_method(_vicar_lite_file.VicarLiteRasterImage__v_band_id)

    @property
    def band_id(self):
        return self._v_band_id()

    _v_force_map_info = _swig_new_instance_method(_vicar_lite_file.VicarLiteRasterImage__v_force_map_info)

    @property
    def force_map_info(self):
        return self._v_force_map_info()

    _v_has_igc_glas_gfm = _swig_new_instance_method(_vicar_lite_file.VicarLiteRasterImage__v_has_igc_glas_gfm)

    @property
    def has_igc_glas_gfm(self):
        return self._v_has_igc_glas_gfm()

    _v_igc_glas_gfm = _swig_new_instance_method(_vicar_lite_file.VicarLiteRasterImage__v_igc_glas_gfm)

    @property
    def igc_glas_gfm(self):
        return self._v_igc_glas_gfm()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _vicar_lite_file.delete_VicarLiteRasterImage

# Register VicarLiteRasterImage in _vicar_lite_file:
_vicar_lite_file.VicarLiteRasterImage_swigregister(VicarLiteRasterImage)
class VicarLiteDem(geocal_swig.dem_map_info.DemMapInfo):
    r"""

    This uses VicarLiteFile to implement a Dem.

    We use VicarLiteFile to implement a Dem

    C++ includes: vicar_lite_file.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::VicarLiteDem::VicarLiteDem(const std::string &Fname, bool Outside_dem_is_error=false, const
        boost::shared_ptr< Datum > &D=boost::shared_ptr< Datum >(new
        NoDatum()), int Band_id=1)
        GeoCal::VicarLiteDem::VicarLiteDem
        Constructor.
        If Outside_dem_is_error is true, then calls for Dem data outside of
        the range of the Dem cause an exception to be thrown, otherwise we
        just return a height of 0.

        Probably should have the Naif_code stored as metadata in the file, but
        for now we just explicitly pass this in. 
        """
        _vicar_lite_file.VicarLiteDem_swiginit(self, _vicar_lite_file.new_VicarLiteDem(*args))
    _v_file = _swig_new_instance_method(_vicar_lite_file.VicarLiteDem__v_file)

    @property
    def file(self):
        return self._v_file()

    elevation = _swig_new_instance_method(_vicar_lite_file.VicarLiteDem_elevation)
    _v_band = _swig_new_instance_method(_vicar_lite_file.VicarLiteDem__v_band)

    @property
    def band(self):
        return self._v_band()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _vicar_lite_file.delete_VicarLiteDem

# Register VicarLiteDem in _vicar_lite_file:
_vicar_lite_file.VicarLiteDem_swigregister(VicarLiteDem)

__all__ = ["VicarLiteFile","VicarLiteRasterImage","VicarLiteDem"]


