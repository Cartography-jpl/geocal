#! /usr/bin/env python
#
# This creates a IgcCollection that uses GDAL data files for the DEM, 
# image, and RPC.
from afids import *
from optparse import OptionParser
from itertools import izip

def pairwise(t):
    '''This goes through a iterator in pairs'''
    it = iter(t)
    return izip(it,it)

parser = OptionParser(version="%prog August 13, 2012",
usage="""usage: %prog [options] output [dem] image_1 title_1 image_2 title_2 ...

This creates a sqlite shelve object that holds a IgcCollection. The
output should be in "file:key" format, e.g., "my_data.db:igc". Each
of the images should also have a title which can be used when plotting
etc.

We check first if the data is actually a VICAR file, and if so we use
the VICAR interface rather than the GDAL interface. For VICAR files, this
tends to be more efficient.
""")
parser.add_option("--srtm",
                  dest="srtm", default=False,
                  action="store_true",
                  help="Use SRTM as the dem")
parser.add_option("--rpc_line_fit", dest="rpc_line_fit",
                  default="",
                  help="A comma separated list of 0 based parameters that we should set a being able to be fit (e.g., \"0,1,3\"). This assumes we want to fit the same values for each of the ImageGroundConnection, which is usually the case. We could create a more specific way to specify this for each ImageGroundConnection if we need to. Default is to fit nothing.")
parser.add_option("--rpc_sample_fit", dest="rpc_sample_fit",
                  default="",
                  help="A comma separated list of 0 based parameters that we should set a being able to be fit (e.g., \"0,1,3\"). This assumes we want to fit the same values for each of the ImageGroundConnection, which is usually the case. We could create a more specific way to specify this for each ImageGroundConnection if we need to. Default is to fit nothing.")

# Parse command line arguments
(options, args) = parser.parse_args()

line_fit = []
for i in options.rpc_line_fit.split(','):
    if(i != ''):
        line_fit.append(int(i))
sample_fit = []
for i in options.rpc_line_fit.split(','):
    if(i != ''):
        sample_fit.append(int(i))

out = args.pop(0)
if(options.srtm):
    dem = SrtmDem()
else:
    demfname = args.pop(0)
    if VicarFile.is_vicar_file(demfname):
        dem = VicarLiteDem(demfname, True)
    else:
        dem = GdalDem(args.pop(0), NoDatum(), 1, True)

igc_coll = IgcArray()
for fname, title in pairwise(args):
    if VicarFile.is_vicar_file(fname):
        t = VicarImageGroundConnection(fname, dem, title=title)
    else:
        t = GdalImageGroundConnection(fname, dem, title=title)
    for i in range(20):
        t.rpc.fit_line_numerator[i] = False
        t.rpc.fit_sample_numerator[i] = False
    for i in line_fit:
        t.rpc.fit_line_numerator[i] = True
    for i in sample_fit:
        t.rpc.fit_sample_numerator[i] = True
    igc_coll.igc.append(t)
igc_coll.parameter_subset_mask = [True] * len(igc_coll.parameter)

write_shelve(out, igc_coll)

