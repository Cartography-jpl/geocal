# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _cart_lab_multifile

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _cart_lab_multifile.SWIG_PyInstanceMethod_New
_swig_new_static_method = _cart_lab_multifile.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _cart_lab_multifile.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cart_lab_multifile.delete_SwigPyIterator
    value = _swig_new_instance_method(_cart_lab_multifile.SwigPyIterator_value)
    incr = _swig_new_instance_method(_cart_lab_multifile.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_cart_lab_multifile.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_cart_lab_multifile.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_cart_lab_multifile.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_cart_lab_multifile.SwigPyIterator_copy)
    next = _swig_new_instance_method(_cart_lab_multifile.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_cart_lab_multifile.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_cart_lab_multifile.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_cart_lab_multifile.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_cart_lab_multifile.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_cart_lab_multifile.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_cart_lab_multifile.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_cart_lab_multifile.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_cart_lab_multifile.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_cart_lab_multifile.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _cart_lab_multifile:
_cart_lab_multifile.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _cart_lab_multifile.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.raster_multifile
import geocal_swig.raster_image_variable
import geocal_swig.raster_image
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class CartLabMultifile(geocal_swig.raster_multifile.RasterMultifile):
    r"""

    There are 2 kinds of multi-file databases that the cartlab produces.

    The first uses an IBIS file to describe the file structure, this is
    used by for example SrtmDem. This is handled by the class
    VicarMultiFile.

    The other uses a naming convention, with fixed size tiles in each
    file. Examples are the Landsat 7 data, or the USGS DEM. This class
    provides support for the common behavior of these types of databases.
    For right now we assume that the data needs to be read by GDAL (so the
    data is not VICAR format, but something like geotiff). We could relax
    that if needed.

    The file names are always of the form "n66e130_<extension>" or
    "s9w62_<extension>". The coordinates in the name give something
    close to the upper left corner of the tile covered by the at file. In
    general this won't be the exact upper left corner, there may be some
    offset or border added to the files (this varies from dataset to
    dataset). Derived classes should fill in a "reference map info",
    which is just the coordinates for a particular file (e.g., use
    gdalinfo to find the information). We then determine the map info for
    every other file by finding the offset relative to this reference map
    info. We do this by the naming convention rather than just reading
    each file and getting the map info metadata because it is much
    quicker. See for example UsgsDem for an example of filling in this
    information.

    Note that some databases have 0 padding in the file name (e.g, USGS
    DEM has files like "n47w087_10m.tif"). While others don't (e.g.,
    SRTM has file names like "n47w87_L2.hlf"). Either naming convention
    works with this file, we actually build up the files by reading the
    directory.

    C++ includes: cart_lab_multifile.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    create_subset_file = _swig_new_instance_method(_cart_lab_multifile.CartLabMultifile_create_subset_file)
    set_tile_size = _swig_new_instance_method(_cart_lab_multifile.CartLabMultifile_set_tile_size)
    _v_directory_base = _swig_new_instance_method(_cart_lab_multifile.CartLabMultifile__v_directory_base)

    @property
    def directory_base(self):
        return self._v_directory_base()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _cart_lab_multifile.delete_CartLabMultifile

# Register CartLabMultifile in _cart_lab_multifile:
_cart_lab_multifile.CartLabMultifile_swigregister(CartLabMultifile)
class GdalCartLabMultifile(CartLabMultifile):
    r"""

    This is a CartLabMultifile where we use GDAL to read each of the
    tiles, e.g., the tiles are geotiff files.

    C++ includes: cart_lab_multifile.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _cart_lab_multifile.delete_GdalCartLabMultifile

# Register GdalCartLabMultifile in _cart_lab_multifile:
_cart_lab_multifile.GdalCartLabMultifile_swigregister(GdalCartLabMultifile)
class VicarCartLabMultifile(CartLabMultifile):
    r"""

    This is a CartLabMultifile where we use Vicar to read each of the
    tiles.

    If desired we can favor doing memory mapping when possible rather than
    using the VICAR RTL (i.e., we use VicarLiteRasterImage).

    The force_area_pixel_ forces the files to be treated as "pixel as
    area" rather than "pixel as point". This is really just meant as a
    work around for the SRTM data, which incorrectly labels the data as
    "point" rather than "area". Since this is a 15 meter difference,
    it matters for many applications. Most users should just ignore this
    value.

    C++ includes: cart_lab_multifile.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _cart_lab_multifile.delete_VicarCartLabMultifile

# Register VicarCartLabMultifile in _cart_lab_multifile:
_cart_lab_multifile.VicarCartLabMultifile_swigregister(VicarCartLabMultifile)
class VicarCartLabMultifileSetup(CartLabMultifile):
    r"""

    For some one off sort of files sets, it can be useful to just fill in
    the loc_to_file stuff directly (e.g.

    with python). This supports that, it allows everything to be set up.

    C++ includes: cart_lab_multifile.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Minfo, Number_line_per_tile=100, Number_sample_per_tile=-1, Number_tile_each_file=4, Number_tile=4, Favor_memory_mapped=True, No_coverage_is_error=True, No_coverage_fill_value=-1, Force_area_pixel=False):
        r"""

        GeoCal::VicarCartLabMultifileSetup::VicarCartLabMultifileSetup(const boost::shared_ptr< MapInfo > Minfo, int
        Number_line_per_tile=100, int Number_sample_per_tile=-1, int
        Number_tile_each_file=4, int Number_tile=4, bool
        Favor_memory_mapped=true, bool No_coverage_is_error=true, int
        No_coverage_fill_value=-1, bool Force_area_pixel=false)
        GeoCal::VicarCartLabMultifileSetup::VicarCartLabMultifileSetup
        """
        _cart_lab_multifile.VicarCartLabMultifileSetup_swiginit(self, _cart_lab_multifile.new_VicarCartLabMultifileSetup(Minfo, Number_line_per_tile, Number_sample_per_tile, Number_tile_each_file, Number_tile, Favor_memory_mapped, No_coverage_is_error, No_coverage_fill_value, Force_area_pixel))
    file_add = _swig_new_instance_method(_cart_lab_multifile.VicarCartLabMultifileSetup_file_add)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _cart_lab_multifile.delete_VicarCartLabMultifileSetup

# Register VicarCartLabMultifileSetup in _cart_lab_multifile:
_cart_lab_multifile.VicarCartLabMultifileSetup_swigregister(VicarCartLabMultifileSetup)

__all__ = ["CartLabMultifile","GdalCartLabMultifile","VicarCartLabMultifile","VicarCartLabMultifileSetup"]


