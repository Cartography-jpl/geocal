#! /usr/bin/env python
#
# This creates a IgcCollection that uses GDAL data files for the DEM, 
# image, and RPC.
from afids import *

version = "February 4, 2013"
usage='''Usage: 
  create_gdal_igc [options] <output> [--srtm | <dem>] 
      <image> <title> [(<image> <title>)...]
  create_gdal_igc -h | --help
  create_gdal_igc -v | --version

This creates a sqlite shelve object that holds a IgcCollection. The
output should be in "file:key" format, e.g., "my_data.db:igc". Each
of the images should also have a title which can be used when plotting
etc.

We check first if the data is actually a VICAR file, and if so we use
the VICAR interface rather than the GDAL interface. For VICAR files, this
tends to be more efficient.

Options:
  -h --help         
       Print this message

  --rpc-line-fit=list
       A comma separated list of 0 based parameters that we should set
       a being able to be fit (e.g., "0,1,3"). This assumes we want
       to fit the same values for each of the ImageGroundConnection,
       which is usually the case. We could create a more specific way
       to specify this for each ImageGroundConnection if we need
       to. [default: ]

  --rpc-sample-fit=list
       A comma separated list of 0 based parameters that we should set
       a being able to be fit (e.g., "0,1,3"). This assumes we want
       to fit the same values for each of the ImageGroundConnection,
       which is usually the case. We could create a more specific way
       to specify this for each ImageGroundConnection if we need
       to. [default: ]

   --srtm 
       Use the SRTM rather than supplying a DEM file.

  -v --version      
       Print program version
'''
# Parse command line arguments
args = docopt_simple(usage, version=version)

line_fit = []
for i in str(args.rpc_line_fit).split(','):
    if(i != ''):
        line_fit.append(int(i))
sample_fit = []
for i in str(args.rpc_sample_fit).split(','):
    if(i != ''):
        sample_fit.append(int(i))

if(args.srtm):
    dem = SrtmDem()
else:
    if VicarFile.is_vicar_file(args.dem):
        dem = VicarLiteDem(args.dem, True)
    else:
        dem = GdalDem(args.dem, NoDatum(), 1, True)

igc_coll = IgcArray()
for i in range(len(args.image)):
    if VicarFile.is_vicar_file(args.image[i]):
        t = VicarImageGroundConnection(args.image[i], dem, title=args.title[i])
    else:
        t = GdalImageGroundConnection(args.image[i], dem, title=args.title[i])
    for i in range(20):
        t.rpc.fit_line_numerator[i] = False
        t.rpc.fit_sample_numerator[i] = False
    for i in line_fit:
        t.rpc.fit_line_numerator[i] = True
    for i in sample_fit:
        t.rpc.fit_sample_numerator[i] = True
    igc_coll.igc.append(t)
igc_coll.parameter_subset_mask = [True] * len(igc_coll.parameter)

write_shelve(args.output, igc_coll)

