# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _swig_std

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _swig_std.SWIG_PyInstanceMethod_New
_swig_new_static_method = _swig_std.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _swig_std.delete_SwigPyIterator
    value = _swig_new_instance_method(_swig_std.SwigPyIterator_value)
    incr = _swig_new_instance_method(_swig_std.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_swig_std.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_swig_std.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_swig_std.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_swig_std.SwigPyIterator_copy)
    next = _swig_new_instance_method(_swig_std.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_swig_std.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_swig_std.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_swig_std.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_swig_std.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_swig_std.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_swig_std.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_swig_std.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_swig_std.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_swig_std.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _swig_std:
_swig_std.SwigPyIterator_swigregister(SwigPyIterator)
class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _swig_std.ios_base_erase_event
    imbue_event = _swig_std.ios_base_imbue_event
    copyfmt_event = _swig_std.ios_base_copyfmt_event
    register_callback = _swig_new_instance_method(_swig_std.ios_base_register_callback)
    flags = _swig_new_instance_method(_swig_std.ios_base_flags)
    setf = _swig_new_instance_method(_swig_std.ios_base_setf)
    unsetf = _swig_new_instance_method(_swig_std.ios_base_unsetf)
    precision = _swig_new_instance_method(_swig_std.ios_base_precision)
    width = _swig_new_instance_method(_swig_std.ios_base_width)
    sync_with_stdio = _swig_new_static_method(_swig_std.ios_base_sync_with_stdio)
    imbue = _swig_new_instance_method(_swig_std.ios_base_imbue)
    getloc = _swig_new_instance_method(_swig_std.ios_base_getloc)
    xalloc = _swig_new_static_method(_swig_std.ios_base_xalloc)
    iword = _swig_new_instance_method(_swig_std.ios_base_iword)
    pword = _swig_new_instance_method(_swig_std.ios_base_pword)
    __swig_destroy__ = _swig_std.delete_ios_base

# Register ios_base in _swig_std:
_swig_std.ios_base_swigregister(ios_base)
cvar = _swig_std.cvar
ios_base.boolalpha = _swig_std.cvar.ios_base_boolalpha
ios_base.dec = _swig_std.cvar.ios_base_dec
ios_base.fixed = _swig_std.cvar.ios_base_fixed
ios_base.hex = _swig_std.cvar.ios_base_hex
ios_base.internal = _swig_std.cvar.ios_base_internal
ios_base.left = _swig_std.cvar.ios_base_left
ios_base.oct = _swig_std.cvar.ios_base_oct
ios_base.right = _swig_std.cvar.ios_base_right
ios_base.scientific = _swig_std.cvar.ios_base_scientific
ios_base.showbase = _swig_std.cvar.ios_base_showbase
ios_base.showpoint = _swig_std.cvar.ios_base_showpoint
ios_base.showpos = _swig_std.cvar.ios_base_showpos
ios_base.skipws = _swig_std.cvar.ios_base_skipws
ios_base.unitbuf = _swig_std.cvar.ios_base_unitbuf
ios_base.uppercase = _swig_std.cvar.ios_base_uppercase
ios_base.adjustfield = _swig_std.cvar.ios_base_adjustfield
ios_base.basefield = _swig_std.cvar.ios_base_basefield
ios_base.floatfield = _swig_std.cvar.ios_base_floatfield
ios_base.badbit = _swig_std.cvar.ios_base_badbit
ios_base.eofbit = _swig_std.cvar.ios_base_eofbit
ios_base.failbit = _swig_std.cvar.ios_base_failbit
ios_base.goodbit = _swig_std.cvar.ios_base_goodbit
ios_base.app = _swig_std.cvar.ios_base_app
ios_base.ate = _swig_std.cvar.ios_base_ate
ios_base.binary = _swig_std.cvar.ios_base_binary
ios_base.ios_base_in = _swig_std.cvar.ios_base_ios_base_in
ios_base.out = _swig_std.cvar.ios_base_out
ios_base.trunc = _swig_std.cvar.ios_base_trunc
ios_base.beg = _swig_std.cvar.ios_base_beg
ios_base.cur = _swig_std.cvar.ios_base_cur
ios_base.end = _swig_std.cvar.ios_base_end

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rdstate = _swig_new_instance_method(_swig_std.ios_rdstate)
    clear = _swig_new_instance_method(_swig_std.ios_clear)
    setstate = _swig_new_instance_method(_swig_std.ios_setstate)
    good = _swig_new_instance_method(_swig_std.ios_good)
    eof = _swig_new_instance_method(_swig_std.ios_eof)
    fail = _swig_new_instance_method(_swig_std.ios_fail)
    bad = _swig_new_instance_method(_swig_std.ios_bad)
    exceptions = _swig_new_instance_method(_swig_std.ios_exceptions)

    def __init__(self, __sb):
        _swig_std.ios_swiginit(self, _swig_std.new_ios(__sb))
    __swig_destroy__ = _swig_std.delete_ios
    tie = _swig_new_instance_method(_swig_std.ios_tie)
    rdbuf = _swig_new_instance_method(_swig_std.ios_rdbuf)
    copyfmt = _swig_new_instance_method(_swig_std.ios_copyfmt)
    fill = _swig_new_instance_method(_swig_std.ios_fill)
    imbue = _swig_new_instance_method(_swig_std.ios_imbue)
    narrow = _swig_new_instance_method(_swig_std.ios_narrow)
    widen = _swig_new_instance_method(_swig_std.ios_widen)

# Register ios in _swig_std:
_swig_std.ios_swigregister(ios)
class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _swig_std.ostream_swiginit(self, _swig_std.new_ostream(__sb))
    __swig_destroy__ = _swig_std.delete_ostream
    __lshift__ = _swig_new_instance_method(_swig_std.ostream___lshift__)
    put = _swig_new_instance_method(_swig_std.ostream_put)
    write = _swig_new_instance_method(_swig_std.ostream_write)
    flush = _swig_new_instance_method(_swig_std.ostream_flush)
    tellp = _swig_new_instance_method(_swig_std.ostream_tellp)
    seekp = _swig_new_instance_method(_swig_std.ostream_seekp)

# Register ostream in _swig_std:
_swig_std.ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _swig_std.istream_swiginit(self, _swig_std.new_istream(__sb))
    __swig_destroy__ = _swig_std.delete_istream
    __rshift__ = _swig_new_instance_method(_swig_std.istream___rshift__)
    gcount = _swig_new_instance_method(_swig_std.istream_gcount)
    get = _swig_new_instance_method(_swig_std.istream_get)
    getline = _swig_new_instance_method(_swig_std.istream_getline)
    ignore = _swig_new_instance_method(_swig_std.istream_ignore)
    peek = _swig_new_instance_method(_swig_std.istream_peek)
    read = _swig_new_instance_method(_swig_std.istream_read)
    readsome = _swig_new_instance_method(_swig_std.istream_readsome)
    putback = _swig_new_instance_method(_swig_std.istream_putback)
    unget = _swig_new_instance_method(_swig_std.istream_unget)
    sync = _swig_new_instance_method(_swig_std.istream_sync)
    tellg = _swig_new_instance_method(_swig_std.istream_tellg)
    seekg = _swig_new_instance_method(_swig_std.istream_seekg)

# Register istream in _swig_std:
_swig_std.istream_swigregister(istream)
class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _swig_std.iostream_swiginit(self, _swig_std.new_iostream(__sb))
    __swig_destroy__ = _swig_std.delete_iostream

# Register iostream in _swig_std:
_swig_std.iostream_swigregister(iostream)
endl_cb_ptr = _swig_std.endl_cb_ptr
endl = _swig_std.endl
ends_cb_ptr = _swig_std.ends_cb_ptr
ends = _swig_std.ends
flush_cb_ptr = _swig_std.flush_cb_ptr
flush = _swig_std.flush
class vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_swig_std.vector_double_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_swig_std.vector_double___nonzero__)
    __bool__ = _swig_new_instance_method(_swig_std.vector_double___bool__)
    __len__ = _swig_new_instance_method(_swig_std.vector_double___len__)
    __getslice__ = _swig_new_instance_method(_swig_std.vector_double___getslice__)
    __setslice__ = _swig_new_instance_method(_swig_std.vector_double___setslice__)
    __delslice__ = _swig_new_instance_method(_swig_std.vector_double___delslice__)
    __delitem__ = _swig_new_instance_method(_swig_std.vector_double___delitem__)
    __getitem__ = _swig_new_instance_method(_swig_std.vector_double___getitem__)
    __setitem__ = _swig_new_instance_method(_swig_std.vector_double___setitem__)
    pop = _swig_new_instance_method(_swig_std.vector_double_pop)
    append = _swig_new_instance_method(_swig_std.vector_double_append)
    empty = _swig_new_instance_method(_swig_std.vector_double_empty)
    size = _swig_new_instance_method(_swig_std.vector_double_size)
    swap = _swig_new_instance_method(_swig_std.vector_double_swap)
    begin = _swig_new_instance_method(_swig_std.vector_double_begin)
    end = _swig_new_instance_method(_swig_std.vector_double_end)
    rbegin = _swig_new_instance_method(_swig_std.vector_double_rbegin)
    rend = _swig_new_instance_method(_swig_std.vector_double_rend)
    clear = _swig_new_instance_method(_swig_std.vector_double_clear)
    get_allocator = _swig_new_instance_method(_swig_std.vector_double_get_allocator)
    pop_back = _swig_new_instance_method(_swig_std.vector_double_pop_back)
    erase = _swig_new_instance_method(_swig_std.vector_double_erase)

    def __init__(self, *args):
        _swig_std.vector_double_swiginit(self, _swig_std.new_vector_double(*args))
    push_back = _swig_new_instance_method(_swig_std.vector_double_push_back)
    front = _swig_new_instance_method(_swig_std.vector_double_front)
    back = _swig_new_instance_method(_swig_std.vector_double_back)
    assign = _swig_new_instance_method(_swig_std.vector_double_assign)
    resize = _swig_new_instance_method(_swig_std.vector_double_resize)
    insert = _swig_new_instance_method(_swig_std.vector_double_insert)
    reserve = _swig_new_instance_method(_swig_std.vector_double_reserve)
    capacity = _swig_new_instance_method(_swig_std.vector_double_capacity)
    __swig_destroy__ = _swig_std.delete_vector_double

# Register vector_double in _swig_std:
_swig_std.vector_double_swigregister(vector_double)
class vector_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_swig_std.vector_string_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_swig_std.vector_string___nonzero__)
    __bool__ = _swig_new_instance_method(_swig_std.vector_string___bool__)
    __len__ = _swig_new_instance_method(_swig_std.vector_string___len__)
    __getslice__ = _swig_new_instance_method(_swig_std.vector_string___getslice__)
    __setslice__ = _swig_new_instance_method(_swig_std.vector_string___setslice__)
    __delslice__ = _swig_new_instance_method(_swig_std.vector_string___delslice__)
    __delitem__ = _swig_new_instance_method(_swig_std.vector_string___delitem__)
    __getitem__ = _swig_new_instance_method(_swig_std.vector_string___getitem__)
    __setitem__ = _swig_new_instance_method(_swig_std.vector_string___setitem__)
    pop = _swig_new_instance_method(_swig_std.vector_string_pop)
    append = _swig_new_instance_method(_swig_std.vector_string_append)
    empty = _swig_new_instance_method(_swig_std.vector_string_empty)
    size = _swig_new_instance_method(_swig_std.vector_string_size)
    swap = _swig_new_instance_method(_swig_std.vector_string_swap)
    begin = _swig_new_instance_method(_swig_std.vector_string_begin)
    end = _swig_new_instance_method(_swig_std.vector_string_end)
    rbegin = _swig_new_instance_method(_swig_std.vector_string_rbegin)
    rend = _swig_new_instance_method(_swig_std.vector_string_rend)
    clear = _swig_new_instance_method(_swig_std.vector_string_clear)
    get_allocator = _swig_new_instance_method(_swig_std.vector_string_get_allocator)
    pop_back = _swig_new_instance_method(_swig_std.vector_string_pop_back)
    erase = _swig_new_instance_method(_swig_std.vector_string_erase)

    def __init__(self, *args):
        _swig_std.vector_string_swiginit(self, _swig_std.new_vector_string(*args))
    push_back = _swig_new_instance_method(_swig_std.vector_string_push_back)
    front = _swig_new_instance_method(_swig_std.vector_string_front)
    back = _swig_new_instance_method(_swig_std.vector_string_back)
    assign = _swig_new_instance_method(_swig_std.vector_string_assign)
    resize = _swig_new_instance_method(_swig_std.vector_string_resize)
    insert = _swig_new_instance_method(_swig_std.vector_string_insert)
    reserve = _swig_new_instance_method(_swig_std.vector_string_reserve)
    capacity = _swig_new_instance_method(_swig_std.vector_string_capacity)
    __swig_destroy__ = _swig_std.delete_vector_string

# Register vector_string in _swig_std:
_swig_std.vector_string_swigregister(vector_string)
class vector_unsigned_char(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_swig_std.vector_unsigned_char_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_swig_std.vector_unsigned_char___nonzero__)
    __bool__ = _swig_new_instance_method(_swig_std.vector_unsigned_char___bool__)
    __len__ = _swig_new_instance_method(_swig_std.vector_unsigned_char___len__)
    __getslice__ = _swig_new_instance_method(_swig_std.vector_unsigned_char___getslice__)
    __setslice__ = _swig_new_instance_method(_swig_std.vector_unsigned_char___setslice__)
    __delslice__ = _swig_new_instance_method(_swig_std.vector_unsigned_char___delslice__)
    __delitem__ = _swig_new_instance_method(_swig_std.vector_unsigned_char___delitem__)
    __getitem__ = _swig_new_instance_method(_swig_std.vector_unsigned_char___getitem__)
    __setitem__ = _swig_new_instance_method(_swig_std.vector_unsigned_char___setitem__)
    pop = _swig_new_instance_method(_swig_std.vector_unsigned_char_pop)
    append = _swig_new_instance_method(_swig_std.vector_unsigned_char_append)
    empty = _swig_new_instance_method(_swig_std.vector_unsigned_char_empty)
    size = _swig_new_instance_method(_swig_std.vector_unsigned_char_size)
    swap = _swig_new_instance_method(_swig_std.vector_unsigned_char_swap)
    begin = _swig_new_instance_method(_swig_std.vector_unsigned_char_begin)
    end = _swig_new_instance_method(_swig_std.vector_unsigned_char_end)
    rbegin = _swig_new_instance_method(_swig_std.vector_unsigned_char_rbegin)
    rend = _swig_new_instance_method(_swig_std.vector_unsigned_char_rend)
    clear = _swig_new_instance_method(_swig_std.vector_unsigned_char_clear)
    get_allocator = _swig_new_instance_method(_swig_std.vector_unsigned_char_get_allocator)
    pop_back = _swig_new_instance_method(_swig_std.vector_unsigned_char_pop_back)
    erase = _swig_new_instance_method(_swig_std.vector_unsigned_char_erase)

    def __init__(self, *args):
        _swig_std.vector_unsigned_char_swiginit(self, _swig_std.new_vector_unsigned_char(*args))
    push_back = _swig_new_instance_method(_swig_std.vector_unsigned_char_push_back)
    front = _swig_new_instance_method(_swig_std.vector_unsigned_char_front)
    back = _swig_new_instance_method(_swig_std.vector_unsigned_char_back)
    assign = _swig_new_instance_method(_swig_std.vector_unsigned_char_assign)
    resize = _swig_new_instance_method(_swig_std.vector_unsigned_char_resize)
    insert = _swig_new_instance_method(_swig_std.vector_unsigned_char_insert)
    reserve = _swig_new_instance_method(_swig_std.vector_unsigned_char_reserve)
    capacity = _swig_new_instance_method(_swig_std.vector_unsigned_char_capacity)
    __swig_destroy__ = _swig_std.delete_vector_unsigned_char

# Register vector_unsigned_char in _swig_std:
_swig_std.vector_unsigned_char_swigregister(vector_unsigned_char)
class vector_short_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_swig_std.vector_short_int_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_swig_std.vector_short_int___nonzero__)
    __bool__ = _swig_new_instance_method(_swig_std.vector_short_int___bool__)
    __len__ = _swig_new_instance_method(_swig_std.vector_short_int___len__)
    __getslice__ = _swig_new_instance_method(_swig_std.vector_short_int___getslice__)
    __setslice__ = _swig_new_instance_method(_swig_std.vector_short_int___setslice__)
    __delslice__ = _swig_new_instance_method(_swig_std.vector_short_int___delslice__)
    __delitem__ = _swig_new_instance_method(_swig_std.vector_short_int___delitem__)
    __getitem__ = _swig_new_instance_method(_swig_std.vector_short_int___getitem__)
    __setitem__ = _swig_new_instance_method(_swig_std.vector_short_int___setitem__)
    pop = _swig_new_instance_method(_swig_std.vector_short_int_pop)
    append = _swig_new_instance_method(_swig_std.vector_short_int_append)
    empty = _swig_new_instance_method(_swig_std.vector_short_int_empty)
    size = _swig_new_instance_method(_swig_std.vector_short_int_size)
    swap = _swig_new_instance_method(_swig_std.vector_short_int_swap)
    begin = _swig_new_instance_method(_swig_std.vector_short_int_begin)
    end = _swig_new_instance_method(_swig_std.vector_short_int_end)
    rbegin = _swig_new_instance_method(_swig_std.vector_short_int_rbegin)
    rend = _swig_new_instance_method(_swig_std.vector_short_int_rend)
    clear = _swig_new_instance_method(_swig_std.vector_short_int_clear)
    get_allocator = _swig_new_instance_method(_swig_std.vector_short_int_get_allocator)
    pop_back = _swig_new_instance_method(_swig_std.vector_short_int_pop_back)
    erase = _swig_new_instance_method(_swig_std.vector_short_int_erase)

    def __init__(self, *args):
        _swig_std.vector_short_int_swiginit(self, _swig_std.new_vector_short_int(*args))
    push_back = _swig_new_instance_method(_swig_std.vector_short_int_push_back)
    front = _swig_new_instance_method(_swig_std.vector_short_int_front)
    back = _swig_new_instance_method(_swig_std.vector_short_int_back)
    assign = _swig_new_instance_method(_swig_std.vector_short_int_assign)
    resize = _swig_new_instance_method(_swig_std.vector_short_int_resize)
    insert = _swig_new_instance_method(_swig_std.vector_short_int_insert)
    reserve = _swig_new_instance_method(_swig_std.vector_short_int_reserve)
    capacity = _swig_new_instance_method(_swig_std.vector_short_int_capacity)
    __swig_destroy__ = _swig_std.delete_vector_short_int

# Register vector_short_int in _swig_std:
_swig_std.vector_short_int_swigregister(vector_short_int)
class vector_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_swig_std.vector_int_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_swig_std.vector_int___nonzero__)
    __bool__ = _swig_new_instance_method(_swig_std.vector_int___bool__)
    __len__ = _swig_new_instance_method(_swig_std.vector_int___len__)
    __getslice__ = _swig_new_instance_method(_swig_std.vector_int___getslice__)
    __setslice__ = _swig_new_instance_method(_swig_std.vector_int___setslice__)
    __delslice__ = _swig_new_instance_method(_swig_std.vector_int___delslice__)
    __delitem__ = _swig_new_instance_method(_swig_std.vector_int___delitem__)
    __getitem__ = _swig_new_instance_method(_swig_std.vector_int___getitem__)
    __setitem__ = _swig_new_instance_method(_swig_std.vector_int___setitem__)
    pop = _swig_new_instance_method(_swig_std.vector_int_pop)
    append = _swig_new_instance_method(_swig_std.vector_int_append)
    empty = _swig_new_instance_method(_swig_std.vector_int_empty)
    size = _swig_new_instance_method(_swig_std.vector_int_size)
    swap = _swig_new_instance_method(_swig_std.vector_int_swap)
    begin = _swig_new_instance_method(_swig_std.vector_int_begin)
    end = _swig_new_instance_method(_swig_std.vector_int_end)
    rbegin = _swig_new_instance_method(_swig_std.vector_int_rbegin)
    rend = _swig_new_instance_method(_swig_std.vector_int_rend)
    clear = _swig_new_instance_method(_swig_std.vector_int_clear)
    get_allocator = _swig_new_instance_method(_swig_std.vector_int_get_allocator)
    pop_back = _swig_new_instance_method(_swig_std.vector_int_pop_back)
    erase = _swig_new_instance_method(_swig_std.vector_int_erase)

    def __init__(self, *args):
        _swig_std.vector_int_swiginit(self, _swig_std.new_vector_int(*args))
    push_back = _swig_new_instance_method(_swig_std.vector_int_push_back)
    front = _swig_new_instance_method(_swig_std.vector_int_front)
    back = _swig_new_instance_method(_swig_std.vector_int_back)
    assign = _swig_new_instance_method(_swig_std.vector_int_assign)
    resize = _swig_new_instance_method(_swig_std.vector_int_resize)
    insert = _swig_new_instance_method(_swig_std.vector_int_insert)
    reserve = _swig_new_instance_method(_swig_std.vector_int_reserve)
    capacity = _swig_new_instance_method(_swig_std.vector_int_capacity)
    __swig_destroy__ = _swig_std.delete_vector_int

# Register vector_int in _swig_std:
_swig_std.vector_int_swigregister(vector_int)
class vector_float(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_swig_std.vector_float_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_swig_std.vector_float___nonzero__)
    __bool__ = _swig_new_instance_method(_swig_std.vector_float___bool__)
    __len__ = _swig_new_instance_method(_swig_std.vector_float___len__)
    __getslice__ = _swig_new_instance_method(_swig_std.vector_float___getslice__)
    __setslice__ = _swig_new_instance_method(_swig_std.vector_float___setslice__)
    __delslice__ = _swig_new_instance_method(_swig_std.vector_float___delslice__)
    __delitem__ = _swig_new_instance_method(_swig_std.vector_float___delitem__)
    __getitem__ = _swig_new_instance_method(_swig_std.vector_float___getitem__)
    __setitem__ = _swig_new_instance_method(_swig_std.vector_float___setitem__)
    pop = _swig_new_instance_method(_swig_std.vector_float_pop)
    append = _swig_new_instance_method(_swig_std.vector_float_append)
    empty = _swig_new_instance_method(_swig_std.vector_float_empty)
    size = _swig_new_instance_method(_swig_std.vector_float_size)
    swap = _swig_new_instance_method(_swig_std.vector_float_swap)
    begin = _swig_new_instance_method(_swig_std.vector_float_begin)
    end = _swig_new_instance_method(_swig_std.vector_float_end)
    rbegin = _swig_new_instance_method(_swig_std.vector_float_rbegin)
    rend = _swig_new_instance_method(_swig_std.vector_float_rend)
    clear = _swig_new_instance_method(_swig_std.vector_float_clear)
    get_allocator = _swig_new_instance_method(_swig_std.vector_float_get_allocator)
    pop_back = _swig_new_instance_method(_swig_std.vector_float_pop_back)
    erase = _swig_new_instance_method(_swig_std.vector_float_erase)

    def __init__(self, *args):
        _swig_std.vector_float_swiginit(self, _swig_std.new_vector_float(*args))
    push_back = _swig_new_instance_method(_swig_std.vector_float_push_back)
    front = _swig_new_instance_method(_swig_std.vector_float_front)
    back = _swig_new_instance_method(_swig_std.vector_float_back)
    assign = _swig_new_instance_method(_swig_std.vector_float_assign)
    resize = _swig_new_instance_method(_swig_std.vector_float_resize)
    insert = _swig_new_instance_method(_swig_std.vector_float_insert)
    reserve = _swig_new_instance_method(_swig_std.vector_float_reserve)
    capacity = _swig_new_instance_method(_swig_std.vector_float_capacity)
    __swig_destroy__ = _swig_std.delete_vector_float

# Register vector_float in _swig_std:
_swig_std.vector_float_swigregister(vector_float)

