<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.7">
  <compounddef id="a00023" kind="struct" prot="public">
    <compoundname>UniqueIdT</compoundname>
    <includes refid="a00048" local="no">UniqueId.h</includes>
    <templateparamlist>
      <param>
        <type>typename high_type</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a00023_1e9f00e134fefa7a44c35361682fd71f2" prot="public" static="no">
        <type><ref refid="a00023" kindref="compound">UniqueIdT</ref>&lt; high_type &gt;</type>
        <definition>typedef UniqueIdT&lt;high_type&gt; UniqueIdT&lt; high_type &gt;::this_type</definition>
        <argsstring></argsstring>
        <name>this_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" line="97" bodyfile="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="a00023_1f4b7eace3074587a8103eb774a1abf85" prot="public" static="no" mutable="no">
        <type>high_type</type>
        <definition>high_type UniqueIdT&lt; high_type &gt;::hi</definition>
        <argsstring></argsstring>
        <name>hi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" line="100" bodyfile="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="a00023_1b72d7a69f6d0dd53d959f203a4efbd49" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t UniqueIdT&lt; high_type &gt;::lo</definition>
        <argsstring></argsstring>
        <name>lo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" line="99" bodyfile="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a00023_1a8d80122f4247f0c4ab319a872788ae6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool UniqueIdT&lt; high_type &gt;::IsNull</definition>
        <argsstring>() const </argsstring>
        <name>IsNull</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" line="103" bodyfile="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="a00023_18a04cb171b9ea720dfa86c48c5e60a4c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UniqueIdT&lt; high_type &gt;::operator uint64_t</definition>
        <argsstring>() const </argsstring>
        <name>operator uint64_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" line="125" bodyfile="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" bodystart="124" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="a00023_160f863d484477cb1a0cbdf8ada61496b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool UniqueIdT&lt; high_type &gt;::operator!=</definition>
        <argsstring>(const this_type &amp;x) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="a00023" kindref="compound">this_type</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" line="112" bodyfile="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="a00023_13783ca64e152dda2e3321d8b660273d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="a00023" kindref="compound">this_type</ref> &amp;</type>
        <definition>this_type&amp; UniqueIdT&lt; high_type &gt;::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" line="116" bodyfile="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" bodystart="115" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="a00023_1972784ac16954d306c48c5df375b7eb6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool UniqueIdT&lt; high_type &gt;::operator&lt;</definition>
        <argsstring>(const this_type &amp;x) const </argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="a00023" kindref="compound">this_type</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" line="110" bodyfile="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="a00023_112b1db09602f4ed85261195d945ec16f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool UniqueIdT&lt; high_type &gt;::operator==</definition>
        <argsstring>(const this_type &amp;x) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="a00023" kindref="compound">this_type</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" line="111" bodyfile="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="a00023_131c63849ccd34289ae7df835a19ab902" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool UniqueIdT&lt; high_type &gt;::operator&gt;</definition>
        <argsstring>(const this_type &amp;x) const </argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="a00023" kindref="compound">this_type</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" line="109" bodyfile="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="a00023_1d2b9ee96f688c19ec4e3e4eeca9a93eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void UniqueIdT&lt; high_type &gt;::Serialize</definition>
        <argsstring>(unsigned char *buffer) const </argsstring>
        <name>Serialize</name>
        <param>
          <type>unsigned char *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>serializer function </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" line="156" bodyfile="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" bodystart="155" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="a00023_15134c0966907c7d6d5280fdb4855395e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UniqueIdT&lt; high_type &gt;::UniqueIdT</definition>
        <argsstring>(const unsigned char *const buffer)</argsstring>
        <name>UniqueIdT</name>
        <param>
          <type>const unsigned char *const </type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>serialization constructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" line="152" bodyfile="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="a00023_1a9d670942ddb04b3231e5464683ffc2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UniqueIdT&lt; high_type &gt;::UniqueIdT</definition>
        <argsstring>(uint32_t l, high_type h)</argsstring>
        <name>UniqueIdT</name>
        <param>
          <type>uint32_t</type>
          <declname>l</declname>
        </param>
        <param>
          <type>high_type</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" line="145" bodyfile="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="a00023_19862d0b85248f174e64c0ce34582ca5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UniqueIdT&lt; high_type &gt;::UniqueIdT</definition>
        <argsstring>(uint64_t val)</argsstring>
        <name>UniqueIdT</name>
        <param>
          <type>uint64_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" line="140" bodyfile="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" bodystart="136" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="a00023_1b1e5cb2bb3fee92a74c5c387967efc2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UniqueIdT&lt; high_type &gt;::UniqueIdT</definition>
        <argsstring>() UNIQUEID_DEF_CONSTRUCTOR</argsstring>
        <name>UniqueIdT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" line="134" bodyfile="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" bodystart="132" bodyend="134"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implementation of a generic Unique ID type. </para>    </briefdescription>
    <detaileddescription>
<para>mini-rant about unique ids:</para><para>First, lets look at the number of objects we can have depending on the size of the unique ID:</para><para>32 bits: 4294967296 (4 billion) 40 bits: 1099511627776 (1 trillion) 48 bits: 281474976710656 (281 trillion) 64 bits: 18446744073709551615 (ridiculously big number)</para><para>32 bits will be good enough for really tiny systems, but I&apos;m pretty sure quite a few people will run out of unique ID&apos;s with this many nodes.</para><para>Now we could add another 8 bits, and go to 1 trillion. And for most users, that will be far more than enough. Loading a planet.osm file might go over this number. But we could be reasonably sure that it would work for most people.</para><para>If you add another 8 bits, then you get 281 trillion unique ID&apos;s. This will almost certainly be enough for almost anyone. And if you use this many.. then you&apos;re going to run into other problems, I suspect.</para><para>I&apos;m pretty sure that Roadnav is never going to need 64 bits for ID&apos;s. Really. Ever. Thats a really big number.</para><para>So we will use a custom type for this unless you want to enable very small ID&apos;s (not particularly recommended)</para><para>You *must* use the generic serialization routines defined in <ref refid="a00068" kindref="compound">Serialization.h</ref> if you are serializing these, since it may be an intrinsic type or a custom type. </para>    </detaileddescription>
    <location file="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" line="96" bodyfile="/Users/smyth/CartLab/thirdparty/libsdbx/sdbx/support/UniqueId.h" bodystart="96" bodyend="164"/>
    <listofallmembers>
      <member refid="a00023_1f4b7eace3074587a8103eb774a1abf85" prot="public" virt="non-virtual"><scope>UniqueIdT</scope><name>hi</name></member>
      <member refid="a00023_1a8d80122f4247f0c4ab319a872788ae6" prot="public" virt="non-virtual"><scope>UniqueIdT</scope><name>IsNull</name></member>
      <member refid="a00023_1b72d7a69f6d0dd53d959f203a4efbd49" prot="public" virt="non-virtual"><scope>UniqueIdT</scope><name>lo</name></member>
      <member refid="a00023_18a04cb171b9ea720dfa86c48c5e60a4c" prot="public" virt="non-virtual"><scope>UniqueIdT</scope><name>operator uint64_t</name></member>
      <member refid="a00023_160f863d484477cb1a0cbdf8ada61496b" prot="public" virt="non-virtual"><scope>UniqueIdT</scope><name>operator!=</name></member>
      <member refid="a00023_13783ca64e152dda2e3321d8b660273d4" prot="public" virt="non-virtual"><scope>UniqueIdT</scope><name>operator++</name></member>
      <member refid="a00023_1972784ac16954d306c48c5df375b7eb6" prot="public" virt="non-virtual"><scope>UniqueIdT</scope><name>operator&lt;</name></member>
      <member refid="a00023_112b1db09602f4ed85261195d945ec16f" prot="public" virt="non-virtual"><scope>UniqueIdT</scope><name>operator==</name></member>
      <member refid="a00023_131c63849ccd34289ae7df835a19ab902" prot="public" virt="non-virtual"><scope>UniqueIdT</scope><name>operator&gt;</name></member>
      <member refid="a00023_1992e7828c5985e80f050d693e6afa2822505ccb5a1e5a41bf6db173e4f34d4a7" prot="public" virt="non-virtual"><scope>UniqueIdT</scope><name>record_size</name></member>
      <member refid="a00023_1d2b9ee96f688c19ec4e3e4eeca9a93eb" prot="public" virt="non-virtual"><scope>UniqueIdT</scope><name>Serialize</name></member>
      <member refid="a00023_1e9f00e134fefa7a44c35361682fd71f2" prot="public" virt="non-virtual"><scope>UniqueIdT</scope><name>this_type</name></member>
      <member refid="a00023_1b1e5cb2bb3fee92a74c5c387967efc2f" prot="public" virt="non-virtual"><scope>UniqueIdT</scope><name>UniqueIdT</name></member>
      <member refid="a00023_19862d0b85248f174e64c0ce34582ca5e" prot="public" virt="non-virtual"><scope>UniqueIdT</scope><name>UniqueIdT</name></member>
      <member refid="a00023_1a9d670942ddb04b3231e5464683ffc2b" prot="public" virt="non-virtual"><scope>UniqueIdT</scope><name>UniqueIdT</name></member>
      <member refid="a00023_15134c0966907c7d6d5280fdb4855395e" prot="public" virt="non-virtual"><scope>UniqueIdT</scope><name>UniqueIdT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
