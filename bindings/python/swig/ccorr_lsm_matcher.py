# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _ccorr_lsm_matcher.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ccorr_lsm_matcher', [dirname(__file__)])
        except ImportError:
            import _ccorr_lsm_matcher
            return _ccorr_lsm_matcher
        if fp is not None:
            try:
                _mod = imp.load_module('_ccorr_lsm_matcher', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ccorr_lsm_matcher = swig_import_helper()
    del swig_import_helper
else:
    import _ccorr_lsm_matcher
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _ccorr_lsm_matcher.SHARED_PTR_DISOWN
def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.image_matcher
import geocal_swig.generic_object
class CcorrLsmMatcher(geocal_swig.image_matcher.ImageMatcher):
    """
    This class performs image matching.

    It first does a cross correlation match using CcorrMatcher to get to
    within a pixel, and then follows up with a least squares match using
    LsmMatcher to get subpixel accuracy.

    C++ includes: ccorr_lsm_matcher.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        GeoCal::CcorrLsmMatcher::CcorrLsmMatcher(const boost::shared_ptr< CcorrMatcher > &Ccorr, const
        boost::shared_ptr< LsmMatcher > &Lsm, bool Accept_ccorr_only=false)
        Constructor.

        This takes the CcorrMatcher and LsmMatcher, which allows you to use
        something other than the default values for the construction of these.

        There are two possibilities when a LSM fails. We can either have the
        whole match fail, or alternatively we can fall back on doing the Cccor
        only. The choice depends on how you are using the matches - are more
        matches of ok quality important, or do you only want the best possible
        matches as the cost of some coverage? 
        """
        _ccorr_lsm_matcher.CcorrLsmMatcher_swiginit(self,_ccorr_lsm_matcher.new_CcorrLsmMatcher(*args))
    def _v_ccorr_matcher(self):
        """
        boost::shared_ptr<CcorrMatcher> GeoCal::CcorrLsmMatcher::ccorr_matcher_ptr() const

        """
        return _ccorr_lsm_matcher.CcorrLsmMatcher__v_ccorr_matcher(self)

    @property
    def ccorr_matcher(self):
        return self._v_ccorr_matcher()

    def _v_lsm_matcher(self):
        """
        boost::shared_ptr<LsmMatcher> GeoCal::CcorrLsmMatcher::lsm_matcher_ptr() const

        """
        return _ccorr_lsm_matcher.CcorrLsmMatcher__v_lsm_matcher(self)

    @property
    def lsm_matcher(self):
        return self._v_lsm_matcher()

    def _v_accept_ccorr_only(self):
        """
        bool GeoCal::CcorrLsmMatcher::accept_ccorr_only() const
        True if we will accept a point where the least squares matcher fails
        but the cross correlation matcher succeeds.

        If allowed, a match like this will have a much larger line and sample
        sigma, but will be marked as successful.

        If this flag is false, then we require both matchers to be successful
        to match a point as successful. 
        """
        return _ccorr_lsm_matcher.CcorrLsmMatcher__v_accept_ccorr_only(self)

    @property
    def accept_ccorr_only(self):
        return self._v_accept_ccorr_only()

    @classmethod
    def pickle_format_version(cls):
      return 1

    def __reduce__(self):
      return _new_from_init, (self.__class__, 1, self.ccorr_matcher,self.lsm_matcher,self.accept_ccorr_only)

    __swig_destroy__ = _ccorr_lsm_matcher.delete_CcorrLsmMatcher
CcorrLsmMatcher._v_ccorr_matcher = new_instancemethod(_ccorr_lsm_matcher.CcorrLsmMatcher__v_ccorr_matcher,None,CcorrLsmMatcher)
CcorrLsmMatcher._v_lsm_matcher = new_instancemethod(_ccorr_lsm_matcher.CcorrLsmMatcher__v_lsm_matcher,None,CcorrLsmMatcher)
CcorrLsmMatcher._v_accept_ccorr_only = new_instancemethod(_ccorr_lsm_matcher.CcorrLsmMatcher__v_accept_ccorr_only,None,CcorrLsmMatcher)
CcorrLsmMatcher_swigregister = _ccorr_lsm_matcher.CcorrLsmMatcher_swigregister
CcorrLsmMatcher_swigregister(CcorrLsmMatcher)



