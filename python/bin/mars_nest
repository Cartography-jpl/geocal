#! /usr/bin/env python
#
# This takes a pair of mars map images and co-registers the second
# image to the first.

import osgeo.gdal as gdal
import math
import tempfile
import subprocess
import sys
import re
import geocal
import os

version = "February 26, 2019"
usage='''Usage:
  mars_nest [options] <ref_image> <ref_base_name> 
            <ref_image_resolution_name> <image> <image_base_name> 
            <image_resolution_name>
  mars_nest [options] <ref_image> <ref_base_name> 
            <ref_image_resolution_name> <tiepoint_name> <image> 
            <image_base_name> <image_resolution_name>
  mars_nest -h | --help
  mars_nest -v | --version

mars_nest co-registers two mars orbital images (with map/georeference).
The two input images are imported into VICAR using GDAL, and the output
is VICAR-GT (georeferenced) which can be converted (separately) to
GeoTIFF or other user-desired format. The first image is the Reference
to which the Second image will be co-registered/warped. If the pixel
resolutions are not the same, the Reference image should be the lower
resolution of the two images. The default is for the output to assume
the Second image's projection although this can be changed via the
"userefproj" parameter. The images are resampled and output at both the
resolution of the Second image as well as the Reference image. Output
filenames are created by the program using the user-supplied
"refbase" and "refresname" parameters, and then "imgbase" and
"imgresname" parameters. The warped Second image output has the
additional suffix "corr" added to the filename. All the output files
are provided as VICAR-GT ".img" files. The resolution name parameters 
(refresname/imgresname) can be any text, e.g., "5m", "res1", but they
must be different text if the resolutions are different.

If you have previously run mars_nest with a related image (e.g., one
band of a multi-band image), you can pass in the existing tiepoint_name.
We will then apply the same correction done with the related image to the
given image - we don't need to repeat the image matching. Note that we handle
differences in the resolution and origin of the current image vs. the
related image (e.g., bands are different resolution, or offset relative to
each other)

Example filenames:
 mars_nest  refimg=P14_006644_1747_XI_05S222W_8bit.tif +
            refbase=ctx refres=5m +
            img=ESP_025012_1745_RED_8bitrender.tif +
            imgbase=hirise imgres=0.25m
Would result in: ctx_5m.img ctx_0.25m.img hirise_corr_5m.img and 
hirise_corr_0.25m.img

General usage example:
parm input1 string def="h1154_0000.nd4.53_hrsc_stereo.tif"
parm input2 string def="h3663_0000.nd4.50_hrsc_sin.tif"

mars_nest   refimg=&input1 refbase=hrsc1154 refres=50m +
            img=&input2 imgbase=hrsc3663 imgres=12m +
            fftsize=256 fftgrid=(42,42) magnify=4 magmin=2 +
            userefpr="y"
xvd (hrsc1154_50m.img,hrsc3663_corr_50m.img,hrsc3663_corr_50m.img)

Options:
  -h --help         
       Print this message

  --autofit=d
       Sets the FITMIN threshold automatically using the first n
       correlations. [default: 14]

  --band-ref=d
       The band number to use if the input Reference image contains
       multiple bands. [default: 1]

  --band-image=d
       The band number to use if the input Second image contains
       multiple bands. [default: 1]

  --border=d
       Add a border of the given number of pixels when we
       resample. This border is in pixels of the second image (not the
       reference image). This is useful for large corrections, where
       the image may shift outside of the original bounding
       box. [default: 0]

  --fftsize=d
       FFT window size. Default should generally work, but if the
       overlap is very narrow, a smaller window will be needed. Or
       use a larger window if the two images have very different
       resolutions (e.g., Viking 232m vs 50m HRSC).
       [default: 256]

  --fftgrid=s
       Grid dimensions of FFTs to match in line x sample order.
       Note that to pass this you need to use quotes, 
       e.g., --fftgrid="(42,42)".
       [default: (42, 42)]

  --hirise-correction
       Hirise imagery in equirectangular projection appears to have
       the latitude_of_origin and standard_parallel_1 swapped for some
       cases. This option turns on heuristics to identify and correct
       the problem. Specify this parameter to turn on the heuristics.

  --magnify=f
       Magnify the FFT size to search a larger area to obtain better
       initial match points. 1.0 means no magnification.
       [default: 4.0]

  --magmin=f
       Shrink the Magnify factor to this size after successful initial
       matching. Will increase the number of (smaller) FFTs fitting
       inside the image overlap.
       [default: 2.0]

  --nah=d
       Number of grid cells in the Sample direction used for warping
       the final image. [default: 1000]

  --nav=d
       Number of grid cells in the Line direction used for warping
       the final image. [default: 1000]

  --polyfit=s
        When warping the Second image to the Reference image, the
        default is to triangulate using each FFT match point.
        Optionally, the mapping can be constrained to a LINEAR,
        KEYSTONE, QUAD, or CUBIC polynomial fit. See the VICAR Proc
        "tieconv" for more details.
        [default: ]

  --redo=d
       At the end of processing, this number of the first FFT match
       points will be redone.
       [default: 36]   

  --scale-image=d
       Value to scale the input image by, useful if the input data is floating
       for example. [default: 1.0]

  --seed=d
       Number that controls the positions of the first FFT match
       points. Use a different number if the first image matching
       points result in poor registration accuracy.
       [default: 562]
   
  --thr-res=f
       Prevent offset correlations further than this value from the
       predicted location from entering into the model fit. Prevents
       gross blunders. Note this is in the (lower) resolution of the
       Reference image. [default: 10.0]

  --toler=f
       Tolerance used to reject matched points as blunders.
       [default: 1.5]

  --use-map-info=f
       Like --use-projection, specifies an image with a projection 
       georeference to be used for the output registered products instead of 
       the projection of the input Reference or Second images.
       In addition, the ref_image_resolution_name version of files will
       exactly match the pixel size and extent of the given image (e.g.,
       you can load them both in xvd). This is useful when bringing a set
       of images into one overall common set.

  --use-projection=f
       Specifies an image with a projection georeference to be used
       for the output registered products instead of the pro-
       jection of the input Reference or Second images. Can be useful
       for bringing everything to a common projection.

  --use-ref-image-projection
       Use the input Reference image's projection for the output
       images instead of the default Second image's projection.

  -v --version      
       Print program version
'''

# Mapping between long name and shorter vicar name
long_name_to_vicar = { "ref_image" : "refimg",
                       "ref_base_name" : "refbase",
                       "ref_image_resolution_name" : "refresname",
                       "scale_image" : "scl",
                       "image" : "img",
                       "tiepoint_name": "tp",
                       "image_base_name" : "imgbase",
                       "image_resolution_name" : "imgresname",
                       "band_ref" : "bandref",
                       "band_image" : "bandimg",
                       "border" : "border",
                       "hirise_correction" : "hirisecorr",
                       "use_map_info" : "usemap",
                       "use_projection" : "useproj",
                       "use_ref_image_projection" : "userefproj"}

args = geocal.docopt_simple(usage, version=version,
                     long_name_to_vicar=long_name_to_vicar)

# Small wrapper around running command, so we can print this to screen
def run_cmd(cmd):
    print("Executing command:")
    print("  " + " ".join(cmd))
    sys.stdout.flush()
    subprocess.run(cmd, check=True)
    
# We probably want to add a little bit of padding, but skip that for now.

def resample_proj(fin, fref, fout, resize=False, fit_fref = True, border=0):
    '''Project fin to same projection as fref. If resize is False, 
    leave fin in whatever its original resolution is. If resize is 
    True, also resize to the same resolution as fref.'''
    d = gdal.Open(fref, gdal.GA_ReadOnly)
    g = d.GetGeoTransform()
    # Not 100% sure that all data should be Int16, but for now we assume this
    cmd= ["gdalwarp", "-of", "VICAR", "-ot", "Int16"]
    x_size, y_size = d.RasterXSize, d.RasterYSize
    min_x, max_y, pix_size_x, pix_size_y = g[0], g[3], g[1], g[5]
    max_x = min_x + (x_size * pix_size_x)
    min_y = max_y + (y_size * pix_size_y)
    if(min_x < max_x):
        min_x -= border * abs(pix_size_x)
        max_x += border * abs(pix_size_x)
    else:
        min_x += border * abs(pix_size_x)
        max_x -= border * abs(pix_size_x)
    if(min_y < max_y):
        min_y -= border * abs(pix_size_y)
        max_y += border * abs(pix_size_y)
    else:
        min_y += border * abs(pix_size_y)
        max_y -= border * abs(pix_size_y)
    if(fit_fref):
        cmd.extend(["-te", repr(min_x), repr(min_y), repr(max_x), repr(max_y)])
    if(resize):
        cmd.extend(["-tr", repr(pix_size_x), repr(pix_size_y)])
        # Note that we shouldn't have wm larger than 2GB because we get
        # an internal error in gdal with an integer overflow
    cmd.extend(["-r", "bilinear"])
    cmd.extend(["-multi", "-wo", "NUM_THREADS=20", "-wm", "2000"])
    with tempfile.NamedTemporaryFile() as f:
        f.write(d.GetProjection().encode("utf-8"))
        f.flush()
        cmd.append("-t_srs")
        cmd.append(f.name)
        cmd.append("-overwrite")
        cmd.append(fin)
        cmd.append(fout)
        run_cmd(cmd)

def check_same_projection(f1, f2):
    '''Check that the 2 images have identical projection and resolution.'''
    gf1 = geocal.GdalRasterImage(f1)
    gf2 = geocal.GdalRasterImage(f2)
    if(not gf1.map_info.coordinate_converter.is_same(gf2.map_info.coordinate_converter)):
        return False
    if(not (gf1.map_info.transform == gf2.map_info.transform).all()):
        return False
    return True

def check_intersection(f1, f2):
    '''Returns True if there is some overlap between the 2 images, False 
    otherwise. This is purposely coarse, we just check the corners of the 
    image. So if this returns False the images definitely don't overlap,
    but True might still not overlap if it happens that all the intersection
    is in the gore of an image.'''
    t = geocal.GdalRasterImage(f1).map_info.intersection(geocal.GdalRasterImage(f2).map_info)
    if(t.number_x_pixel == 0 or t.number_y_pixel == 0):
        return False
    return True

def scale_image(fin, fout, scale):
    fouttif = os.path.splitext(fout)[0] + ".tif"
    cmd = ["gdal_calc.py", "-A", fin, "--outfile=%s" % fouttif,
           '--calc=A*%f' % scale, "--NoDataValue=0"]
    run_cmd(cmd)
    cmd = ["gdal_translate", "-of", "VICAR", "-ot", "Int16",
           fouttif, fout]
    run_cmd(cmd)
    
def import_file(fin, fout):
    '''Import an image into vicar format, leaving in original projection.'''
    # Not 100% sure that all data should be Int16, but for now we assume this
    cmd = ["gdal_translate", "-of", "VICAR", "-ot", "Int16", fin, fout]
    run_cmd(cmd)

def tie_point_collect(fin, fref):
    '''Collect tie points between fin and fref'''
    img = geocal.VicarLiteRasterImage(fin)
    dem = geocal.PlanetSimpleDem(img.ground_coordinate(0,0).naif_code())
    igc1 = geocal.MapInfoImageGroundConnection(img, dem)
    igc_coll = geocal.IgcArray([igc1,])
    tpcollect = geocal.TiePointCollectPicmtch(igc_coll, [fin,],
                  ref_image_fname=fref, fftsize=args.fftsize,
                  magnify=args.magnify, magmin=args.magmin,
                  toler=args.toler, redo=args.redo,
                  ffthalf=2, seed=args.seed, autofit=args.autofit,
                  thr_res=10.0, quiet=False)
    tpcol = tpcollect.tie_point_grid(eval(str(args.fftgrid))[0],
                                     eval(str(args.fftgrid))[1])
    return tpcol

def run_warp_image(fin, fref_res, tpcol, fout, tpgrid_out):
    '''Run warp_image to generate output.'''
    geocal.warp_image(fin, fout, fref_res, tpcol, nav=args.nav, nah=args.nah,
                      polyfit=args.polyfit,interp="bilin",
                      tpgrid_out=tpgrid_out,
                      quiet=False)

def accck(fin,fref):
    '''Run accuracy check. We assume images are in the same projection
    (e.g., all geodetic)'''
    cmd = ["vicarb", "accck", fin, fref, "wmask=n",
           "fftsize=%d" % args.fftsize,
           "magnif=%f" % args.magmin, "remap=n", "echo=no",
           "zerolim=10.0", "zerolim2=10.0"]
    run_cmd(cmd)

# Various output names
refimg_fixed = "%s.vrt" % (args.ref_base_name)
refimg_res1 = "%s_%s.img" % (args.ref_base_name, args.ref_image_resolution_name)
refimg_res2 = "%s_%s.img" % (args.ref_base_name, args.image_resolution_name)
img_fixed = "%s.vrt" % (args.image_base_name)
img_res1 = "%s_%s.img" % (args.image_base_name, args.ref_image_resolution_name)
tpcol_fname = "%s_%s_tpcol.xml" % (args.image_base_name, args.image_resolution_name)
tpgrid_fname = "%s_%s_tpgrid.bin" % (args.image_base_name, args.image_resolution_name)
img_res2 = "%s_%s.img" % (args.image_base_name, args.image_resolution_name)
cimg_res1 = "%s_corr_%s.img" % (args.image_base_name, 
                                args.ref_image_resolution_name)
cimg_res2 = "%s_corr_%s.img" % (args.image_base_name, 
                                args.image_resolution_name)

geocal.mars_fix_projection(args.ref_image, refimg_fixed, args.band_ref,
                           hirise_correction=args.hirise_correction)
geocal.mars_fix_projection(args.image, img_fixed, args.band_image,
                           hirise_correction=args.hirise_correction)
if(args.use_projection):
    use_projection_fixed = "%s_proj.vrt" % (args.image_base_name)
    geocal.mars_fix_projection(args.use_projection, use_projection_fixed,1,
                               hirise_correction=args.hirise_correction)
if(args.use_map_info):
    use_projection_fixed = "%s_proj.vrt" % (args.image_base_name)
    geocal.mars_fix_projection(args.use_map_info, use_projection_fixed,1,
                               hirise_correction=args.hirise_correction)
if(not check_intersection(refimg_fixed, img_fixed)):
    raise RuntimeError("The two images have no area of intersection")
if(args.scale_image != 1.0):
    img_scaled = "%s_scale.img" % (args.image_base_name)
    scale_image(img_fixed, img_scaled, args.scale_image)
    img_fixed = img_scaled
if(args.use_ref_image_projection):
    img_fixed_reproj = "%s_reproj.img" % (args.image_base_name)
    resample_proj(img_fixed, refimg_fixed, img_fixed_reproj, fit_fref=False)
    img_fixed = img_fixed_reproj
if(args.use_projection or args.use_map_info):
    img_fixed_reproj = "%s_reproj.img" % (args.image_base_name)
    resample_proj(img_fixed, use_projection_fixed, img_fixed_reproj,
                  fit_fref=False)
    img_fixed = img_fixed_reproj

if(args.border == 0):    
    import_file(img_fixed, img_res2)
else:
    resample_proj(img_fixed, img_fixed, img_res2, border=args.border)
    
# If resolutions are different, then don't resize when we reproject the
# reference data. If on the other hand these are the same, then do resize
# (which should be almost an identity transformation).
#
# This is to handle the case of "almost the same" resolution, which we
# in particular can get if img_fixed has been reprojected from either
# use_ref_image_projection or use_projection (or if the user just mildly
# "lied" about the reference data and image data being the same resolution)
if(args.ref_image_resolution_name != args.image_resolution_name):
    resample_proj(refimg_fixed, img_res2, refimg_res1)
else:
    resample_proj(refimg_fixed, img_res2, refimg_res1, resize=True)
if(args.ref_image_resolution_name != args.image_resolution_name):
    resample_proj(refimg_res1, img_res2, refimg_res2, resize=True)
if(args.ref_image_resolution_name != args.image_resolution_name):
    resample_proj(img_res2, refimg_res1, img_res1, resize=True)
# Check that datasets are consistent
if(not check_same_projection(img_res1, refimg_res1) or
   not check_same_projection(img_res2, refimg_res2)):
    raise RuntimeError("The files %s and %s or %s and %s aren't the same projection and/or resolution. This might be because you passed in the same resolution name for the reference image and image but they aren't identical resolution." % (img_res1, refimg_res1, img_res2, refimg_res2))
if(not args.tiepoint_name or args.tiepoint_name == ""):
    print("MSG:----------------------------------------------------\n")
    print("MSG: Before correcting\n")
    print("MSG: Each pixels is %s" % args.ref_image_resolution_name)
    sys.stdout.flush()
    accck(img_res1, refimg_res1)
    tpcol = tie_point_collect(img_res2, refimg_res1)
    geocal.write_shelve(tpcol_fname, tpcol)
else:
    tpcol = geocal.read_shelve(args.tiepoint_name)
    # Translate tpcol to the current image. Not needed if current image
    # is same resolution and origin as orginal_img, but in general these
    # can be different.
    original_img = geocal.VicarLiteRasterImage(re.sub(r'_tpcol.xml$', ".img", args.tiepoint_name))
    current_img = geocal.VicarLiteRasterImage(img_res2)
    for tp in tpcol:
        ic_original = tp.image_coordinate(0)
        ic_current = current_img.coordinate(original_img.ground_coordinate(ic_original))
        tp.image_coordinate(0,ic_current)
run_warp_image(img_res2, refimg_res2, tpcol, cimg_res2,
               tpgrid_out=tpgrid_fname)
if(args.use_map_info):
    resample_proj(refimg_fixed, use_projection_fixed, refimg_res1, resize=True)
    resample_proj(img_res2, use_projection_fixed, img_res1, resize=True)
if(args.ref_image_resolution_name != args.image_resolution_name):
    resample_proj(cimg_res2, refimg_res1, cimg_res1, resize=True)
if(not args.tiepoint_name or args.tiepoint_name == ""):    
    print("MSG:----------------------------------------------------\n")
    print("MSG: After correcting\n")
    print("MSG: Each pixels is %s" % args.ref_image_resolution_name)
    sys.stdout.flush()
    accck(cimg_res1, refimg_res1)
    print("MSG:----------------------------------------------------\n")
