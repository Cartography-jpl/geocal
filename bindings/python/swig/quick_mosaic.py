# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _quick_mosaic

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _quick_mosaic.SWIG_PyInstanceMethod_New
_swig_new_static_method = _quick_mosaic.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _quick_mosaic.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quick_mosaic.delete_SwigPyIterator
    value = _swig_new_instance_method(_quick_mosaic.SwigPyIterator_value)
    incr = _swig_new_instance_method(_quick_mosaic.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_quick_mosaic.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_quick_mosaic.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_quick_mosaic.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_quick_mosaic.SwigPyIterator_copy)
    next = _swig_new_instance_method(_quick_mosaic.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_quick_mosaic.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_quick_mosaic.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_quick_mosaic.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_quick_mosaic.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_quick_mosaic.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_quick_mosaic.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_quick_mosaic.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_quick_mosaic.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_quick_mosaic.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _quick_mosaic:
_quick_mosaic.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _quick_mosaic.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.raster_image
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
import geocal_swig.calc_raster
import geocal_swig.raster_image_variable
class QuickMosaic(geocal_swig.calc_raster.CalcRaster):
    r"""

    This is a simple mosaic of a set of RasterImages.

    The RasterImages should have a common projection and resolution,
    although in general they will have difference bounding boxes.

    The data is calculated dynamically, using a simple algorithm of using
    the pixel value for the first RasterImage with a non-fill value. The
    RasterImages are checked in the order they appear in the input list,
    so if image A and B both have data but A comes before in the list then
    it is "on top" of B.

    No attempt is made to smooth edges or anything like that. The purpose
    of this class is for dynamically creating a mosiac (e.g, the
    RasterImages are themselves a CalcRaster like IgcMapProjected). If the
    images are actually files, you might want to use a existing program
    like fthfastmos or gdal_merge.py

    C++ includes: quick_mosaic.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Mi, Img_list, Number_tile_line=-1, Number_tile_sample=-1, Fill_value=0.0):
        r"""

        QuickMosaic::QuickMosaic(const MapInfo &Mi, const std::vector< boost::shared_ptr< RasterImage
        > > &Img_list, int Number_tile_line=-1, int Number_tile_sample=-1,
        double Fill_value=0.0)
        Constructor. 
        """
        _quick_mosaic.QuickMosaic_swiginit(self, _quick_mosaic.new_QuickMosaic(Mi, Img_list, Number_tile_line, Number_tile_sample, Fill_value))
    _v_fill_value = _swig_new_instance_method(_quick_mosaic.QuickMosaic__v_fill_value)

    @property
    def fill_value(self):
        return self._v_fill_value()

    _v_image_list = _swig_new_instance_method(_quick_mosaic.QuickMosaic__v_image_list)

    @property
    def image_list(self):
        return self._v_image_list()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _quick_mosaic.delete_QuickMosaic

# Register QuickMosaic in _quick_mosaic:
_quick_mosaic.QuickMosaic_swigregister(QuickMosaic)

__all__ = ["QuickMosaic"]


