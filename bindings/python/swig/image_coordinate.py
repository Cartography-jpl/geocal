# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _image_coordinate

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _image_coordinate.SWIG_PyInstanceMethod_New
_swig_new_static_method = _image_coordinate.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _image_coordinate.delete_SwigPyIterator
    value = _swig_new_instance_method(_image_coordinate.SwigPyIterator_value)
    incr = _swig_new_instance_method(_image_coordinate.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_image_coordinate.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_image_coordinate.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_image_coordinate.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_image_coordinate.SwigPyIterator_copy)
    next = _swig_new_instance_method(_image_coordinate.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_image_coordinate.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_image_coordinate.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_image_coordinate.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_image_coordinate.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_image_coordinate.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_image_coordinate.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_image_coordinate.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_image_coordinate.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_image_coordinate.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _image_coordinate:
_image_coordinate.SwigPyIterator_swigregister(SwigPyIterator)
SWIG_MODULE_ALREADY_DONE = _image_coordinate.SWIG_MODULE_ALREADY_DONE
SHARED_PTR_DISOWN = _image_coordinate.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
class ImageCoordinate(geocal_swig.generic_object.GenericObject):
    r"""

    This describes an image coordinate.

    We also define the print operator <<, and equality operator ==. Two
    image coordinates are considers equal if they are within 0.01 in the
    line and sample.

    The convention used throughout GeoCal is that an integer value of the
    ImageCoordinate line or sample refers to the center of a pixel. This
    means the upper left corner of the bounding box of an image is at
    (-0.5, -0.5).

    C++ includes: image_coordinate.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::ImageCoordinate::ImageCoordinate()
        Default constructor, line and sample aren't initialized. 
        """
        _image_coordinate.ImageCoordinate_swiginit(self, _image_coordinate.new_ImageCoordinate(*args))
    line = property(_image_coordinate.ImageCoordinate_line_get, _image_coordinate.ImageCoordinate_line_set)
    sample = property(_image_coordinate.ImageCoordinate_sample_get, _image_coordinate.ImageCoordinate_sample_set)
    __str__ = _swig_new_instance_method(_image_coordinate.ImageCoordinate___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _image_coordinate.delete_ImageCoordinate

# Register ImageCoordinate in _image_coordinate:
_image_coordinate.ImageCoordinate_swigregister(ImageCoordinate)
class VicarImageCoordinate(geocal_swig.generic_object.GenericObject):
    r"""

    VICAR programs use a different convention than our ImageCoordinate.

    Instead of the upper left hand corner of the bounding box being
    (-0.5,-0.5), VICAR uses a 1-based convention where the upper left
    corner is (0.5, 0.5). This is just a difference of 1-pixel. To avoid
    any confusion, we define a VicarImageCoordinate class, and allow
    conversions to and from ImageCoordinate.

    C++ includes: image_coordinate.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::VicarImageCoordinate::VicarImageCoordinate()
        Default constructor, line and sample aren't initialized. 
        """
        _image_coordinate.VicarImageCoordinate_swiginit(self, _image_coordinate.new_VicarImageCoordinate(*args))
    line = property(_image_coordinate.VicarImageCoordinate_line_get, _image_coordinate.VicarImageCoordinate_line_set)
    sample = property(_image_coordinate.VicarImageCoordinate_sample_get, _image_coordinate.VicarImageCoordinate_sample_set)
    __str__ = _swig_new_instance_method(_image_coordinate.VicarImageCoordinate___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _image_coordinate.delete_VicarImageCoordinate

# Register VicarImageCoordinate in _image_coordinate:
_image_coordinate.VicarImageCoordinate_swigregister(VicarImageCoordinate)
class ImageCoordinateWithDerivative(geocal_swig.generic_object.GenericObject):
    r"""

    This describes an image coordinate, including the gradient of the line
    and sample.

    C++ includes: image_coordinate.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::ImageCoordinateWithDerivative::ImageCoordinateWithDerivative()
        Default constructor, line and sample aren't initialized. 
        """
        _image_coordinate.ImageCoordinateWithDerivative_swiginit(self, _image_coordinate.new_ImageCoordinateWithDerivative(*args))
    line = property(_image_coordinate.ImageCoordinateWithDerivative_line_get, _image_coordinate.ImageCoordinateWithDerivative_line_set)
    sample = property(_image_coordinate.ImageCoordinateWithDerivative_sample_get, _image_coordinate.ImageCoordinateWithDerivative_sample_set)
    value = _swig_new_instance_method(_image_coordinate.ImageCoordinateWithDerivative_value)
    __str__ = _swig_new_instance_method(_image_coordinate.ImageCoordinateWithDerivative___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _image_coordinate.delete_ImageCoordinateWithDerivative

# Register ImageCoordinateWithDerivative in _image_coordinate:
_image_coordinate.ImageCoordinateWithDerivative_swigregister(ImageCoordinateWithDerivative)
class Vector_ImageCoordinate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate___nonzero__)
    __bool__ = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate___bool__)
    __len__ = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate___len__)
    __getslice__ = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate___getslice__)
    __setslice__ = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate___setslice__)
    __delslice__ = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate___delslice__)
    __delitem__ = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate___delitem__)
    __getitem__ = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate___getitem__)
    __setitem__ = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate___setitem__)
    pop = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_pop)
    append = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_append)
    empty = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_empty)
    size = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_size)
    swap = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_swap)
    begin = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_begin)
    end = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_end)
    rbegin = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_rbegin)
    rend = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_rend)
    clear = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_clear)
    get_allocator = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_get_allocator)
    pop_back = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_pop_back)
    erase = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_erase)

    def __init__(self, *args):
        _image_coordinate.Vector_ImageCoordinate_swiginit(self, _image_coordinate.new_Vector_ImageCoordinate(*args))
    push_back = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_push_back)
    front = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_front)
    back = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_back)
    assign = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_assign)
    resize = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_resize)
    insert = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_insert)
    reserve = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_reserve)
    capacity = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinate_capacity)
    __swig_destroy__ = _image_coordinate.delete_Vector_ImageCoordinate

# Register Vector_ImageCoordinate in _image_coordinate:
_image_coordinate.Vector_ImageCoordinate_swigregister(Vector_ImageCoordinate)
class Vector_ImageCoordinatePtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr___nonzero__)
    __bool__ = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr___bool__)
    __len__ = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr___len__)
    __getslice__ = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr___getslice__)
    __setslice__ = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr___setslice__)
    __delslice__ = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr___delslice__)
    __delitem__ = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr___delitem__)
    __getitem__ = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr___getitem__)
    __setitem__ = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr___setitem__)
    pop = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_pop)
    append = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_append)
    empty = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_empty)
    size = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_size)
    swap = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_swap)
    begin = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_begin)
    end = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_end)
    rbegin = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_rbegin)
    rend = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_rend)
    clear = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_clear)
    get_allocator = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_get_allocator)
    pop_back = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_pop_back)
    erase = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_erase)

    def __init__(self, *args):
        _image_coordinate.Vector_ImageCoordinatePtr_swiginit(self, _image_coordinate.new_Vector_ImageCoordinatePtr(*args))
    push_back = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_push_back)
    front = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_front)
    back = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_back)
    assign = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_assign)
    resize = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_resize)
    insert = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_insert)
    reserve = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_reserve)
    capacity = _swig_new_instance_method(_image_coordinate.Vector_ImageCoordinatePtr_capacity)
    __swig_destroy__ = _image_coordinate.delete_Vector_ImageCoordinatePtr

# Register Vector_ImageCoordinatePtr in _image_coordinate:
_image_coordinate.Vector_ImageCoordinatePtr_swigregister(Vector_ImageCoordinatePtr)

__all__ = ["ImageCoordinate","VicarImageCoordinate","ImageCoordinateWithDerivative","Vector_ImageCoordinate","Vector_ImageCoordinatePtr"]


