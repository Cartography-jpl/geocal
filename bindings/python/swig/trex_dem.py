# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _trex_dem

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _trex_dem.SWIG_PyInstanceMethod_New
_swig_new_static_method = _trex_dem.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _trex_dem.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _trex_dem.delete_SwigPyIterator
    value = _swig_new_instance_method(_trex_dem.SwigPyIterator_value)
    incr = _swig_new_instance_method(_trex_dem.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_trex_dem.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_trex_dem.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_trex_dem.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_trex_dem.SwigPyIterator_copy)
    next = _swig_new_instance_method(_trex_dem.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_trex_dem.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_trex_dem.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_trex_dem.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_trex_dem.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_trex_dem.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_trex_dem.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_trex_dem.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_trex_dem.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_trex_dem.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _trex_dem:
_trex_dem.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _trex_dem.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.dem_map_info
import geocal_swig.dem
import geocal_swig.generic_object
import geocal_swig.cart_lab_multifile
import geocal_swig.raster_multifile
import geocal_swig.raster_image_variable
import geocal_swig.raster_image
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class TrexDemData(geocal_swig.cart_lab_multifile.VicarCartLabMultifile):
    r"""

    This is used the read the TREx data.

    This gets used by TrexDem. Although you can use this class directly,
    generally uou'll use this through TrexDem class.

    C++ includes: trex_dem.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Dir, No_coverage_is_error=True, Number_line_per_tile=-1, Number_sample_per_tile=-1, Number_tile_each_file=4, Number_file=4, Favor_memory_mapped=True):
        r"""

        TrexDemData::TrexDemData(const std::string &Dir, bool No_coverage_is_error=true, int
        Number_line_per_tile=-1, int Number_sample_per_tile=-1, int
        Number_tile_each_file=4, int Number_file=4, bool
        Favor_memory_mapped=true)
        GeoCal::TrexDemData::TrexDemData
        Constructor.
        You can provide the directory to look for TREx DEM data, or if you
        leave this blank we use the value of environment variable TREX_DATA.

        The TREX doesn't cover the whole globe. If you ask for a point outside
        of the area this can either be treated as an error, or alternatively
        you can return a value of 0 instead. This is controlled by
        No_coverage_is_error.

        There are two kinds of tiling going on. At the top level, we have a
        number of files open at one time, given by Number_file. For each file,
        we read it with tiles with the given Number_line_per_tile x
        Number_sample_per_tile, having up to Number_tile_each_file tiles. If
        the Number_line_per_tile or Number_sample_per_tile is -1 we read the
        entire file. 
        """
        _trex_dem.TrexDemData_swiginit(self, _trex_dem.new_TrexDemData(Dir, No_coverage_is_error, Number_line_per_tile, Number_sample_per_tile, Number_tile_each_file, Number_file, Favor_memory_mapped))

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _trex_dem.delete_TrexDemData

# Register TrexDemData in _trex_dem:
_trex_dem.TrexDemData_swigregister(TrexDemData)
class GdalTrexDemData(geocal_swig.cart_lab_multifile.GdalCartLabMultifile):
    r"""

    This is used the read the TREx data.

    This gets used by TrexDem. Although you can use this class directly,
    generally uou'll use this through TrexDem class.

    C++ includes: trex_dem.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Dir, No_coverage_is_error=True, Number_line_per_tile=-1, Number_sample_per_tile=-1, Number_tile_each_file=4, Number_file=4):
        r"""

        GdalTrexDemData::GdalTrexDemData(const std::string &Dir, bool No_coverage_is_error=true, int
        Number_line_per_tile=-1, int Number_sample_per_tile=-1, int
        Number_tile_each_file=4, int Number_file=4)
        GeoCal::GdalTrexDemData::GdalTrexDemData
        Constructor.
        You can provide the directory to look for TREx DEM data, or if you
        leave this blank we use the value of environment variable TREX_DATA.

        The TREX doesn't cover the whole globe. If you ask for a point outside
        of the area this can either be treated as an error, or alternatively
        you can return a value of 0 instead. This is controlled by
        No_coverage_is_error.

        There are two kinds of tiling going on. At the top level, we have a
        number of files open at one time, given by Number_file. For each file,
        we read it with tiles with the given Number_line_per_tile x
        Number_sample_per_tile, having up to Number_tile_each_file tiles. If
        the Number_line_per_tile or Number_sample_per_tile is -1 we read the
        entire file. 
        """
        _trex_dem.GdalTrexDemData_swiginit(self, _trex_dem.new_GdalTrexDemData(Dir, No_coverage_is_error, Number_line_per_tile, Number_sample_per_tile, Number_tile_each_file, Number_file))

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _trex_dem.delete_GdalTrexDemData

# Register GdalTrexDemData in _trex_dem:
_trex_dem.GdalTrexDemData_swigregister(GdalTrexDemData)
class TrexLwmData(geocal_swig.cart_lab_multifile.VicarCartLabMultifile):
    r"""

    This is used the read the TREx LWM data.

    The values are:

    0=Ocean 1=Coastline Land/Ocean transition 2=Land 3=Permanent In-Land
    Water 4=Transitional In-land Water (mostly Permanent except in drought
    years) 5=Seasonal In-land Water 6=Ephemeral In-land Water

    C++ includes: trex_dem.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    OCEAN = _trex_dem.TrexLwmData_OCEAN
    COSTLINE = _trex_dem.TrexLwmData_COSTLINE
    LAND = _trex_dem.TrexLwmData_LAND
    PERMANENT_INLAND_WATER = _trex_dem.TrexLwmData_PERMANENT_INLAND_WATER
    TRANSITIONAL_INLAND_WATER = _trex_dem.TrexLwmData_TRANSITIONAL_INLAND_WATER
    SEASONAL_INLAND_WATER = _trex_dem.TrexLwmData_SEASONAL_INLAND_WATER
    EPHEMERAL_INLAND_WATER = _trex_dem.TrexLwmData_EPHEMERAL_INLAND_WATER

    def __init__(self, *args):
        r"""

        TrexLwmData::TrexLwmData(const std::string &Dir="", bool No_coverage_is_error=true, int
        Number_line_per_tile=-1, int Number_sample_per_tile=-1, int
        Number_tile_each_file=4, int Number_file=4, bool
        Favor_memory_mapped=true)
        GeoCal::TrexLwmData::TrexLwmData
        Constructor.
        You can provide the directory to look for TREx DEM data, or if you
        leave this blank we use the value of environment variable
        TREX_LWM_DATA.

        The TREx doesn't cover the whole globe. If you ask for a point outside
        of the area this can either be treated as an error, or alternatively
        you can return a value of 0 instead. This is controlled by
        No_coverage_is_error.

        There are two kinds of tiling going on. At the top level, we have a
        number of files open at one time, given by Number_file. For each file,
        we read it with tiles with the given Number_line_per_tile x
        Number_sample_per_tile, having up to Number_tile_each_file tiles. If
        the Number_line_per_tile or Number_sample_per_tile is -1 we read the
        entire file. 
        """
        _trex_dem.TrexLwmData_swiginit(self, _trex_dem.new_TrexLwmData(*args))

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _trex_dem.delete_TrexLwmData

# Register TrexLwmData in _trex_dem:
_trex_dem.TrexLwmData_swigregister(TrexLwmData)
class TrexDem(geocal_swig.dem_map_info.DemMapInfo):
    r"""

    This class provides access to the TREx.

    C++ includes: trex_dem.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        TrexDem::TrexDem(const std::string &Dirbase="", bool Outside_dem_is_error=true,
        const boost::shared_ptr< Datum > &D=boost::shared_ptr< Datum >(new
        DatumGeoid96()))
        GeoCal::TrexDem::TrexDem
        Constructor.
        You can provide the directory where there data can be found. If you
        leave this as a blank string, we use the environment variable
        TREX_DATA. 
        """
        _trex_dem.TrexDem_swiginit(self, _trex_dem.new_TrexDem(*args))
    elevation = _swig_new_instance_method(_trex_dem.TrexDem_elevation)
    _v_directory_base = _swig_new_instance_method(_trex_dem.TrexDem__v_directory_base)

    @property
    def directory_base(self):
        return self._v_directory_base()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _trex_dem.delete_TrexDem

# Register TrexDem in _trex_dem:
_trex_dem.TrexDem_swigregister(TrexDem)
class GdalTrexDem(geocal_swig.dem_map_info.DemMapInfo):
    r"""

    This class provides access to the TREx.

    C++ includes: trex_dem.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GdalTrexDem::GdalTrexDem(const std::string &Dirbase="", bool Outside_dem_is_error=true,
        const boost::shared_ptr< Datum > &D=boost::shared_ptr< Datum >(new
        DatumGeoid96()))
        GeoCal::GdalTrexDem::GdalTrexDem
        Constructor.
        You can provide the directory where there data can be found. If you
        leave this as a blank string, we use the environment variable
        TREX_DATA. 
        """
        _trex_dem.GdalTrexDem_swiginit(self, _trex_dem.new_GdalTrexDem(*args))
    elevation = _swig_new_instance_method(_trex_dem.GdalTrexDem_elevation)
    _v_directory_base = _swig_new_instance_method(_trex_dem.GdalTrexDem__v_directory_base)

    @property
    def directory_base(self):
        return self._v_directory_base()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _trex_dem.delete_GdalTrexDem

# Register GdalTrexDem in _trex_dem:
_trex_dem.GdalTrexDem_swigregister(GdalTrexDem)

__all__ = ["TrexDem","TrexDemData","TrexLwmData","GdalTrexDem","GdalTrexDemData"]


