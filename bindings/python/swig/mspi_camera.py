# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _mspi_camera

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _mspi_camera.SWIG_PyInstanceMethod_New
_swig_new_static_method = _mspi_camera.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _mspi_camera.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mspi_camera.delete_SwigPyIterator
    value = _swig_new_instance_method(_mspi_camera.SwigPyIterator_value)
    incr = _swig_new_instance_method(_mspi_camera.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_mspi_camera.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_mspi_camera.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_mspi_camera.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_mspi_camera.SwigPyIterator_copy)
    next = _swig_new_instance_method(_mspi_camera.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_mspi_camera.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_mspi_camera.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_mspi_camera.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_mspi_camera.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_mspi_camera.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_mspi_camera.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_mspi_camera.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_mspi_camera.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_mspi_camera.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _mspi_camera:
_mspi_camera.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _mspi_camera.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.quaternion_camera
import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.camera
import geocal_swig.with_parameter
class MspiCamera(geocal_swig.quaternion_camera.QuaternionCamera):
    r"""

    This is the MSPI camera model.

    References: [1] Veljko Jovanovic, "Algorithm Theoretical Basis and
    processing software design consideration for GroundMSPI L1B2
    process", Rev A.1, April 4, 2012.

    C++ includes: mspi_camera.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::MspiCamera::MspiCamera(const std::string &File_name, const std::string
        &Extra_config_file="")
        GeoCal::MspiCamera::MspiCamera
        Constructor, which creates a MspiCamera from the given configuration file.

        """
        _mspi_camera.MspiCamera_swiginit(self, _mspi_camera.new_MspiCamera(*args))
    read_config_file = _swig_new_instance_method(_mspi_camera.MspiCamera_read_config_file)
    _v_file_name = _swig_new_instance_method(_mspi_camera.MspiCamera__v_file_name)

    @property
    def file_name(self):
        return self._v_file_name()

    @file_name.setter
    def file_name(self, value):
      self._v_file_name(value)

    _v_granule_id = _swig_new_instance_method(_mspi_camera.MspiCamera__v_granule_id)

    @property
    def granule_id(self):
        return self._v_granule_id()

    @granule_id.setter
    def granule_id(self, value):
      self._v_granule_id(value)

    _v_epsilon = _swig_new_instance_method(_mspi_camera.MspiCamera__v_epsilon)

    @property
    def epsilon(self):
        return self._v_epsilon()

    _v_psi = _swig_new_instance_method(_mspi_camera.MspiCamera__v_psi)

    @property
    def psi(self):
        return self._v_psi()

    _v_theta = _swig_new_instance_method(_mspi_camera.MspiCamera__v_theta)

    @property
    def theta(self):
        return self._v_theta()

    _v_yaw = _swig_new_instance_method(_mspi_camera.MspiCamera__v_yaw)

    @property
    def yaw(self):
        return self._v_yaw()

    _v_pitch = _swig_new_instance_method(_mspi_camera.MspiCamera__v_pitch)

    @property
    def pitch(self):
        return self._v_pitch()

    _v_roll = _swig_new_instance_method(_mspi_camera.MspiCamera__v_roll)

    @property
    def roll(self):
        return self._v_roll()

    _v_yaw_with_derivative = _swig_new_instance_method(_mspi_camera.MspiCamera__v_yaw_with_derivative)

    @property
    def yaw_with_derivative(self):
        return self._v_yaw_with_derivative()

    _v_pitch_with_derivative = _swig_new_instance_method(_mspi_camera.MspiCamera__v_pitch_with_derivative)

    @property
    def pitch_with_derivative(self):
        return self._v_pitch_with_derivative()

    _v_roll_with_derivative = _swig_new_instance_method(_mspi_camera.MspiCamera__v_roll_with_derivative)

    @property
    def roll_with_derivative(self):
        return self._v_roll_with_derivative()

    _v_boresight_angle = _swig_new_instance_method(_mspi_camera.MspiCamera__v_boresight_angle)

    @property
    def boresight_angle(self):
        return self._v_boresight_angle()

    _v_inversion = _swig_new_instance_method(_mspi_camera.MspiCamera__v_inversion)

    @property
    def inversion(self):
        return self._v_inversion()

    _v_parameter_mask = _swig_new_instance_method(_mspi_camera.MspiCamera__v_parameter_mask)

    @property
    def parameter_mask(self):
        return self._v_parameter_mask()

    @parameter_mask.setter
    def parameter_mask(self, value):
      self._v_parameter_mask(value)

    _v_paraxial_transform = _swig_new_instance_method(_mspi_camera.MspiCamera__v_paraxial_transform)

    @property
    def paraxial_transform(self):
        return self._v_paraxial_transform()

    angular_separation = _swig_new_instance_method(_mspi_camera.MspiCamera_angular_separation)
    paraxial_offset = _swig_new_instance_method(_mspi_camera.MspiCamera_paraxial_offset)
    row_number = _swig_new_instance_method(_mspi_camera.MspiCamera_row_number)
    band_number = _swig_new_instance_method(_mspi_camera.MspiCamera_band_number)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _mspi_camera.delete_MspiCamera

# Register MspiCamera in _mspi_camera:
_mspi_camera.MspiCamera_swigregister(MspiCamera)

__all__ = ["MspiCamera"]


