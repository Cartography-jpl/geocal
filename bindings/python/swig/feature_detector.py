# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _feature_detector.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_feature_detector', [dirname(__file__)])
        except ImportError:
            import _feature_detector
            return _feature_detector
        if fp is not None:
            try:
                _mod = imp.load_module('_feature_detector', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _feature_detector = swig_import_helper()
    del swig_import_helper
else:
    import _feature_detector
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _feature_detector.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_feature_detector.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_feature_detector.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_feature_detector.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_feature_detector.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_feature_detector.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_feature_detector.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_feature_detector.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_feature_detector.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_feature_detector.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_feature_detector.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_feature_detector.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_feature_detector.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_feature_detector.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_feature_detector.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_feature_detector.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_feature_detector.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _feature_detector.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_feature_detector.SHARED_PTR_DISOWN_swigconstant(_feature_detector)
SHARED_PTR_DISOWN = _feature_detector.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
class InterestPoint(geocal_swig.generic_object.GenericObject):
    """

    This is an interest point, determined by a FeatureDetector.

    C++ includes: feature_detector.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        GeoCal::InterestPoint::InterestPoint(const ImageCoordinate &Ic, double Weight)
        Constructor. 
        """
        _feature_detector.InterestPoint_swiginit(self, _feature_detector.new_InterestPoint(*args))
    image_coordinate = _swig_property(_feature_detector.InterestPoint_image_coordinate_get, _feature_detector.InterestPoint_image_coordinate_set)
    weight = _swig_property(_feature_detector.InterestPoint_weight_get, _feature_detector.InterestPoint_weight_set)

    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _feature_detector.delete_InterestPoint
InterestPoint.__str__ = new_instancemethod(_feature_detector.InterestPoint___str__, None, InterestPoint)
InterestPoint.compare = new_instancemethod(_feature_detector.InterestPoint_compare, None, InterestPoint)
InterestPoint_swigregister = _feature_detector.InterestPoint_swigregister
InterestPoint_swigregister(InterestPoint)

class FeatureDetector(geocal_swig.generic_object.GenericObject):
    """

    This class detects interest points in an image.

    An interest point is one that is good for image matching by some sort
    of criteria. For example, a common feature detector is one that tries
    to detect corners, with the idea that these are good choices for doing
    image matching on.

    C++ includes: feature_detector.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def interest_point_detect(self, Img):
        """

        virtual std::vector<InterestPoint> GeoCal::FeatureDetector::interest_point_detect(const RasterImage &Img) const  =0
        Go through a RasterImage, and return a list of InterstPoints for it.

        The list isn't in any particular order, but note that InterstPoints
        have a natural order by the weight, and you can sort the points if
        desired using std::sort, or just pick at the "best" point by
        std::max_element. 
        """
        return _feature_detector.FeatureDetector_interest_point_detect(self, Img)


    def _interest_point_grid_raw(self, *args):
        """

        boost::shared_ptr< ImageCoordinate > FeatureDetector::interest_point_grid_ptr(const RasterImage &Img, int i, int j, int Number_grid_line, int
        Number_grid_sample, int Border=0) const
        Python much prefers getting shared_ptr back, so we have this variation
        that wraps that.

        We also return only a single point. This is a somewhat awkward
        interface, but it gets wrapped into a interest_point_grid function in
        python, possibly doing processing in parallel. 
        """
        return _feature_detector.FeatureDetector__interest_point_grid_raw(self, *args)

    __swig_destroy__ = _feature_detector.delete_FeatureDetector
FeatureDetector.interest_point_detect = new_instancemethod(_feature_detector.FeatureDetector_interest_point_detect, None, FeatureDetector)
FeatureDetector._interest_point_grid_raw = new_instancemethod(_feature_detector.FeatureDetector__interest_point_grid_raw, None, FeatureDetector)
FeatureDetector.__str__ = new_instancemethod(_feature_detector.FeatureDetector___str__, None, FeatureDetector)
FeatureDetector_swigregister = _feature_detector.FeatureDetector_swigregister
FeatureDetector_swigregister(FeatureDetector)

class Vector_InterestPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _feature_detector.Vector_InterestPoint_swiginit(self, _feature_detector.new_Vector_InterestPoint(*args))
    __swig_destroy__ = _feature_detector.delete_Vector_InterestPoint
Vector_InterestPoint.iterator = new_instancemethod(_feature_detector.Vector_InterestPoint_iterator, None, Vector_InterestPoint)
Vector_InterestPoint.__nonzero__ = new_instancemethod(_feature_detector.Vector_InterestPoint___nonzero__, None, Vector_InterestPoint)
Vector_InterestPoint.__bool__ = new_instancemethod(_feature_detector.Vector_InterestPoint___bool__, None, Vector_InterestPoint)
Vector_InterestPoint.__len__ = new_instancemethod(_feature_detector.Vector_InterestPoint___len__, None, Vector_InterestPoint)
Vector_InterestPoint.pop = new_instancemethod(_feature_detector.Vector_InterestPoint_pop, None, Vector_InterestPoint)
Vector_InterestPoint.__getslice__ = new_instancemethod(_feature_detector.Vector_InterestPoint___getslice__, None, Vector_InterestPoint)
Vector_InterestPoint.__setslice__ = new_instancemethod(_feature_detector.Vector_InterestPoint___setslice__, None, Vector_InterestPoint)
Vector_InterestPoint.__delslice__ = new_instancemethod(_feature_detector.Vector_InterestPoint___delslice__, None, Vector_InterestPoint)
Vector_InterestPoint.__delitem__ = new_instancemethod(_feature_detector.Vector_InterestPoint___delitem__, None, Vector_InterestPoint)
Vector_InterestPoint.__getitem__ = new_instancemethod(_feature_detector.Vector_InterestPoint___getitem__, None, Vector_InterestPoint)
Vector_InterestPoint.__setitem__ = new_instancemethod(_feature_detector.Vector_InterestPoint___setitem__, None, Vector_InterestPoint)
Vector_InterestPoint.append = new_instancemethod(_feature_detector.Vector_InterestPoint_append, None, Vector_InterestPoint)
Vector_InterestPoint.empty = new_instancemethod(_feature_detector.Vector_InterestPoint_empty, None, Vector_InterestPoint)
Vector_InterestPoint.size = new_instancemethod(_feature_detector.Vector_InterestPoint_size, None, Vector_InterestPoint)
Vector_InterestPoint.clear = new_instancemethod(_feature_detector.Vector_InterestPoint_clear, None, Vector_InterestPoint)
Vector_InterestPoint.swap = new_instancemethod(_feature_detector.Vector_InterestPoint_swap, None, Vector_InterestPoint)
Vector_InterestPoint.get_allocator = new_instancemethod(_feature_detector.Vector_InterestPoint_get_allocator, None, Vector_InterestPoint)
Vector_InterestPoint.begin = new_instancemethod(_feature_detector.Vector_InterestPoint_begin, None, Vector_InterestPoint)
Vector_InterestPoint.end = new_instancemethod(_feature_detector.Vector_InterestPoint_end, None, Vector_InterestPoint)
Vector_InterestPoint.rbegin = new_instancemethod(_feature_detector.Vector_InterestPoint_rbegin, None, Vector_InterestPoint)
Vector_InterestPoint.rend = new_instancemethod(_feature_detector.Vector_InterestPoint_rend, None, Vector_InterestPoint)
Vector_InterestPoint.pop_back = new_instancemethod(_feature_detector.Vector_InterestPoint_pop_back, None, Vector_InterestPoint)
Vector_InterestPoint.erase = new_instancemethod(_feature_detector.Vector_InterestPoint_erase, None, Vector_InterestPoint)
Vector_InterestPoint.push_back = new_instancemethod(_feature_detector.Vector_InterestPoint_push_back, None, Vector_InterestPoint)
Vector_InterestPoint.front = new_instancemethod(_feature_detector.Vector_InterestPoint_front, None, Vector_InterestPoint)
Vector_InterestPoint.back = new_instancemethod(_feature_detector.Vector_InterestPoint_back, None, Vector_InterestPoint)
Vector_InterestPoint.assign = new_instancemethod(_feature_detector.Vector_InterestPoint_assign, None, Vector_InterestPoint)
Vector_InterestPoint.resize = new_instancemethod(_feature_detector.Vector_InterestPoint_resize, None, Vector_InterestPoint)
Vector_InterestPoint.insert = new_instancemethod(_feature_detector.Vector_InterestPoint_insert, None, Vector_InterestPoint)
Vector_InterestPoint.reserve = new_instancemethod(_feature_detector.Vector_InterestPoint_reserve, None, Vector_InterestPoint)
Vector_InterestPoint.capacity = new_instancemethod(_feature_detector.Vector_InterestPoint_capacity, None, Vector_InterestPoint)
Vector_InterestPoint_swigregister = _feature_detector.Vector_InterestPoint_swigregister
Vector_InterestPoint_swigregister(Vector_InterestPoint)



