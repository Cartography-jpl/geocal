#! /usr/bin/env python
from geocal import *
import os
import subprocess
import logging
import time
from contextlib import contextmanager
import glob

version = "October 29, 2013"
usage='''Usage:
  abachd [options] <pre_pan> <post_pan> <post_ms> <output>
  abachd [options] --pre-ms <pre_pan> <pre_ms> <post_pan> <output>
  abachd [options] --no-ms <pre_pan> <post_pan> <output>
  abachd [options] --subset <start_line> <start_sample> 
        <number_line> <number_sample> <pre_pan> <post_pan> <post_ms> <output>
  abachd [options] --pre-ms --subset <start_line> <start_sample> 
        <number_line> <number_sample> <pre_pan> <pres_ms> <post_pan> <output>
  abachd [options] --no-ms --subset <start_line> <start_sample> 
        <number_line> <number_sample> <pre_pan> <post_pan> <output>
  abachd -h | --help
  abachd -v | --version

This program does the ABAChD change detection process. The output is
a directory (created if it doesn't already exist), where all the
output files are placed.

If you supply the subset, this is in terms of the raw pre_pan image. We
subset the post_pan image to match the pre_pan image on the ground (using
the original DEM). 

Note it is assumed that the IMD files have the same name as the NITF files,
but with ".NTF" replaced with ".IMD". We generally have that. We can allow
more complicated arguments to specify this is more detail if needed, but 
for now just assume that.

If the IMD files are not available, then we can work with just the
NITF files.  We use assumed constants for the absolute calibration
factor and effective bandwidths (which are reported in the IMD file,
but not the NITF file). The effective band widths appear to be
constant over time, but the absolute calibration scale factor is
*not*, so using NITF files will *not* give the same results as using a
IMD file.

You don't need to do anything special if the IMD file isn't available, this
script just looks for the file and if it doesn't find it then it uses the
NITF files.

Options:
  -h --help         
       Print this message

  --aoi=f
       Subset the input data so it just covers the AOI. This should be a 
       mapinfo.

  --dem-file=f
       Can optionally specify a DEM file to use. The default is to use the
       SRTM Level 2 data.

  --diagnostic
       Generate files that we don't actually need for processing, but can
       be useful for diagnostic (e.g., the normdiff.hlf)

  --no-ms
       Don't have any multispectral data.

  --number-process=n
       Number of processors to use. [default: 1]

  --pre-ms
       The default is to use the multispectral image going with the post
       panchromatic image. However, in some cases we might not have that 
       data.

  --resolution=f
       The resolution of the final images (note intermediate files may be
       at a different resolution. [default: 0.5]

  --subset  start_line start_sample number_line number_sample
       Subset the pre_pan raw image, and the subset the post image to match
       the ground location of the pre_pan image.

  --verbose
       Print more information as we run.

  -v --version      
       Print program version
'''

args = docopt_simple(usage, version=version)
tstart = time.time()

# Get input files
# Note that we really do want abspath here, not realpath. It is common to
# use symbolic links to collect data together, and the IMD file going with a
# nitf file may appear in the same directory, but be links to separate directories. 
pre_pan_raw = os.path.abspath(args.pre_pan)
if(args.pre_ms):
    pre_ms_raw = os.path.abspath(args.pre_ms)
else:
    pre_ms_raw = None
post_pan_raw = os.path.abspath(args.post_pan)
if(args.post_ms):
    post_ms_raw = os.path.abspath(args.post_ms)
else:
    post_ms_raw = None

# Few things that appear often enough that it is worth stashing.
dbfile = "end_to_end.db"
nproc = "--number-process=%d" % args.number_process

# A few helper functions
def shelve_image(fname, name, subset = None, multi_band = False):
    cmd = ["shelve_image"] 
    if(subset is not None):
        cmd.append("--subset")
        for i in subset:
            cmd.append(str(i))
    if(multi_band):
        cmd.append("--multi-band")
    cmd.append(fname)
    cmd.append(dbfile + ":" + name)
    subprocess.check_call(cmd)

def generate_image(fname, name_in, name, subset = None):
    # Producing data as 1000x1000 seems to go much faster
    subprocess.check_call(["write_image", 
                           nproc, dbfile + ":" + name_in,
                           "--process-number-line=1000", 
                           "--process-number-sample=1000",
                           fname])
    shelve_image(fname, name)

def generate_image_ms(fname, name_in, name, subset = None):
    nband = read_shelve(dbfile + ":" + name_in).number_band
    # Producing data as 1000x1000 seems to go much faster
    cmd = ["write_image", nproc, dbfile + ":" + name_in,
           "--process-number-line=1000", "--process-number-sample=1000"]
    # Don't think we actually need this anymore
    #if(args.verbose):
    #    cmd.append("--verbose")
    for i in range(1, nband + 1):
        cmd.append("%s_b%d.hlf" % (fname, i))
    subprocess.check_call(cmd)
    shelve_image(fname + "_b1:%d.hlf" % nband, name)

@contextmanager
def timing(txt):
    logstep.info(txt)
    for h in log.handlers:
        h.flush()
    tstart2 = time.time()
    yield
    log.info("Delta Time: %f" % (time.time() - tstart2))
    log.info("Total Time: %f" % (time.time() - tstart))
    for h in log.handlers:
        h.flush()

def determine_subset(fname):
    subset = None
    if(args.start_line):
        dem = read_shelve(dbfile + ":dem_initial")
        igc1 = VicarImageGroundConnection("pre_pan_raw.hlf", dem)
        igc2 = GdalImageGroundConnection(fname, dem)
        ulc = igc2.image_coordinate(igc1.ground_coordinate(ImageCoordinate(0, 0)))
        lrc = igc2.image_coordinate(igc1.ground_coordinate(ImageCoordinate(igc1.number_line, igc1.number_sample)))
        sl = max(int(floor(ulc.line)), 0)
        ss = max(int(floor(ulc.sample)), 0)
        el = min(int(ceil(lrc.line)), igc2.number_line - 1)
        es = min(int(ceil(lrc.sample)), igc2.number_sample - 1)
        igc1 = None
        igc2 = None
        subset = [sl, ss, el - sl + 1, es - ss + 1]
    elif(args.aoi):
        dem = read_shelve(dbfile + ":dem_initial")
        aoi = read_shelve(args.aoi)
        igc = GdalImageGroundConnection(fname, dem)
        ulc_g = dem.surface_p(aoi.ground_coordinate(0,0))
        lrc_g = dem.surface_p(aoi.ground_coordinate(aoi.number_x_pixel,
                                                    aoi.number_y_pixel))
        ulc = igc.image_coordinate(ulc_g)
        lrc = igc.image_coordinate(lrc_g)
        sl = min(max(int(floor(ulc.line), 0), igc.number_line))
        ss = min(max(int(floor(ulc.sample), 0), igc.number_sample))
        el = min(max(int(floor(lrc.line), 0), igc.number_line))
        es = min(max(int(floor(lrc.sample), 0), igc.number_sample))
        if(sl > el):
            t = sl
            sl = el
            el = t
        if(ss > es):
            t = ss
            ss = es
            es = t
        igc = None
        subset = [sl, ss, el - sl + 1, es - ss + 1]
    return subset

def import_image(fname, name, subset = None):
    shelve_image(fname, "%s_raw" % name, subset = subset)
    with timing("Importing %s image" % name):
        subprocess.check_call(["write_image", 
                               "--process-number-line=2048",
                               "--process-number-sample=2048",
                               nproc, dbfile + ":%s_raw" % name, name + ".hlf"])
    shelve_image(name + ".hlf", name)

def import_image_ms(fname, name, subset = None):
    shelve_image(fname, "%s_raw" % name, subset = subset, 
                 multi_band = True)
    nband = read_shelve(dbfile + ":%s_raw" % name).number_band
    with timing("Importing %s image" % name):
        cmd = ["write_image", 
               "--process-number-line=2048",
               "--process-number-sample=2048",
               nproc, dbfile + ":%s_raw" % name]
        for i in range(1, nband + 1):
            cmd.append("%s_b%d.hlf" % (name, i))
        subprocess.check_call(cmd)
    shelve_image("%s_b1:%d.hlf" % (name, i), name, multi_band = True)

def dem_generate():
    with timing("DEM generation"):
        subprocess.check_call(["dem_generate", "--resolution=5.0", 
                               dbfile + ":igc_sba", dbfile + ":initial_surf1", 
                               dbfile + ":initial_surf2",
                               "0", "1", dbfile + ":dem_generate"])
        cmd = ["write_image", "--vicar-type=DOUB", "--no-data-value=-9999",
               "--log-file=logfile.log",
               nproc, dbfile + ":dem_generate", "dem_generate.img",
               "dem_generate_filled.img"]
        if(args.verbose):
            cmd.append("--verbose")
        subprocess.check_call(cmd)
        subprocess.check_call(["shelve_dem", 
                               "--outside-dem-not-error",
                               "dem_generate_filled.img",
                               dbfile + ":dem_generate_filled"])
        # Create mask
        f = VicarLiteRasterImage("dem_generate_filled.img")
        fv = int(float(f.file.label_string("NODATA")))
        gmask = GroundMaskImage(f, fv, True)
        write_shelve("end_to_end.db:dem_mask", gmask)
        gmask = None
        f = None

# 1. Create the output directory, if it doesn't already exist, and
# set up logger
subprocess.check_call(["mkdir", "-p", args.output])
os.chdir(args.output)
logging.basicConfig(level = logging.INFO,
                    filename = "logfile.log",
                    format = '%(asctime)s %(levelname)s:%(name)s:%(message)s',
                    filemode='w')
log = logging.getLogger("abachd")
logstep = logging.getLogger("abachd-step")
pfile = logging.FileHandler("process-step.log")
pfile.setLevel(logging.INFO)
pfile.setFormatter(logging.Formatter('%(message)s'))
logstep.addHandler(pfile)
if(args.verbose):
    console = logging.StreamHandler(stream=sys.stdout)
    console.setLevel(logging.INFO)
    console.setFormatter(logging.Formatter('%(levelname)s:%(name)s:%(message)s'))
    log.addHandler(console)
    logstep.addHandler(console)


# 2. Initial DEM
if(args.dem_file):
    subprocess.check_call(["shelve_dem", args.dem_file, 
                           dbfile + ":dem_initial"])
else:
    subprocess.check_call(["shelve_dem", "--srtm", dbfile + ":dem_initial"])

# 3. Import the images to vicar
subset = None
if(args.start_line):
    subset = [args.start_line, args.start_sample, args.number_line,
              args.number_sample]
if(args.aoi):
    susbet = determine_subset(pre_pan_raw)

import_image(pre_pan_raw, "pre_pan_raw", subset = subset)
if(pre_ms_raw):
    import_image_ms(pre_ms_raw, "pre_raw_ms", subset = determine_subset(pre_ms_raw))
import_image(post_pan_raw, "post_pan_raw", subset = determine_subset(post_pan_raw))
if(post_ms_raw):
    import_image_ms(post_ms_raw, "post_raw_ms", 
                   subset = determine_subset(post_ms_raw))

# 4. Create initial igccol
subprocess.check_call(["shelve_igccol", "--rpc-line-fit=0",
                       "--rpc-sample-fit=0", dbfile + ":igc_initial",
                       dbfile + ":dem_initial",
                       "pre_pan_raw.hlf", "Pre Pan", "post_pan_raw.hlf", 
                       "Post pan"])
if(pre_ms_raw):
    subprocess.check_call(["shelve_igccol", "--image-from-shelve",
                           "--image-ground-connection",
                           dbfile + ":igc_pre_ms_initial",
                           dbfile + ":dem_initial",                           
                           dbfile + ":pre_raw_ms",
                           "Pre Multi-spectral"])
if(post_ms_raw):
    subprocess.check_call(["shelve_igccol", "--image-from-shelve",
                           "--image-ground-connection",
                           dbfile + ":igc_post_ms_initial",
                           dbfile + ":dem_initial",                           
                           dbfile + ":post_raw_ms",
                           "Post Multi-spectral"])

# 5. Collect tie points
with timing("Collecting tiepoints"):
    subprocess.check_call(["tp_collect", dbfile + ":igc_initial", 
                           dbfile + ":tpcol", nproc])

# 6. SBA
cmd = ["sba", "--dem-height-block-adjust", "--log-file=logfile.log",
       dbfile + ":igc_initial",
       dbfile + ":tpcol", dbfile + ":igc_sba", dbfile + ":tpcol_sba"]
if(args.verbose):
    cmd.append("--verbose")
with timing("Doing SBA"):
    subprocess.check_call(cmd)

# 7. Initial projection to surface, for DEM generation.
# Determine image resolution, by going the nearest multiple of 0.1 (e.g., 0.8)
igc_sba = read_shelve(dbfile + ":igc_sba")
res = round(igc_sba.image_ground_connection(0).resolution_meter() * 10) / 10.0
with timing("Initial orthorectification initial_surf1"):
    subprocess.check_call(["igc_project", "--grid-spacing=10",
                           "--resolution=%f" % res, dbfile + ":igc_sba",
                           "0", dbfile + ":initial_surf1_init"])
    generate_image("initial_surf1.hlf", "initial_surf1_init", "initial_surf1")
with timing("Initial orthorectification initial_surf2"):
    subprocess.check_call(["igc_project", "--grid-spacing=10",
                           "--map-info=" + dbfile + ":initial_surf1_init",
                           dbfile + ":igc_sba",
                           "1", dbfile + ":initial_surf2_init"])
    generate_image("initial_surf2.hlf", "initial_surf2_init", "initial_surf2")
if(pre_ms_raw):
    subprocess.check_call(["pan_to_ms_igc", dbfile + ":igc_initial", "0",
                           dbfile + ":igc_sba", "0",
                           dbfile + ":igc_pre_ms_initial",
                           dbfile + ":igc_pre_ms_sba"])
if(post_ms_raw):
    subprocess.check_call(["pan_to_ms_igc", dbfile + ":igc_initial", "1",
                           dbfile + ":igc_sba", "1",
                           dbfile + ":igc_post_ms_initial",
                           dbfile + ":igc_post_ms_sba"])

# 8. DEM generation
dem_generate()

# 9. Do final projection to surface, using the DEM.
with timing("Final orthorectification image 1"):
    # This doesn't work yet, because we don't have a mask on the DEM. 
    # We'll want to come back to this, but for now just use same size as
    # with the initial images.
    subprocess.check_call(["igc_project", 
                           "--resolution=%f" % args.resolution, 
                           "--bounding-box=" + dbfile + ":dem_generate_filled",
                           "--ground-mask=" + dbfile + ":dem_mask",
                           dbfile + ":igc_sba",
                           "--dem=" + dbfile + ":dem_generate_filled",
                           "0", dbfile + ":pre_reg_init"])
    generate_image("pre_reg.hlf", "pre_reg_init", "pre_reg")
with timing("Final orthorectification image 2"):
    subprocess.check_call(["igc_project", 
                           "--map-info=" + dbfile + ":pre_reg_init",
                           "--ground-mask=" + dbfile + ":dem_mask",
                           dbfile + ":igc_sba",
                           "--dem=" + dbfile + ":dem_generate_filled",
                           "1", dbfile + ":post_reg_init"])
    generate_image("post_reg.hlf", "post_reg_init", "post_reg")
if(pre_ms_raw):
    with timing("Final Pre Multi-spectral orthorectification"):
        subprocess.check_call(["igc_project",
                           "--map-info=" + dbfile + ":pre_reg_init",
                           "--ground-mask=" + dbfile + ":dem_mask",
                           "--dem=" + dbfile + ":dem_generate_filled",
                           dbfile + ":igc_pre_ms_sba",
                           dbfile + ":pre_reg_ms_init"])
        generate_image_ms("pre_reg_ms", "pre_reg_ms_init", "pre_reg_ms")
if(post_ms_raw):
    with timing("Final Post Multi-spectral orthorectification"):
        subprocess.check_call(["igc_project",
                           "--map-info=" + dbfile + ":pre_reg_init",
                           "--ground-mask=" + dbfile + ":dem_mask",
                           "--dem=" + dbfile + ":dem_generate_filled",
                           dbfile + ":igc_post_ms_sba",
                           dbfile + ":post_reg_ms_init"])
        generate_image_ms("post_reg_ms", "post_reg_ms_init", "post_reg_ms")


# 10. Convert to reflectance and generate normdiff image.
pre_pan_imd_or_ntf = os.path.splitext(pre_pan_raw)[0] + ".IMD"
post_pan_imd_or_ntf = os.path.splitext(post_pan_raw)[0] + ".IMD"

# If IMD files aren't available, use the NITF file instead
if(not os.path.exists(pre_pan_imd_or_ntf)):
    pre_pan_imd_or_ntf = pre_pan_raw
if(not os.path.exists(post_pan_imd_or_ntf)):
    post_pan_imd_or_ntf = post_pan_raw

subprocess.check_call(["convert_reflectance", 
                       "--wv2-pan=" + pre_pan_imd_or_ntf,
                       dbfile + ":pre_reg", dbfile + ":refl1"])
subprocess.check_call(["convert_reflectance", 
                       "--wv2-pan=" + post_pan_imd_or_ntf,
                       dbfile + ":post_reg", dbfile + ":refl2"])
subprocess.check_call(["doughnut_diff", dbfile + ":refl1", 
                       dbfile + ":refl2", dbfile + ":normdiff",
                       dbfile + ":normdiff_and_cvdnorm"])


# 11. Generate diagnostic files.
if(args.diagnostic):
    with timing("Diagnostic pre_reg  file"):
        subprocess.check_call(["write_image", "--vicar-type=HALF",
                               "--scale=10000", 
                               "--process-number-line=1000",
                               "--process-number-sample=1000",
                               nproc, 
                               dbfile + ":refl1",
                               "pre_reg_refl.hlf"])
    with timing("Diagnostic post_reg  file"):
        subprocess.check_call(["write_image", "--vicar-type=HALF",
                               "--scale=10000", 
                               "--process-number-line=1000",
                               "--process-number-sample=1000",
                               nproc, 
                               dbfile + ":refl2",
                               "post_reg_refl.hlf"])
    with timing("Diagnostic normdiff and cvdnorm file"):
        subprocess.check_call(["write_image", "--vicar-type=HALF",
                               "--scale=10000", 
                               "--process-number-line=1000",
                               "--process-number-sample=1000",
                               nproc, 
                               dbfile + ":normdiff_and_cvdnorm",
                               "diff_norm.hlf", "pre_norm.hlf"])
    with timing("Accuracy check"):
        res = subprocess.check_output(["vicarb", "accck", "pre_reg.hlf",
                                       "post_reg.hlf",  "magnif=1",
                                       "fftsize=128", "outnl=1200", 
                                       "remap=n", "seq=qr",  'echo=n',
                                       "labeladd=y", "rmscrit=90.0"])
        for ln in res.split('\n'):
            if(re.match(r'^MSG', ln)):
                log.info(ln)
        for f in glob.glob("xxx*"):
            os.remove(f)


    
