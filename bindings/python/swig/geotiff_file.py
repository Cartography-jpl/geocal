# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _geotiff_file

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _geotiff_file.SWIG_PyInstanceMethod_New
_swig_new_static_method = _geotiff_file.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _geotiff_file.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _geotiff_file.delete_SwigPyIterator
    value = _swig_new_instance_method(_geotiff_file.SwigPyIterator_value)
    incr = _swig_new_instance_method(_geotiff_file.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_geotiff_file.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_geotiff_file.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_geotiff_file.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_geotiff_file.SwigPyIterator_copy)
    next = _swig_new_instance_method(_geotiff_file.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_geotiff_file.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_geotiff_file.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_geotiff_file.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_geotiff_file.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_geotiff_file.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_geotiff_file.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_geotiff_file.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_geotiff_file.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_geotiff_file.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _geotiff_file:
_geotiff_file.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _geotiff_file.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
class GeotiffFile(geocal_swig.generic_object.GenericObject):
    r"""

    Provide direct access to a GeoTiff file.

    Note that this is a pretty low level class, you almost certainly don't
    want to be using this but instead want something like a
    GdalRasterImage. But this class if useful if you need to do low level
    things with a geotiff file like directly read and write geotiff tags.

    A note on the hardcode values/protypes:

    Normally we wouldn't have prototypes and hard coded values defined
    directly in a class. However, we have a special case. We know that
    GDAL will supply the GeoTIFF library, because if it isn't found on the
    system GDAL will use its own private copy. However, we don't know that
    the GeoTIFF headers will be available. GDAL doesn't install them, and
    unless there is a another copy of GeoTIFF available they won't be
    found. Since it is entirely possible to have GDAL installed but
    GeoTIFF not, we don't want to add a dependency on this library that we
    don't really need. So, we define the prototypes here. There is a risk
    that these prototypes will become out of date, in which case we'll
    need to update these. But the GeoTIFF library hasn't changed in some
    time, so the trade against adding a dependency is probably a good one.

    An update - the newer version of gdal doesn't have the same symbols
    exposed. So we can't depend on gdal. We have a direct dependency on
    geotiff. We can remove the hardcoded stuff at some point, but for now
    just leave in place since we already have that.

    C++ includes: geotiff_file.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GTModelTypeGeoKey = _geotiff_file.GeotiffFile_GTModelTypeGeoKey
    GTRasterTypeGeoKey = _geotiff_file.GeotiffFile_GTRasterTypeGeoKey
    GTCitationGeoKey = _geotiff_file.GeotiffFile_GTCitationGeoKey
    GeographicTypeGeoKey = _geotiff_file.GeotiffFile_GeographicTypeGeoKey
    GeogCitationGeoKey = _geotiff_file.GeotiffFile_GeogCitationGeoKey
    GeogGeodeticDatumGeoKey = _geotiff_file.GeotiffFile_GeogGeodeticDatumGeoKey
    GeogPrimeMeridianGeoKey = _geotiff_file.GeotiffFile_GeogPrimeMeridianGeoKey
    GeogLinearUnitsGeoKey = _geotiff_file.GeotiffFile_GeogLinearUnitsGeoKey
    GeogLinearUnitSizeGeoKey = _geotiff_file.GeotiffFile_GeogLinearUnitSizeGeoKey
    GeogAngularUnitsGeoKey = _geotiff_file.GeotiffFile_GeogAngularUnitsGeoKey
    GeogAngularUnitSizeGeoKey = _geotiff_file.GeotiffFile_GeogAngularUnitSizeGeoKey
    GeogEllipsoidGeoKey = _geotiff_file.GeotiffFile_GeogEllipsoidGeoKey
    GeogSemiMajorAxisGeoKey = _geotiff_file.GeotiffFile_GeogSemiMajorAxisGeoKey
    GeogSemiMinorAxisGeoKey = _geotiff_file.GeotiffFile_GeogSemiMinorAxisGeoKey
    GeogInvFlatteningGeoKey = _geotiff_file.GeotiffFile_GeogInvFlatteningGeoKey
    GeogAzimuthUnitsGeoKey = _geotiff_file.GeotiffFile_GeogAzimuthUnitsGeoKey
    GeogPrimeMeridianLongGeoKey = _geotiff_file.GeotiffFile_GeogPrimeMeridianLongGeoKey
    ProjectedCSTypeGeoKey = _geotiff_file.GeotiffFile_ProjectedCSTypeGeoKey
    PCSCitationGeoKey = _geotiff_file.GeotiffFile_PCSCitationGeoKey
    ProjectionGeoKey = _geotiff_file.GeotiffFile_ProjectionGeoKey
    ProjCoordTransGeoKey = _geotiff_file.GeotiffFile_ProjCoordTransGeoKey
    ProjLinearUnitsGeoKey = _geotiff_file.GeotiffFile_ProjLinearUnitsGeoKey
    ProjLinearUnitSizeGeoKey = _geotiff_file.GeotiffFile_ProjLinearUnitSizeGeoKey
    ProjStdParallel1GeoKey = _geotiff_file.GeotiffFile_ProjStdParallel1GeoKey
    ProjStdParallelGeoKey = _geotiff_file.GeotiffFile_ProjStdParallelGeoKey
    ProjStdParallel2GeoKey = _geotiff_file.GeotiffFile_ProjStdParallel2GeoKey
    ProjNatOriginLongGeoKey = _geotiff_file.GeotiffFile_ProjNatOriginLongGeoKey
    ProjOriginLongGeoKey = _geotiff_file.GeotiffFile_ProjOriginLongGeoKey
    ProjNatOriginLatGeoKey = _geotiff_file.GeotiffFile_ProjNatOriginLatGeoKey
    ProjOriginLatGeoKey = _geotiff_file.GeotiffFile_ProjOriginLatGeoKey
    ProjFalseEastingGeoKey = _geotiff_file.GeotiffFile_ProjFalseEastingGeoKey
    ProjFalseNorthingGeoKey = _geotiff_file.GeotiffFile_ProjFalseNorthingGeoKey
    ProjFalseOriginLongGeoKey = _geotiff_file.GeotiffFile_ProjFalseOriginLongGeoKey
    ProjFalseOriginLatGeoKey = _geotiff_file.GeotiffFile_ProjFalseOriginLatGeoKey
    ProjFalseOriginEastingGeoKey = _geotiff_file.GeotiffFile_ProjFalseOriginEastingGeoKey
    ProjFalseOriginNorthingGeoKey = _geotiff_file.GeotiffFile_ProjFalseOriginNorthingGeoKey
    ProjCenterLongGeoKey = _geotiff_file.GeotiffFile_ProjCenterLongGeoKey
    ProjCenterLatGeoKey = _geotiff_file.GeotiffFile_ProjCenterLatGeoKey
    ProjCenterEastingGeoKey = _geotiff_file.GeotiffFile_ProjCenterEastingGeoKey
    ProjCenterNorthingGeoKey = _geotiff_file.GeotiffFile_ProjCenterNorthingGeoKey
    ProjScaleAtNatOriginGeoKey = _geotiff_file.GeotiffFile_ProjScaleAtNatOriginGeoKey
    ProjScaleAtOriginGeoKey = _geotiff_file.GeotiffFile_ProjScaleAtOriginGeoKey
    ProjScaleAtCenterGeoKey = _geotiff_file.GeotiffFile_ProjScaleAtCenterGeoKey
    ProjAzimuthAngleGeoKey = _geotiff_file.GeotiffFile_ProjAzimuthAngleGeoKey
    ProjStraightVertPoleLongGeoKey = _geotiff_file.GeotiffFile_ProjStraightVertPoleLongGeoKey
    ProjRectifiedGridAngleGeoKey = _geotiff_file.GeotiffFile_ProjRectifiedGridAngleGeoKey
    VerticalCSTypeGeoKey = _geotiff_file.GeotiffFile_VerticalCSTypeGeoKey
    VerticalCitationGeoKey = _geotiff_file.GeotiffFile_VerticalCitationGeoKey
    VerticalDatumGeoKey = _geotiff_file.GeotiffFile_VerticalDatumGeoKey
    VerticalUnitsGeoKey = _geotiff_file.GeotiffFile_VerticalUnitsGeoKey
    TYPE_BYTE = _geotiff_file.GeotiffFile_TYPE_BYTE
    TYPE_SHORT = _geotiff_file.GeotiffFile_TYPE_SHORT
    TYPE_LONG = _geotiff_file.GeotiffFile_TYPE_LONG
    TYPE_RATIONAL = _geotiff_file.GeotiffFile_TYPE_RATIONAL
    TYPE_ASCII = _geotiff_file.GeotiffFile_TYPE_ASCII
    TYPE_FLOAT = _geotiff_file.GeotiffFile_TYPE_FLOAT
    TYPE_DOUBLE = _geotiff_file.GeotiffFile_TYPE_DOUBLE
    TYPE_SBYTE = _geotiff_file.GeotiffFile_TYPE_SBYTE
    TYPE_SSHORT = _geotiff_file.GeotiffFile_TYPE_SSHORT
    TYPE_SLONG = _geotiff_file.GeotiffFile_TYPE_SLONG
    TYPE_UNKNOWN = _geotiff_file.GeotiffFile_TYPE_UNKNOWN
    TIFFTAG_GEOPIXELSCALE = _geotiff_file.GeotiffFile_TIFFTAG_GEOPIXELSCALE
    TIFFTAG_GEOTIEPOINTS = _geotiff_file.GeotiffFile_TIFFTAG_GEOTIEPOINTS
    TIFFTAG_GEOTRANSMATRIX = _geotiff_file.GeotiffFile_TIFFTAG_GEOTRANSMATRIX
    TIFFTAG_IMAGEWIDTH = _geotiff_file.GeotiffFile_TIFFTAG_IMAGEWIDTH
    TIFFTAG_IMAGELENGTH = _geotiff_file.GeotiffFile_TIFFTAG_IMAGELENGTH
    TIFFTAG_COMPRESSION = _geotiff_file.GeotiffFile_TIFFTAG_COMPRESSION
    TIFFTAG_PLANARCONFIG = _geotiff_file.GeotiffFile_TIFFTAG_PLANARCONFIG
    TIFFTAG_PHOTOMETRIC = _geotiff_file.GeotiffFile_TIFFTAG_PHOTOMETRIC
    TIFFTAG_BITSPERSAMPLE = _geotiff_file.GeotiffFile_TIFFTAG_BITSPERSAMPLE
    TIFFTAG_SAMPLESPERPIXEL = _geotiff_file.GeotiffFile_TIFFTAG_SAMPLESPERPIXEL

    def __init__(self, Fname, Mode):
        r"""

        GeoCal::GeotiffFile::GeotiffFile(const std::string &Fname, const std::string &Mode)
        GeoCal::GeotiffFile::GeotiffFile
        Open given file name with the given mode.
        Mode should be "r", "w", or "a". 
        """
        _geotiff_file.GeotiffFile_swiginit(self, _geotiff_file.new_GeotiffFile(Fname, Mode))
    _v_file_name = _swig_new_instance_method(_geotiff_file.GeotiffFile__v_file_name)

    @property
    def file_name(self):
        return self._v_file_name()

    _v_mode = _swig_new_instance_method(_geotiff_file.GeotiffFile__v_mode)

    @property
    def mode(self):
        return self._v_mode()

    set_tiftag = _swig_new_instance_method(_geotiff_file.GeotiffFile_set_tiftag)
    set_key = _swig_new_instance_method(_geotiff_file.GeotiffFile_set_key)
    write_key = _swig_new_instance_method(_geotiff_file.GeotiffFile_write_key)
    __str__ = _swig_new_instance_method(_geotiff_file.GeotiffFile___str__)
    has_key = _swig_new_instance_method(_geotiff_file.GeotiffFile_has_key)
    has_tiftag = _swig_new_instance_method(_geotiff_file.GeotiffFile_has_tiftag)
    key_name = _swig_new_static_method(_geotiff_file.GeotiffFile_key_name)
    key_name_uppercase = _swig_new_static_method(_geotiff_file.GeotiffFile_key_name_uppercase)
    value_name = _swig_new_static_method(_geotiff_file.GeotiffFile_value_name)
    key_type = _swig_new_static_method(_geotiff_file.GeotiffFile_key_type)
    geotiff_tag_ascii = _swig_new_static_method(_geotiff_file.GeotiffFile_geotiff_tag_ascii)
    geotiff_tag_double = _swig_new_static_method(_geotiff_file.GeotiffFile_geotiff_tag_double)
    geotiff_tag_short = _swig_new_static_method(_geotiff_file.GeotiffFile_geotiff_tag_short)
    write_1x1_file = _swig_new_instance_method(_geotiff_file.GeotiffFile_write_1x1_file)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _geotiff_file.delete_GeotiffFile

# Register GeotiffFile in _geotiff_file:
_geotiff_file.GeotiffFile_swigregister(GeotiffFile)

__all__ = ["GeotiffFile"]


