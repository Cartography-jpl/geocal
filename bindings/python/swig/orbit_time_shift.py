# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _orbit_time_shift

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _orbit_time_shift.SWIG_PyInstanceMethod_New
_swig_new_static_method = _orbit_time_shift.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _orbit_time_shift.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _orbit_time_shift.delete_SwigPyIterator
    value = _swig_new_instance_method(_orbit_time_shift.SwigPyIterator_value)
    incr = _swig_new_instance_method(_orbit_time_shift.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_orbit_time_shift.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_orbit_time_shift.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_orbit_time_shift.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_orbit_time_shift.SwigPyIterator_copy)
    next = _swig_new_instance_method(_orbit_time_shift.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_orbit_time_shift.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_orbit_time_shift.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_orbit_time_shift.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_orbit_time_shift.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_orbit_time_shift.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_orbit_time_shift.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_orbit_time_shift.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_orbit_time_shift.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_orbit_time_shift.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _orbit_time_shift:
_orbit_time_shift.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _orbit_time_shift.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.orbit
import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.with_parameter
import geocal_swig.look_vector
class OrbitTimeShift(geocal_swig.orbit.Orbit):
    r"""

    This is a simple adapter for an underlying orbit that allows us to
    "shift" the time of orbit.

    For a time "t", this returns orbit data from the underlying data at
    t-toffset, but with the time for the orbit data changed to "t".

    This is useful for simulations, where we may have an underlying orbit
    that otherwise matches some desired characteristics but that is at the
    wrong time (e.g., the orbit passes over a desired point but at local
    night when a simulation requires local day). It is possible this might
    end up having other uses (e.g., correct for a known time error), but
    the simulation was what we originally developed this for.

    C++ includes: orbit_time_shift.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Orbit_original, Time_shift):
        r"""

        OrbitTimeShift::OrbitTimeShift(const boost::shared_ptr< Orbit > Orbit_original, double Time_shift)
        Create an orbit that uses the data for the Orbit_original, shifted by
        the given Time_shift. 
        """
        _orbit_time_shift.OrbitTimeShift_swiginit(self, _orbit_time_shift.new_OrbitTimeShift(Orbit_original, Time_shift))
    orbit_data = _swig_new_instance_method(_orbit_time_shift.OrbitTimeShift_orbit_data)
    _v_orbit_original = _swig_new_instance_method(_orbit_time_shift.OrbitTimeShift__v_orbit_original)

    @property
    def orbit_original(self):
        return self._v_orbit_original()

    _v_time_shift = _swig_new_instance_method(_orbit_time_shift.OrbitTimeShift__v_time_shift)

    @property
    def time_shift(self):
        return self._v_time_shift()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _orbit_time_shift.delete_OrbitTimeShift

# Register OrbitTimeShift in _orbit_time_shift:
_orbit_time_shift.OrbitTimeShift_swigregister(OrbitTimeShift)

__all__ = ["OrbitTimeShift"]


