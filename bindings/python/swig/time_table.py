# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _time_table

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _time_table.SWIG_PyInstanceMethod_New
_swig_new_static_method = _time_table.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _time_table.delete_SwigPyIterator
    value = _swig_new_instance_method(_time_table.SwigPyIterator_value)
    incr = _swig_new_instance_method(_time_table.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_time_table.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_time_table.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_time_table.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_time_table.SwigPyIterator_copy)
    next = _swig_new_instance_method(_time_table.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_time_table.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_time_table.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_time_table.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_time_table.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_time_table.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_time_table.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_time_table.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_time_table.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_time_table.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _time_table:
_time_table.SwigPyIterator_swigregister(SwigPyIterator)
SWIG_MODULE_ALREADY_DONE = _time_table.SWIG_MODULE_ALREADY_DONE
SHARED_PTR_DISOWN = _time_table.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_time
class Vector_Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_time_table.Vector_Time_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_time_table.Vector_Time___nonzero__)
    __bool__ = _swig_new_instance_method(_time_table.Vector_Time___bool__)
    __len__ = _swig_new_instance_method(_time_table.Vector_Time___len__)
    __getslice__ = _swig_new_instance_method(_time_table.Vector_Time___getslice__)
    __setslice__ = _swig_new_instance_method(_time_table.Vector_Time___setslice__)
    __delslice__ = _swig_new_instance_method(_time_table.Vector_Time___delslice__)
    __delitem__ = _swig_new_instance_method(_time_table.Vector_Time___delitem__)
    __getitem__ = _swig_new_instance_method(_time_table.Vector_Time___getitem__)
    __setitem__ = _swig_new_instance_method(_time_table.Vector_Time___setitem__)
    pop = _swig_new_instance_method(_time_table.Vector_Time_pop)
    append = _swig_new_instance_method(_time_table.Vector_Time_append)
    empty = _swig_new_instance_method(_time_table.Vector_Time_empty)
    size = _swig_new_instance_method(_time_table.Vector_Time_size)
    swap = _swig_new_instance_method(_time_table.Vector_Time_swap)
    begin = _swig_new_instance_method(_time_table.Vector_Time_begin)
    end = _swig_new_instance_method(_time_table.Vector_Time_end)
    rbegin = _swig_new_instance_method(_time_table.Vector_Time_rbegin)
    rend = _swig_new_instance_method(_time_table.Vector_Time_rend)
    clear = _swig_new_instance_method(_time_table.Vector_Time_clear)
    get_allocator = _swig_new_instance_method(_time_table.Vector_Time_get_allocator)
    pop_back = _swig_new_instance_method(_time_table.Vector_Time_pop_back)
    erase = _swig_new_instance_method(_time_table.Vector_Time_erase)

    def __init__(self, *args):
        _time_table.Vector_Time_swiginit(self, _time_table.new_Vector_Time(*args))
    push_back = _swig_new_instance_method(_time_table.Vector_Time_push_back)
    front = _swig_new_instance_method(_time_table.Vector_Time_front)
    back = _swig_new_instance_method(_time_table.Vector_Time_back)
    assign = _swig_new_instance_method(_time_table.Vector_Time_assign)
    resize = _swig_new_instance_method(_time_table.Vector_Time_resize)
    insert = _swig_new_instance_method(_time_table.Vector_Time_insert)
    reserve = _swig_new_instance_method(_time_table.Vector_Time_reserve)
    capacity = _swig_new_instance_method(_time_table.Vector_Time_capacity)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _time_table.delete_Vector_Time

# Register Vector_Time in _time_table:
_time_table.Vector_Time_swigregister(Vector_Time)
class Vector_Time2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_time_table.Vector_Time2_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_time_table.Vector_Time2___nonzero__)
    __bool__ = _swig_new_instance_method(_time_table.Vector_Time2___bool__)
    __len__ = _swig_new_instance_method(_time_table.Vector_Time2___len__)
    __getslice__ = _swig_new_instance_method(_time_table.Vector_Time2___getslice__)
    __setslice__ = _swig_new_instance_method(_time_table.Vector_Time2___setslice__)
    __delslice__ = _swig_new_instance_method(_time_table.Vector_Time2___delslice__)
    __delitem__ = _swig_new_instance_method(_time_table.Vector_Time2___delitem__)
    __getitem__ = _swig_new_instance_method(_time_table.Vector_Time2___getitem__)
    __setitem__ = _swig_new_instance_method(_time_table.Vector_Time2___setitem__)
    pop = _swig_new_instance_method(_time_table.Vector_Time2_pop)
    append = _swig_new_instance_method(_time_table.Vector_Time2_append)
    empty = _swig_new_instance_method(_time_table.Vector_Time2_empty)
    size = _swig_new_instance_method(_time_table.Vector_Time2_size)
    swap = _swig_new_instance_method(_time_table.Vector_Time2_swap)
    begin = _swig_new_instance_method(_time_table.Vector_Time2_begin)
    end = _swig_new_instance_method(_time_table.Vector_Time2_end)
    rbegin = _swig_new_instance_method(_time_table.Vector_Time2_rbegin)
    rend = _swig_new_instance_method(_time_table.Vector_Time2_rend)
    clear = _swig_new_instance_method(_time_table.Vector_Time2_clear)
    get_allocator = _swig_new_instance_method(_time_table.Vector_Time2_get_allocator)
    pop_back = _swig_new_instance_method(_time_table.Vector_Time2_pop_back)
    erase = _swig_new_instance_method(_time_table.Vector_Time2_erase)

    def __init__(self, *args):
        _time_table.Vector_Time2_swiginit(self, _time_table.new_Vector_Time2(*args))
    push_back = _swig_new_instance_method(_time_table.Vector_Time2_push_back)
    front = _swig_new_instance_method(_time_table.Vector_Time2_front)
    back = _swig_new_instance_method(_time_table.Vector_Time2_back)
    assign = _swig_new_instance_method(_time_table.Vector_Time2_assign)
    resize = _swig_new_instance_method(_time_table.Vector_Time2_resize)
    insert = _swig_new_instance_method(_time_table.Vector_Time2_insert)
    reserve = _swig_new_instance_method(_time_table.Vector_Time2_reserve)
    capacity = _swig_new_instance_method(_time_table.Vector_Time2_capacity)
    __swig_destroy__ = _time_table.delete_Vector_Time2

# Register Vector_Time2 in _time_table:
_time_table.Vector_Time2_swigregister(Vector_Time2)
class TimeTable(geocal_swig.with_parameter.WithParameter):
    r"""

    This class is used to relate time to image line number and vice versa.

    Often the relationship is pretty simply, there is just a fixed time
    interval between one line and the next. However this class can be used
    to model any instrument complications that need to be modelled (e.g.,
    missing lines, drift in spacing).

    C++ includes: time_table.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    image_coordinate = _swig_new_instance_method(_time_table.TimeTable_image_coordinate)
    image_coordinate_with_derivative = _swig_new_instance_method(_time_table.TimeTable_image_coordinate_with_derivative)
    time = _swig_new_instance_method(_time_table.TimeTable_time)
    time_with_derivative = _swig_new_instance_method(_time_table.TimeTable_time_with_derivative)
    time_acquisition = _swig_new_instance_method(_time_table.TimeTable_time_acquisition)
    _v_min_line = _swig_new_instance_method(_time_table.TimeTable__v_min_line)

    @property
    def min_line(self):
        return self._v_min_line()

    _v_max_line = _swig_new_instance_method(_time_table.TimeTable__v_max_line)

    @property
    def max_line(self):
        return self._v_max_line()

    _v_min_time = _swig_new_instance_method(_time_table.TimeTable__v_min_time)

    @property
    def min_time(self):
        return self._v_min_time()

    _v_max_time = _swig_new_instance_method(_time_table.TimeTable__v_max_time)

    @property
    def max_time(self):
        return self._v_max_time()

    _v_parameter = _swig_new_instance_method(_time_table.TimeTable__v_parameter)

    @property
    def parameter(self):
        return self._v_parameter()

    @parameter.setter
    def parameter(self, value):
      self._v_parameter(value)

    _v_parameter_with_derivative = _swig_new_instance_method(_time_table.TimeTable__v_parameter_with_derivative)

    @property
    def parameter_with_derivative(self):
        return self._v_parameter_with_derivative()

    @parameter_with_derivative.setter
    def parameter_with_derivative(self, value):
      self._v_parameter_with_derivative(value)


    @property
    def parameter_name(self):
        return self._v_parameter_name()

    _v_parameter_subset = _swig_new_instance_method(_time_table.TimeTable__v_parameter_subset)

    @property
    def parameter_subset(self):
        return self._v_parameter_subset()

    @parameter_subset.setter
    def parameter_subset(self, value):
      self._v_parameter_subset(value)

    _v_parameter_with_derivative_subset = _swig_new_instance_method(_time_table.TimeTable__v_parameter_with_derivative_subset)

    @property
    def parameter_with_derivative_subset(self):
        return self._v_parameter_with_derivative_subset()

    @parameter_with_derivative_subset.setter
    def parameter_with_derivative_subset(self, value):
      self._v_parameter_with_derivative_subset(value)


    @property
    def parameter_name_subset(self):
        return self._v_parameter_name_subset()


    @property
    def parameter_mask(self):
        return self._v_parameter_mask()

    __str__ = _swig_new_instance_method(_time_table.TimeTable___str__)
    __swig_destroy__ = _time_table.delete_TimeTable

# Register TimeTable in _time_table:
_time_table.TimeTable_swigregister(TimeTable)
class ConstantSpacingTimeTable(TimeTable):
    r"""

    This is a time table that has a constant spacing between lines.

    C++ includes: time_table.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Min_time, Max_time, Time_space=40.8e-3):
        r"""

        ConstantSpacingTimeTable::ConstantSpacingTimeTable(Time Time_min_line, Time Time_max_line, double Time_space=40.8e-3)
        Constructor, creates time table from Time_min_line to Time_max_line
        with given Time spacing.

        We adjust Max_time to exactly Time_min_line + i * Time_space, rounding
        to nearest integer i, so it ok if Max_time is a little sloppy. Note
        Time_space can be negative, and Time_max_line < Time_min_line 
        """
        _time_table.ConstantSpacingTimeTable_swiginit(self, _time_table.new_ConstantSpacingTimeTable(Min_time, Max_time, Time_space))
    _v_time_space = _swig_new_instance_method(_time_table.ConstantSpacingTimeTable__v_time_space)

    @property
    def time_space(self):
        return self._v_time_space()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _time_table.delete_ConstantSpacingTimeTable

# Register ConstantSpacingTimeTable in _time_table:
_time_table.ConstantSpacingTimeTable_swigregister(ConstantSpacingTimeTable)
class ConstantSpacingFrameletTimeTable(TimeTable):
    r"""

    Very similar to a ConstantSpacingTimeTable, but we have one than one
    frame line per time.

    This is like the time table for a push frame camera.

    C++ includes: time_table.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Min_time, Max_time, Framelet_size, Time_space):
        r"""

        ConstantSpacingFrameletTimeTable::ConstantSpacingFrameletTimeTable(Time Time_min_line, Time Time_max_line, int Framelet_size, double
        Time_space)
        Constructor, creates time table from Time_min_line to Time_max_line
        with given Time spacing.

        We adjust Max_time to exactly Time_min_line + i * Time_space, rounding
        to nearest integer i, so it ok if Max_time is a little sloppy. Note
        Time_space can be negative, and Time_max_line < Time_min_line 
        """
        _time_table.ConstantSpacingFrameletTimeTable_swiginit(self, _time_table.new_ConstantSpacingFrameletTimeTable(Min_time, Max_time, Framelet_size, Time_space))
    _v_time_space = _swig_new_instance_method(_time_table.ConstantSpacingFrameletTimeTable__v_time_space)

    @property
    def time_space(self):
        return self._v_time_space()

    _v_framelet_size = _swig_new_instance_method(_time_table.ConstantSpacingFrameletTimeTable__v_framelet_size)

    @property
    def framelet_size(self):
        return self._v_framelet_size()

    _v_number_framelet = _swig_new_instance_method(_time_table.ConstantSpacingFrameletTimeTable__v_number_framelet)

    @property
    def number_framelet(self):
        return self._v_number_framelet()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _time_table.delete_ConstantSpacingFrameletTimeTable

# Register ConstantSpacingFrameletTimeTable in _time_table:
_time_table.ConstantSpacingFrameletTimeTable_swigregister(ConstantSpacingFrameletTimeTable)
class MeasuredTimeTable(TimeTable):
    r"""

    This is a time table that has a time associated with each line.

    C++ includes: time_table.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Time_list, Min_line=0):
        r"""

        MeasuredTimeTable::MeasuredTimeTable(const std::vector< Time > &Time_list, int Min_line=0)
        Constructor.

        This gives the time for every line. This list should be strictly
        ordered. The first time is for the given Min_line (default of 0).

        We often have trouble with edge cases (so time 1 ms before start of
        table). We pad the table with a single line extrapolation.

        We currently assume that the timing is monotonic increasing. We could
        probably relax that if useful. 
        """
        _time_table.MeasuredTimeTable_swiginit(self, _time_table.new_MeasuredTimeTable(Time_list, Min_line))
    _v_size_time_list = _swig_new_instance_method(_time_table.MeasuredTimeTable__v_size_time_list)

    @property
    def size_time_list(self):
        return self._v_size_time_list()

    time_list = _swig_new_instance_method(_time_table.MeasuredTimeTable_time_list)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _time_table.delete_MeasuredTimeTable

# Register MeasuredTimeTable in _time_table:
_time_table.MeasuredTimeTable_swigregister(MeasuredTimeTable)

__all__ = ["TimeTable","ConstantSpacingTimeTable","MeasuredTimeTable","ConstantSpacingFrameletTimeTable","Vector_Time","Vector_Time2"]


