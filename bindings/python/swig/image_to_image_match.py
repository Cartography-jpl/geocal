# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _image_to_image_match.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_image_to_image_match', [dirname(__file__)])
        except ImportError:
            import _image_to_image_match
            return _image_to_image_match
        if fp is not None:
            try:
                _mod = imp.load_module('_image_to_image_match', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _image_to_image_match = swig_import_helper()
    del swig_import_helper
else:
    import _image_to_image_match
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _image_to_image_match.SHARED_PTR_DISOWN
def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
class ImageToImageMatch(geocal_swig.generic_object.GenericObject):
    """
    This class find matches between two images.

    This is similar to the class ImageMatcher, but in addition to doing
    the matching it also keeps track of which two images we are matching,
    and how we do the initial guess for the location in the second image.

    C++ includes: image_to_image_match.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def match(self, *args):
        """
        virtual void GeoCal::ImageToImageMatch::match(const ImageCoordinate &Ic1, ImageCoordinate &Ic2, double &Line_sigma,
        double &Sample_sigma, bool &Success, int *Diagnostic=0) const =0
        Match point Ic1 in the first image with the second image.

        We return the location in the second image along with the uncertainty
        if Success is true, otherwise the match failed.

        The Diagnostic argument is used to indicate why a match failed. For
        many purposes you can ignore this, because you need to know detailed
        information about the specific ImageMatcher that a user passed to a
        function and what the diagnostic codes mean. However, for some
        purposes the failure reason can be useful (e.g., tuning parameters of
        a LsmMatcher). 
        """
        return _image_to_image_match.ImageToImageMatch_match(self, *args)

    __swig_destroy__ = _image_to_image_match.delete_ImageToImageMatch
ImageToImageMatch.match = new_instancemethod(_image_to_image_match.ImageToImageMatch_match,None,ImageToImageMatch)
ImageToImageMatch.__str__ = new_instancemethod(_image_to_image_match.ImageToImageMatch___str__,None,ImageToImageMatch)
ImageToImageMatch_swigregister = _image_to_image_match.ImageToImageMatch_swigregister
ImageToImageMatch_swigregister(ImageToImageMatch)



