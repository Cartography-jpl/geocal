# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rsm_multi_section.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rsm_multi_section', [dirname(__file__)])
        except ImportError:
            import _rsm_multi_section
            return _rsm_multi_section
        if fp is not None:
            try:
                _mod = imp.load_module('_rsm_multi_section', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rsm_multi_section = swig_import_helper()
    del swig_import_helper
else:
    import _rsm_multi_section
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rsm_multi_section.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_rsm_multi_section.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_rsm_multi_section.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_rsm_multi_section.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_rsm_multi_section.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_rsm_multi_section.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_rsm_multi_section.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_rsm_multi_section.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_rsm_multi_section.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_rsm_multi_section.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_rsm_multi_section.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_rsm_multi_section.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_rsm_multi_section.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_rsm_multi_section.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_rsm_multi_section.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_rsm_multi_section.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_rsm_multi_section.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _rsm_multi_section.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_rsm_multi_section.SHARED_PTR_DISOWN_swigconstant(_rsm_multi_section)
SHARED_PTR_DISOWN = _rsm_multi_section.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.rsm_base
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class RsmMultiSection(geocal_swig.rsm_base.RsmBase):
    """

    This is the base for some of the Rsm support classes.

    This allows us to use a RsmRationalPolynomial, RsmMultiSection, as
    RsmGrid together.

    C++ includes: rsm_multi_section.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Nline, Nsamp, Nrow_section, Ncol_section, Rsm_prototype, Border=5):
        """

        RsmMultiSection::RsmMultiSection(int Nline, int Nsamp, int Nrow_section, int Ncol_section, const
        RsmBase &Rsm_prototype, int Border=5)
        Constructor.

        The RsmRationalPolynomial tends to extrapolate badly. Because the low
        order polynomial is only approximately correct, we add a little bit of
        a border to each underlying RsmRationalPolynomial so we can avoid
        extrapolating. 
        """
        _rsm_multi_section.RsmMultiSection_swiginit(self, _rsm_multi_section.new_RsmMultiSection(Nline, Nsamp, Nrow_section, Ncol_section, Rsm_prototype, Border))

    def fit(self, Igc, Cconv, Min_height, Max_height, Min_line, Max_line, Min_sample, Max_sample, Nline=20, Nsample=20, Nheight=20, Skip_masked_point=False, Ignore_error=False):
        """

        void RsmMultiSection::fit(const ImageGroundConnection &Igc, const CoordinateConverter &Cconv,
        double Min_height, double Max_height, int Min_line, int Max_line, int
        Min_sample, int Max_sample, int Nline=20, int Nsample=20, int
        Nheight=20, bool Skip_masked_point=false, bool Ignore_error=false)
        Fit that approximates the calculation done by a ImageGroundConnection.

        Generate a RsmGrid that approximates the calculation done by a
        ImageGroundConnection.

        This routine always ignores ImageGroundConnectionFailed exceptions,
        and just skips to the next point. But if we are using python code for
        the ImageGroundConnection we can't translate errors to
        ImageGroundConnectionFailed (this is a limitation of SWIG). So you can
        optionally specify Ignore_error as true, in which case we ignore all
        exceptions and just skip to the next point.

        We normally look at all image points when generating the
        RsmRationalPolynomial. You can optionally specify Skip_masked_point to
        skip all image points that are masked.

        To support sections, you can pass in a restricted number of
        line/samples to fit over.

        The number lines, samples, and heights only applies to a
        RsmRationalPolynomial. For a grid, we need to calculate the points to
        fill the grid. But we give a common interface here, the values are
        just ignored by RsmGrid.

        We determine that X, Y, and Z range to use automatically to cover the
        range given by the ImageGroundConnection.

        This routine always ignores ImageGroundConnectionFailed exceptions,
        and just skips to the next point. But if we are using python code for
        the ImageGroundConnection we can't translate errors to
        ImageGroundConnectionFailed (this is a limitation of SWIG). So you can
        optionally specify Ignore_error as true, in which case we ignore all
        exceptions and just skip to the next point.

        To support sections, you can pass in a restricted number of
        line/samples to fit over. 
        """
        return _rsm_multi_section.RsmMultiSection_fit(self, Igc, Cconv, Min_height, Max_height, Min_line, Max_line, Min_sample, Max_sample, Nline, Nsample, Nheight, Skip_masked_point, Ignore_error)


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _rsm_multi_section.delete_RsmMultiSection
RsmMultiSection.fit = new_instancemethod(_rsm_multi_section.RsmMultiSection_fit, None, RsmMultiSection)
RsmMultiSection_swigregister = _rsm_multi_section.RsmMultiSection_swigregister
RsmMultiSection_swigregister(RsmMultiSection)



