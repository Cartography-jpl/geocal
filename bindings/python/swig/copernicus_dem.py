# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _copernicus_dem

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _copernicus_dem.SWIG_PyInstanceMethod_New
_swig_new_static_method = _copernicus_dem.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _copernicus_dem.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _copernicus_dem.delete_SwigPyIterator
    value = _swig_new_instance_method(_copernicus_dem.SwigPyIterator_value)
    incr = _swig_new_instance_method(_copernicus_dem.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_copernicus_dem.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_copernicus_dem.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_copernicus_dem.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_copernicus_dem.SwigPyIterator_copy)
    next = _swig_new_instance_method(_copernicus_dem.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_copernicus_dem.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_copernicus_dem.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_copernicus_dem.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_copernicus_dem.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_copernicus_dem.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_copernicus_dem.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_copernicus_dem.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_copernicus_dem.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_copernicus_dem.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _copernicus_dem:
_copernicus_dem.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _copernicus_dem.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.dem_map_info
import geocal_swig.dem
import geocal_swig.generic_object
import geocal_swig.cart_lab_multifile
import geocal_swig.raster_multifile
import geocal_swig.raster_image_variable
import geocal_swig.raster_image
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class CopernicusDemData(geocal_swig.cart_lab_multifile.VicarCartLabMultifile):
    r"""

    This is used the read the Copernicus data.

    This gets used by CopernicusDem. Although you can use this class
    directly, generally uou'll use this through CopernicusDem class.

    C++ includes: copernicus_dem.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Dir, No_coverage_is_error=True, Number_line_per_tile=-1, Number_sample_per_tile=-1, Number_tile_each_file=4, Number_file=4, Favor_memory_mapped=True, Force_area_pixel=True):
        r"""

        CopernicusDemData::CopernicusDemData(const std::string &Dir, bool No_coverage_is_error=true, int
        Number_line_per_tile=-1, int Number_sample_per_tile=-1, int
        Number_tile_each_file=4, int Number_file=4, bool
        Favor_memory_mapped=true, bool Force_area_pixel=true)
        Constructor.

        You can provide the directory to look for Copernicus DEM data, or if
        you leave this blank we use the value of environment variable
        AFIDS_COPERNICUS_DEM.

        The Copernicus doesn't cover the whole globe. If you ask for a point
        outside of the area this can either be treated as an error, or
        alternatively you can return a value of 0 instead. This is controlled
        by No_coverage_is_error.

        There are two kinds of tiling going on. At the top level, we have a
        number of files open at one time, given by Number_file. For each file,
        we read it with tiles with the given Number_line_per_tile x
        Number_sample_per_tile, having up to Number_tile_each_file tiles. If
        the Number_line_per_tile or Number_sample_per_tile is -1 we read the
        entire file. 
        """
        _copernicus_dem.CopernicusDemData_swiginit(self, _copernicus_dem.new_CopernicusDemData(Dir, No_coverage_is_error, Number_line_per_tile, Number_sample_per_tile, Number_tile_each_file, Number_file, Favor_memory_mapped, Force_area_pixel))

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _copernicus_dem.delete_CopernicusDemData

# Register CopernicusDemData in _copernicus_dem:
_copernicus_dem.CopernicusDemData_swigregister(CopernicusDemData)
class CopernicusLwmData(geocal_swig.cart_lab_multifile.VicarCartLabMultifile):
    r"""

    This is used the read the Copernicus LWM data.

    0=land; 1=Ocean; 2=Minimum Lake Drought (from "GSW Transitions" or
    original COPLWM); 3=Additional to achieve Full COPLWM Lake extension;
    4=Minimum River Drought (from "GSW Transitions" or original COPLWM);
    5=Additional to achieve Full COPLWM River extension; 6=Additional
    "GSW Transitions" Permanent lake/water extension 7=Additional "GSW
    Transitions" Mostly Permanent lake/Water extension 8=Additional "GSW
    Transitions" Seasonal Flood extensions 9=Additional "GSW
    Transitions" Ephemeral/Rare Flood extensions

    Histogram Stretch to exactly match the original COPLWM (0-3;
    land/ocean/lake/river):

    stretch LWM-to-Original
    table=(0,0.,1,1.,2,2.,3,2.,4,3.,5,3.,6,0.,7,0.,8,0.,9,0.)

    Histogram Stretch for maximum lake/wet years (0-3;
    land/ocean/lake/river):

    stretch LWM-to-MaxWet
    table=(0,0.,1,1.,2,2.,3,2.,4,3.,5,3.,6,2.,7,2.,8,2.,9,2.)

    Histogram Stretch for maximum drought (0-3; land/ocean/lake/river):

    stretch LWM-to-MaxDry
    table=(0,0.,1,1.,2,2.,3,0.,4,3.,5,0.,6,0.,7,0.,8,0.,9,0.)

    C++ includes: copernicus_dem.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LAND = _copernicus_dem.CopernicusLwmData_LAND
    OCEAN = _copernicus_dem.CopernicusLwmData_OCEAN
    MIN_LAKE_DROUGHT = _copernicus_dem.CopernicusLwmData_MIN_LAKE_DROUGHT
    ADD_LAKE_DROUGHT = _copernicus_dem.CopernicusLwmData_ADD_LAKE_DROUGHT
    MIN_RIVER_DROUGHT = _copernicus_dem.CopernicusLwmData_MIN_RIVER_DROUGHT
    ADD_RIVER_DROUGHT = _copernicus_dem.CopernicusLwmData_ADD_RIVER_DROUGHT
    PERM_LAKE = _copernicus_dem.CopernicusLwmData_PERM_LAKE
    MOSTLY_PERM_LAKE = _copernicus_dem.CopernicusLwmData_MOSTLY_PERM_LAKE
    SEASONAL_FLOOD = _copernicus_dem.CopernicusLwmData_SEASONAL_FLOOD
    EPHEMERAL_FLOOD = _copernicus_dem.CopernicusLwmData_EPHEMERAL_FLOOD

    def __init__(self, Dir, No_coverage_is_error=True, Number_line_per_tile=-1, Number_sample_per_tile=-1, Number_tile_each_file=4, Number_file=4, Favor_memory_mapped=True, Force_area_pixel=True):
        r"""

        CopernicusLwmData::CopernicusLwmData(const std::string &Dir, bool No_coverage_is_error=true, int
        Number_line_per_tile=-1, int Number_sample_per_tile=-1, int
        Number_tile_each_file=4, int Number_file=4, bool
        Favor_memory_mapped=true, bool Force_area_pixel=true)
        Constructor.

        You provide the directory to look for Copernicus LWM data. If left
        blank we look for the environment variable AFIDS_COPERNICUS_LWM

        The Copernicus doesn't cover the whole globe. If you ask for a point
        outside of the area this can either be treated as an error, or
        alternatively you can return a value of 0 instead. This is controlled
        by No_coverage_is_error.

        There are two kinds of tiling going on. At the top level, we have a
        number of files open at one time, given by Number_file. For each file,
        we read it with tiles with the given Number_line_per_tile x
        Number_sample_per_tile, having up to Number_tile_each_file tiles. If
        the Number_line_per_tile or Number_sample_per_tile is -1 we read the
        entire file. 
        """
        _copernicus_dem.CopernicusLwmData_swiginit(self, _copernicus_dem.new_CopernicusLwmData(Dir, No_coverage_is_error, Number_line_per_tile, Number_sample_per_tile, Number_tile_each_file, Number_file, Favor_memory_mapped, Force_area_pixel))

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _copernicus_dem.delete_CopernicusLwmData

# Register CopernicusLwmData in _copernicus_dem:
_copernicus_dem.CopernicusLwmData_swigregister(CopernicusLwmData)
class CopernicusDem(geocal_swig.dem_map_info.DemMapInfo):
    r"""

    This class provides access to the Copernicus.

    C++ includes: copernicus_dem.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        CopernicusDem::CopernicusDem(const std::string &Dirbase="", bool Outside_dem_is_error=true,
        const boost::shared_ptr< Datum > &D=boost::shared_ptr< Datum >(new
        DatumGeoid96()))
        Constructor.

        You can provide the directory where there data can be found. If you
        leave this as a blank string, we use ${ELEV_ROOT} as the directory and
        ${ELEV_ROOT}/L2_dem_db.int as the file. 
        """
        _copernicus_dem.CopernicusDem_swiginit(self, _copernicus_dem.new_CopernicusDem(*args))
    elevation = _swig_new_instance_method(_copernicus_dem.CopernicusDem_elevation)
    _v_directory_base = _swig_new_instance_method(_copernicus_dem.CopernicusDem__v_directory_base)

    @property
    def directory_base(self):
        return self._v_directory_base()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _copernicus_dem.delete_CopernicusDem

# Register CopernicusDem in _copernicus_dem:
_copernicus_dem.CopernicusDem_swigregister(CopernicusDem)

__all__ = ["CopernicusDem","CopernicusDemData","CopernicusLwmData"]


