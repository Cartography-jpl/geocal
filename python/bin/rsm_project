#! /usr/bin/env python
#
# This takes a VICAR file with a RSM or GLAS/GFM and projects it to the surface.

import geocal
import numpy as np
import subprocess
import os
import logging
from multiprocessing import Pool

version = "July 10, 2020"
usage='''Usage:
  rsm_project [options] <image> <dem_file> <output>
  rsm_project [options] --mosaic <dem_file> <output> <image_list>...
  rsm_project -h | --help
  rsm_project -v | --version

rsm_project takes a VICAR file with a RSM or GLAS/GFM and projects it 
to the surface.

The dem_file should be the output of shelve_dem (e.g., a ".xml" file)

Example:
    mars_generate_rsm /raid26/tllogan/mars/mawrth_vallis/source/unmapped/P16_007388_2049_XI_24N020W.IMG ctx1
    rsm_project --grid-spacing=10 --map-info=ctx1_ref_img.xml --number-process=20 --verbose --process-number-line=1000 --process-number-sample=1000 ctx1.img ctx1_proj.img

Options:
  -h --help         
       Print this message

  --avg-factor=d
       The averaging factor to use on the original data before projecting
       it. If this isn't specified, we match the map resolution to the
       resolution of center pixel of the projected ImageGroundCollection.
       Otherwise, we average by the given factor. [default: -1]

  --bounding-box=f
       Use the given image to supply the bounding box for the output. 
       Note that we use the projection and bounding box, but not the
       resolution of the map info (unlike --map-info). This can be useful
       to for example cover the area of a generated DEM, even if the DEM
       is lower resolution than what we want to project here.

  --cover-image=f
       Use the given image to supply the projection. We calculate the 
       bounding box to cover the image, and use the supplied resolution.
       Compare with bounding-box option, this is useful in the same 
       circumstances where we might not want to cover the entire area of
       the file f.

  --grid-spacing=g
       Grid spacing to exactly calculate the image ground connection
       for, doing a linear interpolation in between. This can greatly
       affect how long the processing takes. If the grid spacing is
       something like the DEM resolution, usually you get almost as
       good output but much faster. [default: 1]

  --map-info=f
       Rather than generating a image to cover the full area, match exactly
       the supplied shelve image or MapInfo. This is useful to when 
       comparing against an existing image/DEM.

  --mosaic
       If supplied, this does a quick mosaic of multiple images (e.g. multiple
       CCDs of HiRISE). The mosaic is done just by overlaying the map projected
       images over each other. If two images overlap, the one that appears 
       first in the list will be on top.

  --resolution=r
       Resolution in meters of output. If negative, then we use the center
       resolution of the image. [default: 1.0]

  --number-process=n
       Number of processors to use. [default: 1]

  --process-number-line=n
       Number of lines to include in each tile that we work on. This 
       controls how long each torque/parallel job takes to run.
       [default: 1000]

  --process-number-sample=n
       Number of lines to include in each tile that we work on. This 
       controls how long each torque/parallel job takes to run. 
       [default: 1000]

  --vicar-type=type
       Type of file to generate. This should by BYTE, HALF, FULL, REAL, or
       DOUB. [default: HALF]

  --verbose
       Print more information as we run.

  -v --version      
       Print program version
'''

# Mapping between long name and shorter vicar name
long_name_to_vicar = { "image" : "img",
                       "output" : "out",
                       "image_list" : "ilist",
                       "dem_file" : "dem",
                       "avg_factor" : "avgfactor",
                       "bounding_box" : "bbox",
                       "cover_image": "cimage",
                       "grid_spacing" : "gspace",
                       "map_info" : "mapinfo",
                       "resolution" : "res",
                       "number_process" : "nproc",
                       "process_number_line" : "pline",
                       "process_number_sample" : "psamp",
                       "vicar_type" : "vtype",
                       "mosaic" : "mosaic",
                       "verbose" : "verbose"
                       }

args = geocal.docopt_simple(usage, version=version,
                     long_name_to_vicar=long_name_to_vicar)

# Move this elsewhere? For now we'll just keep this here but
# we should perhaps have this in library
def mars_default_mi(desired_resolution = 1):
    owrap = geocal.OgrWrapper(
'''PROJCS["SimpleCylindrical Mars",
     GEOGCS["GCS_Mars",
         DATUM["D_Mars",
             SPHEROID["Mars",3396190,0]],
         PRIMEM["Reference_Meridian",0],
         UNIT["degree",0.0174532925199433]],
     PROJECTION["Equirectangular"],
     PARAMETER["latitude_of_origin",0],
     PARAMETER["central_meridian",0],
     PARAMETER["standard_parallel_1",0],
     PARAMETER["false_easting",0],
     PARAMETER["false_northing",0],
     UNIT["metre",1,
         AUTHORITY["EPSG","9001"]]]''')
    cconv = geocal.OgrCoordinateConverter(owrap)
    mi = geocal.MapInfo(cconv, 0, 10000, 10000, 0, 10000, 10000)
    return mi.scale(desired_resolution, desired_resolution)

def moon_default_mi(desired_resolution = 1):
    owrap = geocal.OgrWrapper(
'''PROJCS["SimpleCylindrical Moon",
     GEOGCS["GCS_Moon",
         DATUM["D_Moon",
             SPHEROID["Moon",1737400.0,0]],
         PRIMEM["Reference_Meridian",0],
         UNIT["degree",0.0174532925199433]],
     PROJECTION["Equirectangular"],
     PARAMETER["latitude_of_origin",0],
     PARAMETER["central_meridian",0],
     PARAMETER["standard_parallel_1",0],
     PARAMETER["false_easting",0],
     PARAMETER["false_northing",0],
     UNIT["metre",1,
         AUTHORITY["EPSG","9001"]]]''')
    cconv = geocal.OgrCoordinateConverter(owrap)
    mi = geocal.MapInfo(cconv, 0, 10000, 10000, 0, 10000, 10000)
    return mi.scale(desired_resolution, desired_resolution)

def create_igc_map(igc, args):
    resolution = args.resolution
    if(resolution < 0):
        resolution = igc.resolution_meter()
    if(args.map_info):
        mi = geocal.GdalRasterImage(args.map_info).map_info
        if(args.bounding_box or args.cover_image):
            raise RuntimeError("Can only specify one of --map-info, --bounding-box and --cover-image")
    elif(args.bounding_box):
        mibase = geocal.GdalRasterImage(args.bounding_box).map_info
        resbase = mibase.resolution_meter
        miscale = mibase.scale(resolution / resbase,
                               resolution / resbase)
        mp = geocal.IgcMapProjected(miscale, igc, 1, -1, False)
        mi = mp.map_info
        mp = None
        if(args.cover_image):
            raise RuntimeError("Can only specify one of --map-info, --bounding-box and --cover-image")
    elif(args.cover_image):
        mibase = geocal.GdalRasterImage(args.cover_image).map_info
        resbase = mibase.resolution_meter
        miscale = mibase.scale(resolution / resbase,
                               resolution / resbase)
        miscale = igc.cover(miscale)
        mp = geocal.IgcMapProjected(miscale, igc, 1, -1, False)
        mi = mp.map_info
        mp = None
    else:
        naif_code = igc.naif_code
        if(naif_code == geocal.Ecr.EARTH_NAIF_CODE):
            mibase = geocal.cib01_mapinfo(desired_resolution = resolution)
        elif(naif_code == geocal.PlanetConstant.MARS_NAIF_CODE):
            mibase = mars_default_mi(desired_resolution = resolution)
        elif(naif_code == geocal.PlanetConstant.MOON_NAIF_CODE):
            mibase = moon_default_mi(desired_resolution = resolution)
        else:
            raise RuntimeError("Don't currently support NAIF code %d" %
                               naif_code)
        mi = igc.cover(mibase)
        mp = geocal.IgcMapProjected(mi, igc, 1, -1, False)
        mi = mp.map_info
        mp = None
    igc_map = geocal.IgcMapProjected(mi, igc, args.grid_spacing, args.avg_factor,
                              False)
    return igc_map

def create_igc_map_mosaic(igclist, args):
    if(args.resolution < 0):
        args.resolution = igclist[0].resolution_meter()
    igc_map_list = [create_igc_map(igc, args) for igc in igclist]
    if(args.map_info or args.bounding_box):
        mi = igc_map_list[0].map_info
        # Crop all the map images, so we only calculate where there might
        # be data.
        igc_map_list_new = []
        for igc_map in igc_map_list:
            igc = igc_map.igc_original
            igc_map_new = geocal.IgcMapProjected(igc.cover(mi),
                              igc, args.grid_spacing, args.avg_factor,
                              False)
            igc_map_list_new.append(igc_map_new)
        igc_map_list = igc_map_list_new
    else:
        mi = igc_map_list[0].map_info
        for igc_map in igc_map_list:
            mi = mi.map_union(igc_map.map_info)
    igc_map = geocal.QuickMosaic(mi, igc_map_list)
    return igc_map
        
dem = geocal.read_shelve(args.dem_file)
# We can perhaps have for complicated logic for this, but for
# now just do raycasting if we have a GLAS/GFM.
do_raycast = False
if(args.mosaic):
    igclist = []
    for imgfname in args.image_list:
        if(geocal.VicarLiteFile.is_vicar_file(imgfname)):
            img = geocal.VicarLiteRasterImage(imgfname)
        else:
            img = geocal.GdalRasterImage(imgfname)
        if(img.has_igc_glas_gfm):
            raise RuntimeError("We don't currently support mosaic with GLAS/GFM. This can be added, we just haven't done so yet")
            igc = img.igc_glas_gfm
            igc.image = img
            igc.dem = dem
            do_raycast = True
            igclist.append(igc)
        elif(img.has_rsm):
            igclist.append(geocal.RsmImageGroundConnection(img.rsm, dem, img, "RSM Image"))
        else:
            raise RuntimeError("Image %s doesn't have GLAS or RSM" % imgfname)
    igc_map = create_igc_map_mosaic(igclist, args)
else:
    if(geocal.VicarLiteFile.is_vicar_file(args.image)):
        img = geocal.VicarLiteRasterImage(args.image)
    else:
        img = geocal.GdalRasterImage(args.image)
    if(img.has_igc_glas_gfm):
        igc = img.igc_glas_gfm
        igc.image = img
        igc.dem = dem
        do_raycast = True
    elif(img.has_rsm):
        igc = geocal.RsmImageGroundConnection(img.rsm, dem, img, "RSM Image")
    else:
        raise RuntimeError("Image %s doesn't have GLAS or RSM" % args.image)
        
    igc_map = create_igc_map(igc, args)

if(args.verbose):
    logging.basicConfig(level = logging.INFO)
log = logging.getLogger("geocal-python.rsm_project")
if(args.vicar_type == "DOUB"):
    dtype = np.float64
elif(args.vicar_type == "REAL"):
    dtype = np.float32
elif(args.vicar_type == "BYTE"):
    dtype = np.int8
elif(args.vicar_type == "HALF"):
    dtype = np.int16
elif(args.vicar_type == "FULL"):
    dtype = np.int32
else:
    raise RuntimeError("Unknown vicar type %s" % args.vicar_type)
if(do_raycast):
    mi = igc_map.map_info
    igc_map = None
    if(args.number_process > 1):
        pool = Pool(args.number_process)
    else:
        pool = None
    geocal.ray_caster_project(args.output, igc, mi, pool=pool,
                              dtype=dtype,
                              nline_process = args.process_number_line)
    if(pool):
        pool.close()
else:
    # I don't think we actually need this, so comment out for now
    #geocal.write_shelve("igc_map.xml", igc_map)
    out = geocal.mmap_file(args.output, igc_map.map_info, dtype=dtype)
    geocal.parallel_process_image(igc_map, out, args.process_number_line,
                                  args.process_number_sample,
                                  args.number_process)
