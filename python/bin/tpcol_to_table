#! /usr/bin/env python
#
# This takes a pair of mars map images and co-registers the second
# image to the first.

import geocal
import pickle
import numpy as np

version = "August 12, 2019"
usage='''Usage:
  tpcol_to_table [options] <tpcol> <output_name>
  tpcol_to_table [options] <tpcol> <ref_image> <output_name>
  tpcol_to_table -h | --help
  tpcol_to_table -v | --version

Short utility to write a tie-point collection out in an ASCII CSV table format.
You can either supply a reference image, or leave this off. If supplied, we
give the ground location both as longitude/latitude/height and as reference
image line/sample Without the reference image we leave off the reference line
and sample.

For larger tie-point collections, you can automatically generate the data
compressed by just adding a standard compression extension (e.g., foo.csv.bz2).
The extensions '.gz', '.bz2', '.zip' and '.xz' are supported.



Options:
  -h --help         
       Print this message

  --use-original-image
     Special note for using with mars_nest. The tie-points are
     relative to the image that has matched. This is the same as the
     input images *except* in the case you have used the one of the
     options like "use-ref-image-projection" or "use-projection". In
     that case, the input image is reprojected before we do the image
     matching. The tie-points are then relative to the reprojected
     image.  If instead you want the CSV file generated by this
     program to be relative to the original (not reprojected) image,
     specify the "use-original-image" option.

  -v --version      
       Print program version
'''

# Mapping between long name and shorter vicar name
long_name_to_vicar = { "ref_image" : "refimg",
                       "output_name" : "out",
                       "use_original_image" : "uorigimg",
		       "tpcol": "tpcol" }

args = geocal.docopt_simple(usage, version=version,
                     long_name_to_vicar=long_name_to_vicar)

tpcol = geocal.read_shelve(args.tpcol)
if(args.ref_image):
    if(geocal.VicarLiteFile.is_vicar_file(args.ref_image)):
        ref_image = geocal.VicarLiteRasterImage(args.ref_image)
    else:
        ref_image = geocal.GdalRasterImage(args.ref_image)
else:
    ref_image = None
df = tpcol.data_frame2(ref_image=ref_image)
if(args.use_original_image):
    icarr = np.array(df[["Line Image 1", "Sample Image 1"]])
    with open(args.tpcol + ".aux", "rb") as fh:
        extra_tp_stuff = pickle.load(fh)
    img_tp = geocal.VicarLiteRasterImage(extra_tp_stuff["img_res2"])
    img_orig = geocal.GdalRasterImage(extra_tp_stuff["img_fixed"])
    for i in range(icarr.shape[0]):
        ic_tp = geocal.ImageCoordinate(*icarr[i,:])
        ic_orig = img_orig.coordinate(img_tp.ground_coordinate(ic_tp))
        icarr[i,:] = ic_orig.line, ic_orig.sample
    df[["Line Image 1", "Sample Image 1"]] = icarr
    
df.to_csv(args.output_name,index=False)
    
