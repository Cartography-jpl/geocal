# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _igc_collection

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _igc_collection.SWIG_PyInstanceMethod_New
_swig_new_static_method = _igc_collection.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _igc_collection.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _igc_collection.delete_SwigPyIterator
    value = _swig_new_instance_method(_igc_collection.SwigPyIterator_value)
    incr = _swig_new_instance_method(_igc_collection.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_igc_collection.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_igc_collection.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_igc_collection.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_igc_collection.SwigPyIterator_copy)
    next = _swig_new_instance_method(_igc_collection.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_igc_collection.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_igc_collection.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_igc_collection.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_igc_collection.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_igc_collection.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_igc_collection.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_igc_collection.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_igc_collection.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_igc_collection.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _igc_collection:
_igc_collection.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _igc_collection.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class IgcCollection(geocal_swig.with_parameter.WithParameter):
    r"""

    This is a collection of ImageGroundConnection.

    C++ includes: igc_collection.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _igc_collection.delete_IgcCollection
    _v_number_image = _swig_new_instance_method(_igc_collection.IgcCollection__v_number_image)

    @property
    def number_image(self):
        return self._v_number_image()

    desc = _swig_new_instance_method(_igc_collection.IgcCollection_desc)
    collinearity_residual = _swig_new_instance_method(_igc_collection.IgcCollection_collinearity_residual)
    collinearity_residual_jacobian = _swig_new_instance_method(_igc_collection.IgcCollection_collinearity_residual_jacobian)
    __ground_coordinate = _swig_new_instance_method(_igc_collection.IgcCollection___ground_coordinate)
    ground_coordinate_dem = _swig_new_instance_method(_igc_collection.IgcCollection_ground_coordinate_dem)
    dem = _swig_new_instance_method(_igc_collection.IgcCollection_dem)
    image_coordinate = _swig_new_instance_method(_igc_collection.IgcCollection_image_coordinate)
    image_coordinate_jac_parm = _swig_new_instance_method(_igc_collection.IgcCollection_image_coordinate_jac_parm)
    image_coordinate_jac_parm_fd = _swig_new_instance_method(_igc_collection.IgcCollection_image_coordinate_jac_parm_fd)
    image_coordinate_jac_cf = _swig_new_instance_method(_igc_collection.IgcCollection_image_coordinate_jac_cf)
    image_coordinate_jac_cf_fd = _swig_new_instance_method(_igc_collection.IgcCollection_image_coordinate_jac_cf_fd)
    title = _swig_new_instance_method(_igc_collection.IgcCollection_title)
    image = _swig_new_instance_method(_igc_collection.IgcCollection_image)
    image_ground_connection = _swig_new_instance_method(_igc_collection.IgcCollection_image_ground_connection)
    subset = _swig_new_instance_method(_igc_collection.IgcCollection_subset)
    __str__ = _swig_new_instance_method(_igc_collection.IgcCollection___str__)
    _v_parameter = _swig_new_instance_method(_igc_collection.IgcCollection__v_parameter)

    @property
    def parameter(self):
        return self._v_parameter()

    @parameter.setter
    def parameter(self, value):
      self._v_parameter(value)

    _v_parameter_with_derivative = _swig_new_instance_method(_igc_collection.IgcCollection__v_parameter_with_derivative)

    @property
    def parameter_with_derivative(self):
        return self._v_parameter_with_derivative()

    @parameter_with_derivative.setter
    def parameter_with_derivative(self, value):
      self._v_parameter_with_derivative(value)

    _v_parameter_name = _swig_new_instance_method(_igc_collection.IgcCollection__v_parameter_name)

    @property
    def parameter_name(self):
        return self._v_parameter_name()

    _v_parameter_subset = _swig_new_instance_method(_igc_collection.IgcCollection__v_parameter_subset)

    @property
    def parameter_subset(self):
        return self._v_parameter_subset()

    @parameter_subset.setter
    def parameter_subset(self, value):
      self._v_parameter_subset(value)

    _v_parameter_with_derivative_subset = _swig_new_instance_method(_igc_collection.IgcCollection__v_parameter_with_derivative_subset)

    @property
    def parameter_with_derivative_subset(self):
        return self._v_parameter_with_derivative_subset()

    @parameter_with_derivative_subset.setter
    def parameter_with_derivative_subset(self, value):
      self._v_parameter_with_derivative_subset(value)

    _v_parameter_name_subset = _swig_new_instance_method(_igc_collection.IgcCollection__v_parameter_name_subset)

    @property
    def parameter_name_subset(self):
        return self._v_parameter_name_subset()

    _v_parameter_mask = _swig_new_instance_method(_igc_collection.IgcCollection__v_parameter_mask)

    @property
    def parameter_mask(self):
        return self._v_parameter_mask()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)


    def ground_coordinate(self, image_index, ic, dem = None):
      '''Return ground coordinate for the given image coordinate. You can specify
       a dem to use, or we use the dem associated with the class.'''
      if(dem):
        return self.ground_coordinate_dem(image_index, ic, dem)
      else:
        return self.__ground_coordinate(image_index, ic)


    def __init__(self):
        if self.__class__ == IgcCollection:
            _self = None
        else:
            _self = self
        _igc_collection.IgcCollection_swiginit(self, _igc_collection.new_IgcCollection(_self, ))
    def __disown__(self):
        self.this.disown()
        _igc_collection.disown_IgcCollection(self)
        return weakref.proxy(self)

# Register IgcCollection in _igc_collection:
_igc_collection.IgcCollection_swigregister(IgcCollection)

__all__ = ["IgcCollection"]


