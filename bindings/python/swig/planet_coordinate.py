# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _planet_coordinate.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_planet_coordinate', [dirname(__file__)])
        except ImportError:
            import _planet_coordinate
            return _planet_coordinate
        if fp is not None:
            try:
                _mod = imp.load_module('_planet_coordinate', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _planet_coordinate = swig_import_helper()
    del swig_import_helper
else:
    import _planet_coordinate
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _planet_coordinate.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_planet_coordinate.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_planet_coordinate.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_planet_coordinate.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_planet_coordinate.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_planet_coordinate.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_planet_coordinate.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_planet_coordinate.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_planet_coordinate.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_planet_coordinate.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_planet_coordinate.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_planet_coordinate.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_planet_coordinate.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_planet_coordinate.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_planet_coordinate.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_planet_coordinate.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_planet_coordinate.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _planet_coordinate.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_planet_coordinate.SHARED_PTR_DISOWN_swigconstant(_planet_coordinate)
SHARED_PTR_DISOWN = _planet_coordinate.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.ground_coordinate
import geocal_swig.generic_object
import geocal_swig.look_vector
import geocal_swig.dem
import geocal_swig.coordinate_converter
import geocal_swig.observer
import geocal_swig.with_parameter
class PlanetConstant(object):
    """

    Constants for a planet.

    Note that "Planet" also includes "Moon of planet", basically
    anything with a NAIF_CODE

    C++ includes: planet_coordinate.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MARS_NAIF_CODE = _planet_coordinate.PlanetConstant_MARS_NAIF_CODE
    EUROPA_NAIF_CODE = _planet_coordinate.PlanetConstant_EUROPA_NAIF_CODE

    def a(Naif_code):
        """

        static double GeoCal::PlanetConstant::a(int Naif_code)

        """
        return _planet_coordinate.PlanetConstant_a(Naif_code)

    a = staticmethod(a)

    def b(Naif_code):
        """

        static double GeoCal::PlanetConstant::b(int Naif_code)

        """
        return _planet_coordinate.PlanetConstant_b(Naif_code)

    b = staticmethod(b)

    def esq(Naif_code):
        """

        static double GeoCal::PlanetConstant::esq(int Naif_code)

        """
        return _planet_coordinate.PlanetConstant_esq(Naif_code)

    esq = staticmethod(esq)

    def flattening(Naif_code):
        """

        static double GeoCal::PlanetConstant::flattening(int Naif_code)
        Calculate flattening. 
        """
        return _planet_coordinate.PlanetConstant_flattening(Naif_code)

    flattening = staticmethod(flattening)

    def inverse_flattening(Naif_code):
        """

        static double GeoCal::PlanetConstant::inverse_flattening(int Naif_code)
        Calculate inverse flattening. 
        """
        return _planet_coordinate.PlanetConstant_inverse_flattening(Naif_code)

    inverse_flattening = staticmethod(inverse_flattening)

    def name(Naif_code):
        """

        static std::string GeoCal::PlanetConstant::name(int Naif_code)

        """
        return _planet_coordinate.PlanetConstant_name(Naif_code)

    name = staticmethod(name)

    def __init__(self):
        _planet_coordinate.PlanetConstant_swiginit(self, _planet_coordinate.new_PlanetConstant())
    __swig_destroy__ = _planet_coordinate.delete_PlanetConstant
PlanetConstant_swigregister = _planet_coordinate.PlanetConstant_swigregister
PlanetConstant_swigregister(PlanetConstant)

def PlanetConstant_a(Naif_code):
    """

    static double GeoCal::PlanetConstant::a(int Naif_code)

    """
    return _planet_coordinate.PlanetConstant_a(Naif_code)

def PlanetConstant_b(Naif_code):
    """

    static double GeoCal::PlanetConstant::b(int Naif_code)

    """
    return _planet_coordinate.PlanetConstant_b(Naif_code)

def PlanetConstant_esq(Naif_code):
    """

    static double GeoCal::PlanetConstant::esq(int Naif_code)

    """
    return _planet_coordinate.PlanetConstant_esq(Naif_code)

def PlanetConstant_flattening(Naif_code):
    """

    static double GeoCal::PlanetConstant::flattening(int Naif_code)
    Calculate flattening. 
    """
    return _planet_coordinate.PlanetConstant_flattening(Naif_code)

def PlanetConstant_inverse_flattening(Naif_code):
    """

    static double GeoCal::PlanetConstant::inverse_flattening(int Naif_code)
    Calculate inverse flattening. 
    """
    return _planet_coordinate.PlanetConstant_inverse_flattening(Naif_code)

def PlanetConstant_name(Naif_code):
    """

    static std::string GeoCal::PlanetConstant::name(int Naif_code)

    """
    return _planet_coordinate.PlanetConstant_name(Naif_code)

class PlanetFixed(geocal_swig.ground_coordinate.CartesianFixed):
    """

    This is a ground coordinate, expressed in fixed Planet coordinates.

    Note that "Planet" also includes "Moon of planet", basically
    anything with a NAIF_CODE

    C++ includes: planet_coordinate.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        GeoCal::PlanetFixed::PlanetFixed(int Naif_code=-1)
        Default constructor. 
        """
        _planet_coordinate.PlanetFixed_swiginit(self, _planet_coordinate.new_PlanetFixed(*args))

    def reference_surface_intersect_approximate(self, Cl, Height_reference_surface=0):
        """

        boost::shared_ptr< CartesianFixed > PlanetFixed::reference_surface_intersect_approximate(const CartesianFixedLookVector &Cl, double
        Height_reference_surface=0) const

        """
        return _planet_coordinate.PlanetFixed_reference_surface_intersect_approximate(self, Cl, Height_reference_surface)


    def target_position(Target_name, T, Naif_code):
        """

        PlanetFixed PlanetFixed::target_position(const std::string &Target_name, const Time &T, int Naif_code)
        Use spice to determine the position of the given body at the given
        time. 
        """
        return _planet_coordinate.PlanetFixed_target_position(Target_name, T, Naif_code)

    target_position = staticmethod(target_position)

    def orbit_data(Target_name, Spacecraft_reference_frame_name, T, Naif_code):
        """

        boost::shared_ptr< QuaternionOrbitData > PlanetFixed::orbit_data(const std::string &Target_name, const std::string
        &Spacecraft_reference_frame_name, const Time &T, int Naif_code)
        Return orbit data for the given target and spacecraft reference frame.

        """
        return _planet_coordinate.PlanetFixed_orbit_data(Target_name, Spacecraft_reference_frame_name, T, Naif_code)

    orbit_data = staticmethod(orbit_data)

    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _planet_coordinate.delete_PlanetFixed
PlanetFixed.reference_surface_intersect_approximate = new_instancemethod(_planet_coordinate.PlanetFixed_reference_surface_intersect_approximate, None, PlanetFixed)
PlanetFixed_swigregister = _planet_coordinate.PlanetFixed_swigregister
PlanetFixed_swigregister(PlanetFixed)

def PlanetFixed_target_position(Target_name, T, Naif_code):
    """

    PlanetFixed PlanetFixed::target_position(const std::string &Target_name, const Time &T, int Naif_code)
    Use spice to determine the position of the given body at the given
    time. 
    """
    return _planet_coordinate.PlanetFixed_target_position(Target_name, T, Naif_code)

def PlanetFixed_orbit_data(Target_name, Spacecraft_reference_frame_name, T, Naif_code):
    """

    boost::shared_ptr< QuaternionOrbitData > PlanetFixed::orbit_data(const std::string &Target_name, const std::string
    &Spacecraft_reference_frame_name, const Time &T, int Naif_code)
    Return orbit data for the given target and spacecraft reference frame.

    """
    return _planet_coordinate.PlanetFixed_orbit_data(Target_name, Spacecraft_reference_frame_name, T, Naif_code)

class Planetocentric(geocal_swig.ground_coordinate.GroundCoordinate):
    """

    This is Planet coordinates as Planetocentric latitude, longitude, and
    height above the reference ellipsoid.

    This is the planet equivalent of Geocentric ( not Geodetic). Height is
    relative to the ellipsoid, but latitude is relative to center of
    planet rather than normal of ellipsoid.

    Note that "Planet" also includes "Moon of planet", basically
    anything with a NAIF_CODE

    C++ includes: planet_coordinate.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def naif_code(self):
        """

        virtual int GeoCal::Planetocentric::naif_code() const
        Return NAIF code. 
        """
        return _planet_coordinate.Planetocentric_naif_code(self)


    @property
    def height_reference_surface(self):
        return self._v_height_reference_surface()


    @property
    def latitude(self):
        return self._v_latitude()


    @property
    def longitude(self):
        return self._v_longitude()


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _planet_coordinate.delete_Planetocentric
Planetocentric.naif_code = new_instancemethod(_planet_coordinate.Planetocentric_naif_code, None, Planetocentric)
Planetocentric_swigregister = _planet_coordinate.Planetocentric_swigregister
Planetocentric_swigregister(Planetocentric)

class PlanetInertial(geocal_swig.ground_coordinate.CartesianInertial):
    """

    This is a Planet Intertial coordinate.

    Note that "Planet" also includes "Moon of planet", basically
    anything with a NAIF_CODE

    C++ includes: planet_coordinate.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        GeoCal::PlanetInertial::PlanetInertial(const boost::array< double, 3 > &Pos, int Naif_code)
        Create an PlanetInertial with the given position in meters. 
        """
        _planet_coordinate.PlanetInertial_swiginit(self, _planet_coordinate.new_PlanetInertial(*args))

    def reference_surface_intersect_approximate(self, Cl, Height_reference_surface=0):
        """

        boost::shared_ptr< CartesianInertial > PlanetInertial::reference_surface_intersect_approximate(const CartesianInertialLookVector &Cl, double
        Height_reference_surface=0) const

        """
        return _planet_coordinate.PlanetInertial_reference_surface_intersect_approximate(self, Cl, Height_reference_surface)


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _planet_coordinate.delete_PlanetInertial
PlanetInertial.reference_surface_intersect_approximate = new_instancemethod(_planet_coordinate.PlanetInertial_reference_surface_intersect_approximate, None, PlanetInertial)
PlanetInertial_swigregister = _planet_coordinate.PlanetInertial_swigregister
PlanetInertial_swigregister(PlanetInertial)

class PlanetocentricConverter(geocal_swig.coordinate_converter.CoordinateConverter):
    """

    CoordinateConverter that goes to and from Planetocentric coordinates.

    C++ includes: planet_coordinate.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Naif_code=-1):
        """

        GeoCal::PlanetocentricConverter::PlanetocentricConverter(int Naif_code=-1)
        Constructor. 
        """
        _planet_coordinate.PlanetocentricConverter_swiginit(self, _planet_coordinate.new_PlanetocentricConverter(Naif_code))

    def convert_from_coordinate(self, X, Y, Height=0):
        """

        virtual boost::shared_ptr<GroundCoordinate> GeoCal::PlanetocentricConverter::convert_from_coordinate(double X, double Y, double Height=0) const
        Convert to Planetocentric.

        X and Y are longitude and latitude in degrees, and height is in
        meters. 
        """
        return _planet_coordinate.PlanetocentricConverter_convert_from_coordinate(self, X, Y, Height)


    def _v_naif_code(self):
        """

        virtual int GeoCal::PlanetocentricConverter::naif_code() const
        Return NAIF code. 
        """
        return _planet_coordinate.PlanetocentricConverter__v_naif_code(self)


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _planet_coordinate.delete_PlanetocentricConverter
PlanetocentricConverter.convert_from_coordinate = new_instancemethod(_planet_coordinate.PlanetocentricConverter_convert_from_coordinate, None, PlanetocentricConverter)
PlanetocentricConverter._v_naif_code = new_instancemethod(_planet_coordinate.PlanetocentricConverter__v_naif_code, None, PlanetocentricConverter)
PlanetocentricConverter_swigregister = _planet_coordinate.PlanetocentricConverter_swigregister
PlanetocentricConverter_swigregister(PlanetocentricConverter)

class PlanetSimpleDem(geocal_swig.dem.Dem):
    """

    C++ includes: planet_coordinate.h

    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        GeoCal::PlanetSimpleDem::PlanetSimpleDem(int Naif_code=-1)
        Default constructor. 
        """
        _planet_coordinate.PlanetSimpleDem_swiginit(self, _planet_coordinate.new_PlanetSimpleDem(*args))

    def _v_h(self, *args):
        """

        void GeoCal::PlanetSimpleDem::h(double Hnew)
        Set height value used by this object. 
        """
        return _planet_coordinate.PlanetSimpleDem__v_h(self, *args)


    @property
    def h(self):
        return self._v_h()

    @h.setter
    def h(self, value):
      self._v_h(value)


    def _v_naif_code(self, *args):
        """

        void GeoCal::PlanetSimpleDem::naif_code(int Naif_code)
        Set Naif code for planet. 
        """
        return _planet_coordinate.PlanetSimpleDem__v_naif_code(self, *args)


    @property
    def naif_code(self):
        return self._v_naif_code()

    @naif_code.setter
    def naif_code(self, value):
      self._v_naif_code(value)


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _planet_coordinate.delete_PlanetSimpleDem
PlanetSimpleDem._v_h = new_instancemethod(_planet_coordinate.PlanetSimpleDem__v_h, None, PlanetSimpleDem)
PlanetSimpleDem._v_naif_code = new_instancemethod(_planet_coordinate.PlanetSimpleDem__v_naif_code, None, PlanetSimpleDem)
PlanetSimpleDem_swigregister = _planet_coordinate.PlanetSimpleDem_swigregister
PlanetSimpleDem_swigregister(PlanetSimpleDem)



