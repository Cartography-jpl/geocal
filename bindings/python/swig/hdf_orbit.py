# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _hdf_orbit

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _hdf_orbit.SWIG_PyInstanceMethod_New
_swig_new_static_method = _hdf_orbit.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _hdf_orbit.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdf_orbit.delete_SwigPyIterator
    value = _swig_new_instance_method(_hdf_orbit.SwigPyIterator_value)
    incr = _swig_new_instance_method(_hdf_orbit.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_hdf_orbit.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_hdf_orbit.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_hdf_orbit.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_hdf_orbit.SwigPyIterator_copy)
    next = _swig_new_instance_method(_hdf_orbit.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_hdf_orbit.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_hdf_orbit.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_hdf_orbit.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_hdf_orbit.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_hdf_orbit.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_hdf_orbit.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_hdf_orbit.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_hdf_orbit.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_hdf_orbit.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _hdf_orbit:
_hdf_orbit.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _hdf_orbit.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.orbit_array
import geocal_swig.orbit_quaternion_list
import geocal_swig.orbit
import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.with_parameter
import geocal_swig.look_vector
class HdfOrbit_EciTod_TimeAcs(geocal_swig.orbit_array.OrbitArray_EciTod_TimeAcs):
    r"""

    This is an implementation of an Orbit that reads position, velocity,
    and attitude quaternion from an HDF file.

    For times that fall between the values given in the file, we
    interpolate to get the OrbitData.

    The file should have the following fields:

    <Base group>="">/Attitude/Time - natt in size, time of attitude
    measurement as doubles. <Base group>="">/Attitude/Quaternion - natt
    x 4 in size, quaternion to take same coordinate system as Position
    (e.g., ECI) <Base group>="">/Ephemeris/Time - neph in size, time of
    ephemeris measurement as doubles <Base group>="">/Ephemeris/Position
    - neph x 3 in size, position measurement as doubles in meters <Base
    group>="">/Ephemeris/Velocity - neph x 3 in size, velocity
    measurement as doubles in meter/second

    Because it is useful, we allow the type of position measurement and
    time to be changed. The measurement class is passed in, e.g., Eci, as
    is a small wrapper to give the conversion to Time.

    The Attitude is always assumed to have the real part first, like boost
    library uses. We could probably add an option to change this if
    needed, but for now this is always the case.

    By default, the reported attitude goes from the spacecraft to the
    reference frame (e.g., ECI). However, you can optionally specify that
    the attitude goes in the other direction.

    C++ includes: hdf_orbit.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::HdfOrbit< PositionType, TimeCreatorType >::HdfOrbit(const std::string &Fname, const std::string &Base_group="Orbit",
        const std::string &Eph_time="/Ephemeris/Time", const std::string
        &Eph_pos="/Ephemeris/Position", const std::string
        &Eph_vel="/Ephemeris/Velocity", const std::string
        &Att_time="/Attitude/Time", const std::string
        &Att_quat="/Attitude/Quaternion", bool
        Att_from_sc_to_ref_frame=true)
        Read the given orbit data file.

        You can optional pass the base group of the HDF file, the default is
        "/Orbit" 
        """
        _hdf_orbit.HdfOrbit_EciTod_TimeAcs_swiginit(self, _hdf_orbit.new_HdfOrbit_EciTod_TimeAcs(*args))
    _v_file_name = _swig_new_instance_method(_hdf_orbit.HdfOrbit_EciTod_TimeAcs__v_file_name)

    @property
    def file_name(self):
        return self._v_file_name()

    _v_base_group = _swig_new_instance_method(_hdf_orbit.HdfOrbit_EciTod_TimeAcs__v_base_group)

    @property
    def base_group(self):
        return self._v_base_group()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _hdf_orbit.delete_HdfOrbit_EciTod_TimeAcs

# Register HdfOrbit_EciTod_TimeAcs in _hdf_orbit:
_hdf_orbit.HdfOrbit_EciTod_TimeAcs_swigregister(HdfOrbit_EciTod_TimeAcs)
class HdfOrbit_Eci_TimePgs(geocal_swig.orbit_array.OrbitArray_Eci_TimePgs):
    r"""

    This is an implementation of an Orbit that reads position, velocity,
    and attitude quaternion from an HDF file.

    For times that fall between the values given in the file, we
    interpolate to get the OrbitData.

    The file should have the following fields:

    <Base group>="">/Attitude/Time - natt in size, time of attitude
    measurement as doubles. <Base group>="">/Attitude/Quaternion - natt
    x 4 in size, quaternion to take same coordinate system as Position
    (e.g., ECI) <Base group>="">/Ephemeris/Time - neph in size, time of
    ephemeris measurement as doubles <Base group>="">/Ephemeris/Position
    - neph x 3 in size, position measurement as doubles in meters <Base
    group>="">/Ephemeris/Velocity - neph x 3 in size, velocity
    measurement as doubles in meter/second

    Because it is useful, we allow the type of position measurement and
    time to be changed. The measurement class is passed in, e.g., Eci, as
    is a small wrapper to give the conversion to Time.

    The Attitude is always assumed to have the real part first, like boost
    library uses. We could probably add an option to change this if
    needed, but for now this is always the case.

    By default, the reported attitude goes from the spacecraft to the
    reference frame (e.g., ECI). However, you can optionally specify that
    the attitude goes in the other direction.

    C++ includes: hdf_orbit.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::HdfOrbit< PositionType, TimeCreatorType >::HdfOrbit(const std::string &Fname, const std::string &Base_group="Orbit",
        const std::string &Eph_time="/Ephemeris/Time", const std::string
        &Eph_pos="/Ephemeris/Position", const std::string
        &Eph_vel="/Ephemeris/Velocity", const std::string
        &Att_time="/Attitude/Time", const std::string
        &Att_quat="/Attitude/Quaternion", bool
        Att_from_sc_to_ref_frame=true)
        Read the given orbit data file.

        You can optional pass the base group of the HDF file, the default is
        "/Orbit" 
        """
        _hdf_orbit.HdfOrbit_Eci_TimePgs_swiginit(self, _hdf_orbit.new_HdfOrbit_Eci_TimePgs(*args))
    _v_file_name = _swig_new_instance_method(_hdf_orbit.HdfOrbit_Eci_TimePgs__v_file_name)

    @property
    def file_name(self):
        return self._v_file_name()

    _v_base_group = _swig_new_instance_method(_hdf_orbit.HdfOrbit_Eci_TimePgs__v_base_group)

    @property
    def base_group(self):
        return self._v_base_group()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _hdf_orbit.delete_HdfOrbit_Eci_TimePgs

# Register HdfOrbit_Eci_TimePgs in _hdf_orbit:
_hdf_orbit.HdfOrbit_Eci_TimePgs_swigregister(HdfOrbit_Eci_TimePgs)
class HdfOrbit_Eci_TimeJ2000(geocal_swig.orbit_array.OrbitArray_Eci_TimeJ2000):
    r"""

    This is an implementation of an Orbit that reads position, velocity,
    and attitude quaternion from an HDF file.

    For times that fall between the values given in the file, we
    interpolate to get the OrbitData.

    The file should have the following fields:

    <Base group>="">/Attitude/Time - natt in size, time of attitude
    measurement as doubles. <Base group>="">/Attitude/Quaternion - natt
    x 4 in size, quaternion to take same coordinate system as Position
    (e.g., ECI) <Base group>="">/Ephemeris/Time - neph in size, time of
    ephemeris measurement as doubles <Base group>="">/Ephemeris/Position
    - neph x 3 in size, position measurement as doubles in meters <Base
    group>="">/Ephemeris/Velocity - neph x 3 in size, velocity
    measurement as doubles in meter/second

    Because it is useful, we allow the type of position measurement and
    time to be changed. The measurement class is passed in, e.g., Eci, as
    is a small wrapper to give the conversion to Time.

    The Attitude is always assumed to have the real part first, like boost
    library uses. We could probably add an option to change this if
    needed, but for now this is always the case.

    By default, the reported attitude goes from the spacecraft to the
    reference frame (e.g., ECI). However, you can optionally specify that
    the attitude goes in the other direction.

    C++ includes: hdf_orbit.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::HdfOrbit< PositionType, TimeCreatorType >::HdfOrbit(const std::string &Fname, const std::string &Base_group="Orbit",
        const std::string &Eph_time="/Ephemeris/Time", const std::string
        &Eph_pos="/Ephemeris/Position", const std::string
        &Eph_vel="/Ephemeris/Velocity", const std::string
        &Att_time="/Attitude/Time", const std::string
        &Att_quat="/Attitude/Quaternion", bool
        Att_from_sc_to_ref_frame=true)
        Read the given orbit data file.

        You can optional pass the base group of the HDF file, the default is
        "/Orbit" 
        """
        _hdf_orbit.HdfOrbit_Eci_TimeJ2000_swiginit(self, _hdf_orbit.new_HdfOrbit_Eci_TimeJ2000(*args))
    _v_file_name = _swig_new_instance_method(_hdf_orbit.HdfOrbit_Eci_TimeJ2000__v_file_name)

    @property
    def file_name(self):
        return self._v_file_name()

    _v_base_group = _swig_new_instance_method(_hdf_orbit.HdfOrbit_Eci_TimeJ2000__v_base_group)

    @property
    def base_group(self):
        return self._v_base_group()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _hdf_orbit.delete_HdfOrbit_Eci_TimeJ2000

# Register HdfOrbit_Eci_TimeJ2000 in _hdf_orbit:
_hdf_orbit.HdfOrbit_Eci_TimeJ2000_swigregister(HdfOrbit_Eci_TimeJ2000)
class HdfOrbit_EciTod_TimeJ2000(geocal_swig.orbit_array.OrbitArray_EciTod_TimeJ2000):
    r"""

    This is an implementation of an Orbit that reads position, velocity,
    and attitude quaternion from an HDF file.

    For times that fall between the values given in the file, we
    interpolate to get the OrbitData.

    The file should have the following fields:

    <Base group>="">/Attitude/Time - natt in size, time of attitude
    measurement as doubles. <Base group>="">/Attitude/Quaternion - natt
    x 4 in size, quaternion to take same coordinate system as Position
    (e.g., ECI) <Base group>="">/Ephemeris/Time - neph in size, time of
    ephemeris measurement as doubles <Base group>="">/Ephemeris/Position
    - neph x 3 in size, position measurement as doubles in meters <Base
    group>="">/Ephemeris/Velocity - neph x 3 in size, velocity
    measurement as doubles in meter/second

    Because it is useful, we allow the type of position measurement and
    time to be changed. The measurement class is passed in, e.g., Eci, as
    is a small wrapper to give the conversion to Time.

    The Attitude is always assumed to have the real part first, like boost
    library uses. We could probably add an option to change this if
    needed, but for now this is always the case.

    By default, the reported attitude goes from the spacecraft to the
    reference frame (e.g., ECI). However, you can optionally specify that
    the attitude goes in the other direction.

    C++ includes: hdf_orbit.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::HdfOrbit< PositionType, TimeCreatorType >::HdfOrbit(const std::string &Fname, const std::string &Base_group="Orbit",
        const std::string &Eph_time="/Ephemeris/Time", const std::string
        &Eph_pos="/Ephemeris/Position", const std::string
        &Eph_vel="/Ephemeris/Velocity", const std::string
        &Att_time="/Attitude/Time", const std::string
        &Att_quat="/Attitude/Quaternion", bool
        Att_from_sc_to_ref_frame=true)
        Read the given orbit data file.

        You can optional pass the base group of the HDF file, the default is
        "/Orbit" 
        """
        _hdf_orbit.HdfOrbit_EciTod_TimeJ2000_swiginit(self, _hdf_orbit.new_HdfOrbit_EciTod_TimeJ2000(*args))
    _v_file_name = _swig_new_instance_method(_hdf_orbit.HdfOrbit_EciTod_TimeJ2000__v_file_name)

    @property
    def file_name(self):
        return self._v_file_name()

    _v_base_group = _swig_new_instance_method(_hdf_orbit.HdfOrbit_EciTod_TimeJ2000__v_base_group)

    @property
    def base_group(self):
        return self._v_base_group()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _hdf_orbit.delete_HdfOrbit_EciTod_TimeJ2000

# Register HdfOrbit_EciTod_TimeJ2000 in _hdf_orbit:
_hdf_orbit.HdfOrbit_EciTod_TimeJ2000_swigregister(HdfOrbit_EciTod_TimeJ2000)

__all__ = ["HdfOrbit_EciTod_TimeAcs","HdfOrbit_Eci_TimePgs","HdfOrbit_Eci_TimeJ2000","HdfOrbit_EciTod_TimeJ2000"]


