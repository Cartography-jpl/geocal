# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _glas_gfm_camera

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _glas_gfm_camera.SWIG_PyInstanceMethod_New
_swig_new_static_method = _glas_gfm_camera.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _glas_gfm_camera.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _glas_gfm_camera.delete_SwigPyIterator
    value = _swig_new_instance_method(_glas_gfm_camera.SwigPyIterator_value)
    incr = _swig_new_instance_method(_glas_gfm_camera.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_glas_gfm_camera.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_glas_gfm_camera.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_glas_gfm_camera.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_glas_gfm_camera.SwigPyIterator_copy)
    next = _swig_new_instance_method(_glas_gfm_camera.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_glas_gfm_camera.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_glas_gfm_camera.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_glas_gfm_camera.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_glas_gfm_camera.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_glas_gfm_camera.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_glas_gfm_camera.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_glas_gfm_camera.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_glas_gfm_camera.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_glas_gfm_camera.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _glas_gfm_camera:
_glas_gfm_camera.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _glas_gfm_camera.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.camera
import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.with_parameter
class GlasGfmCamera(geocal_swig.camera.Camera):
    r"""

    This is a Camera with some extra metadata the pointing described by a
    field angle map.

    This is represented by the NITF DES CSSFAB.

    For some of these lower level objects we have directly read the TRE or
    DES (see for example PosCsephb). We haven't currently done this with
    this particular class - the data isn't large or at all slow to read so
    it is easier to just read/write this in python and use this lower
    level class for actually using the camera. We may revisit this, but at
    least for now this is really tied in with the NITF code in the python
    code in geocal_nitf_des.

    C++ includes: glas_gfm_camera.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GlasGfmCamera::GlasGfmCamera(const Camera &Cam, int Band, double Delta_line, double Delta_sample,
        const std::string &Band_type="N", double Band_wavelength=1.45,
        double Focal_length_meter=1.0, const Time
        &Focal_length_time=Time::time_j2000(0))
        It is common to create a GlasGfmCamera by fitting it to another
        camera.

        This does that in one step, taking a QuaternionCamera and fitting for
        the given Band. This version is for Frame "F" type sensor.

        Note the focal length doesn't really affect anything, it gets scaled
        out when we fit the Camera. If you don't otherwise have a value here
        then you can just set this to 1.0 or something like that. Focal length
        is in meters, unlike the focal length in QuaternionCamera that is in
        mm.

        Note for QuaternionCamera, the generated glas model has any rotation
        embedded in the generated model. If you want to assign the frame_to_sc
        to the GlasGfmCamera, then you should make sure to pass a Camera with
        a identity frame_to_sc. So a reasonable process (in python) would be
        something like:

        q_original = cam.frame_to_sc cam.frame_to_sc =
        Quaternion_double(1,0,0,0) gcam = GlasGfmCamera(cam, 0, ...)
        gcam.frame_to_sc = q_original cam.frame_to_sc = q_original 
        """
        _glas_gfm_camera.GlasGfmCamera_swiginit(self, _glas_gfm_camera.new_GlasGfmCamera(*args))
    set_number_line = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera_set_number_line)
    set_number_sample = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera_set_number_sample)
    _v_focal_length = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_focal_length)

    @property
    def focal_length(self):
        return self._v_focal_length()

    @focal_length.setter
    def focal_length(self, value):
      self._v_focal_length(value)

    _v_focal_length_with_derivative = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_focal_length_with_derivative)

    @property
    def focal_length_with_derivative(self):
        return self._v_focal_length_with_derivative()

    @focal_length_with_derivative.setter
    def focal_length_with_derivative(self, value):
      self._v_focal_length_with_derivative(value)

    frame_coordinate_to_xy = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera_frame_coordinate_to_xy)
    _v_frame_to_sc = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_frame_to_sc)

    @property
    def frame_to_sc(self):
        return self._v_frame_to_sc()

    @frame_to_sc.setter
    def frame_to_sc(self, value):
      self._v_frame_to_sc(value)

    _v_frame_to_sc_with_derivative = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_frame_to_sc_with_derivative)

    @property
    def frame_to_sc_with_derivative(self):
        return self._v_frame_to_sc_with_derivative()

    @frame_to_sc_with_derivative.setter
    def frame_to_sc_with_derivative(self, value):
      self._v_frame_to_sc_with_derivative(value)

    _v_id = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_id)

    @property
    def id(self):
        return self._v_id()

    @id.setter
    def id(self, value):
      self._v_id(value)

    _v_sensor_type = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_sensor_type)

    @property
    def sensor_type(self):
        return self._v_sensor_type()

    _v_fit_epsilon = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_fit_epsilon)

    @property
    def fit_epsilon(self):
        return self._v_fit_epsilon()

    @fit_epsilon.setter
    def fit_epsilon(self, value):
      self._v_fit_epsilon(value)

    _v_fit_beta = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_fit_beta)

    @property
    def fit_beta(self):
        return self._v_fit_beta()

    @fit_beta.setter
    def fit_beta(self, value):
      self._v_fit_beta(value)

    _v_fit_delta = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_fit_delta)

    @property
    def fit_delta(self):
        return self._v_fit_delta()

    @fit_delta.setter
    def fit_delta(self, value):
      self._v_fit_delta(value)

    _v_fit_focal_length = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_fit_focal_length)

    @property
    def fit_focal_length(self):
        return self._v_fit_focal_length()

    @fit_focal_length.setter
    def fit_focal_length(self, value):
      self._v_fit_focal_length(value)

    _v_band_type = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_band_type)

    @property
    def band_type(self):
        return self._v_band_type()

    @band_type.setter
    def band_type(self, value):
      self._v_band_type(value)

    _v_band_wavelength = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_band_wavelength)

    @property
    def band_wavelength(self):
        return self._v_band_wavelength()

    @band_wavelength.setter
    def band_wavelength(self, value):
      self._v_band_wavelength(value)

    _v_band_index = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_band_index)

    @property
    def band_index(self):
        return self._v_band_index()

    @band_index.setter
    def band_index(self, value):
      self._v_band_index(value)

    _v_irepband = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_irepband)

    @property
    def irepband(self):
        return self._v_irepband()

    @irepband.setter
    def irepband(self, value):
      self._v_irepband(value)

    _v_isubcat = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_isubcat)

    @property
    def isubcat(self):
        return self._v_isubcat()

    @isubcat.setter
    def isubcat(self, value):
      self._v_isubcat(value)

    _v_focal_length_time = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_focal_length_time)

    @property
    def focal_length_time(self):
        return self._v_focal_length_time()

    @focal_length_time.setter
    def focal_length_time(self, value):
      self._v_focal_length_time(value)

    _v_ppoff = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_ppoff)

    @property
    def ppoff(self):
        return self._v_ppoff()

    @ppoff.setter
    def ppoff(self, value):
      self._v_ppoff(value)

    _v_angoff = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_angoff)

    @property
    def angoff(self):
        return self._v_angoff()

    @angoff.setter
    def angoff(self, value):
      self._v_angoff(value)

    _v_sample_number_first = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_sample_number_first)

    @property
    def sample_number_first(self):
        return self._v_sample_number_first()

    @sample_number_first.setter
    def sample_number_first(self, value):
      self._v_sample_number_first(value)

    _v_delta_sample_pair = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_delta_sample_pair)

    @property
    def delta_sample_pair(self):
        return self._v_delta_sample_pair()

    @delta_sample_pair.setter
    def delta_sample_pair(self, value):
      self._v_delta_sample_pair(value)

    _v_field_alignment = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_field_alignment)

    @property
    def field_alignment(self):
        return self._v_field_alignment()

    @field_alignment.setter
    def field_alignment(self, value):
      self._v_field_alignment(value)

    field_alignment_fit = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera_field_alignment_fit)
    _v_field_angle_type = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_field_angle_type)

    @property
    def field_angle_type(self):
        return self._v_field_angle_type()

    @field_angle_type.setter
    def field_angle_type(self, value):
      self._v_field_angle_type(value)

    _v_field_angle_interpolation_type = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_field_angle_interpolation_type)

    @property
    def field_angle_interpolation_type(self):
        return self._v_field_angle_interpolation_type()

    @field_angle_interpolation_type.setter
    def field_angle_interpolation_type(self, value):
      self._v_field_angle_interpolation_type(value)

    _v_first_line_block = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_first_line_block)

    @property
    def first_line_block(self):
        return self._v_first_line_block()

    @first_line_block.setter
    def first_line_block(self, value):
      self._v_first_line_block(value)

    _v_first_sample_block = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_first_sample_block)

    @property
    def first_sample_block(self):
        return self._v_first_sample_block()

    @first_sample_block.setter
    def first_sample_block(self, value):
      self._v_first_sample_block(value)

    _v_delta_line_block = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_delta_line_block)

    @property
    def delta_line_block(self):
        return self._v_delta_line_block()

    @delta_line_block.setter
    def delta_line_block(self, value):
      self._v_delta_line_block(value)

    _v_delta_sample_block = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera__v_delta_sample_block)

    @property
    def delta_sample_block(self):
        return self._v_delta_sample_block()

    @delta_sample_block.setter
    def delta_sample_block(self, value):
      self._v_delta_sample_block(value)

    field_alignment_block = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera_field_alignment_block)
    compare_camera = _swig_new_instance_method(_glas_gfm_camera.GlasGfmCamera_compare_camera)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _glas_gfm_camera.delete_GlasGfmCamera

# Register GlasGfmCamera in _glas_gfm_camera:
_glas_gfm_camera.GlasGfmCamera_swigregister(GlasGfmCamera)

__all__ = ["GlasGfmCamera"]


