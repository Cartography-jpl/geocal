# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _swig_quaternion.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_swig_quaternion', [dirname(__file__)])
        except ImportError:
            import _swig_quaternion
            return _swig_quaternion
        if fp is not None:
            try:
                _mod = imp.load_module('_swig_quaternion', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _swig_quaternion = swig_import_helper()
    del swig_import_helper
else:
    import _swig_quaternion
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

class Quaternion_double(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, a, b, c, d):
        _swig_quaternion.Quaternion_double_swiginit(self, _swig_quaternion.new_Quaternion_double(a, b, c, d))

    @property
    def R_component_1(self):
        return self._v_R_component_1()


    @property
    def R_component_2(self):
        return self._v_R_component_2()


    @property
    def R_component_3(self):
        return self._v_R_component_3()


    @property
    def R_component_4(self):
        return self._v_R_component_4()

    from_matrix = staticmethod(_swig_quaternion.Quaternion_double_from_matrix)

    @classmethod
    def pickle_format_version(cls):
      return 1

    def __reduce__(self):
      return _new_from_init, (self.__class__, 1, self.R_component_1,self.R_component_2,self.R_component_3,self.R_component_4)


    def __str__(self):
        return "Quaternion (" + str(self.R_component_1) + ", " + str(self.R_component_2) + ", " + str(self.R_component_3) + ", " + str(self.R_component_4) + ")"

    __swig_destroy__ = _swig_quaternion.delete_Quaternion_double
Quaternion_double._v_R_component_1 = new_instancemethod(_swig_quaternion.Quaternion_double__v_R_component_1, None, Quaternion_double)
Quaternion_double._v_R_component_2 = new_instancemethod(_swig_quaternion.Quaternion_double__v_R_component_2, None, Quaternion_double)
Quaternion_double._v_R_component_3 = new_instancemethod(_swig_quaternion.Quaternion_double__v_R_component_3, None, Quaternion_double)
Quaternion_double._v_R_component_4 = new_instancemethod(_swig_quaternion.Quaternion_double__v_R_component_4, None, Quaternion_double)
Quaternion_double.__add__ = new_instancemethod(_swig_quaternion.Quaternion_double___add__, None, Quaternion_double)
Quaternion_double.__sub__ = new_instancemethod(_swig_quaternion.Quaternion_double___sub__, None, Quaternion_double)
Quaternion_double.__mul__ = new_instancemethod(_swig_quaternion.Quaternion_double___mul__, None, Quaternion_double)
Quaternion_double.__div__ = new_instancemethod(_swig_quaternion.Quaternion_double___div__, None, Quaternion_double)
Quaternion_double.conj = new_instancemethod(_swig_quaternion.Quaternion_double_conj, None, Quaternion_double)
Quaternion_double.to_matrix = new_instancemethod(_swig_quaternion.Quaternion_double_to_matrix, None, Quaternion_double)
Quaternion_double.print_to_string = new_instancemethod(_swig_quaternion.Quaternion_double_print_to_string, None, Quaternion_double)
Quaternion_double_swigregister = _swig_quaternion.Quaternion_double_swigregister
Quaternion_double_swigregister(Quaternion_double)

def Quaternion_double_from_matrix(Mat):
    return _swig_quaternion.Quaternion_double_from_matrix(Mat)
Quaternion_double_from_matrix = _swig_quaternion.Quaternion_double_from_matrix


def Quaternion_double_abs(arg1):
    return _swig_quaternion.Quaternion_double_abs(arg1)
Quaternion_double_abs = _swig_quaternion.Quaternion_double_abs


