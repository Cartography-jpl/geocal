# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _ground_mask

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _ground_mask.SWIG_PyInstanceMethod_New
_swig_new_static_method = _ground_mask.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ground_mask.delete_SwigPyIterator
    value = _swig_new_instance_method(_ground_mask.SwigPyIterator_value)
    incr = _swig_new_instance_method(_ground_mask.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_ground_mask.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_ground_mask.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_ground_mask.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_ground_mask.SwigPyIterator_copy)
    next = _swig_new_instance_method(_ground_mask.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_ground_mask.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_ground_mask.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_ground_mask.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_ground_mask.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_ground_mask.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_ground_mask.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_ground_mask.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_ground_mask.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_ground_mask.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ground_mask:
_ground_mask.SwigPyIterator_swigregister(SwigPyIterator)
SWIG_MODULE_ALREADY_DONE = _ground_mask.SWIG_MODULE_ALREADY_DONE
SHARED_PTR_DISOWN = _ground_mask.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
class GroundMask(geocal_swig.generic_object.GenericObject):
    r"""

    This provides a GroundMask, which can be used to prevent doing some
    kind of processing.

    An example is a using a Land/Water mask to restrict image matching to
    land, or a cloud mask to restrict image matching to cloud free areas.

    The mask can look at specific GroundCoordinate points indicating if
    the that point is masked or not. You can also look at a region to see
    if the entire area is masked (e.g., avoid processing on this area
    because it is masked).

    The region search is a bit loose, you give the corners of the area to
    search. The region selected depends on the underlying map projection
    used by the mask data - it might be a region in latitude/longitude, a
    region in UTM, or something else. The region search is useful only for
    small areas where these difference aren't very important. If you need
    detailed, accurate information about a region in a specific map
    projection then you should simply look at each individual point. The
    region is useful for the "don't bother looking here for tie points,
    look somewhere else" sorts of uses.

    If the region search returns true, then all of the region is masked.
    If this is false, then some of the region might be unmasked. Note that
    this is conservative in the true direction - a value of false doesn't
    promise that there is an unmasked pixel, just that we are pretty sure
    that there is one. Edge cases where a false value clips the corner of
    a region might have region search return false, while when you look at
    it pixel by pixel every point ends up being masked.

    Typically a Mask has an underlying RasterImage or something similar. A
    particular GroundCoordinate probably doesn't fall exactly on a pixel
    of the Mask. How we interpolate is defined by the particular derived
    class uses - a common approach is to mask if any of the 4 neighboring
    pixels are masked (but check the derived class for details).

    This mask works in GroundCoordinates, cf. ImageMask.

    C++ includes: ground_mask.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    mask = _swig_new_instance_method(_ground_mask.GroundMask_mask)
    region_masked = _swig_new_instance_method(_ground_mask.GroundMask_region_masked)
    __str__ = _swig_new_instance_method(_ground_mask.GroundMask___str__)
    __swig_destroy__ = _ground_mask.delete_GroundMask

# Register GroundMask in _ground_mask:
_ground_mask.GroundMask_swigregister(GroundMask)
class CombinedGroundMask(GroundMask):
    r"""

    This is combines a set of masks into a single one.

    The combination just check each mask in turn, and if any of them
    indicates a point or a region is masked, then we return true.

    Note that this class handles the degenerate case of no masked. This is
    particular useful in handling situations where you might or might not
    have mask, e.g. a general routine that can take a mask but where you
    don't happen to have any masks in a particular case.

    When there are no masks, we return true.

    C++ includes: ground_mask.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::CombinedGroundMask::CombinedGroundMask(It First, It Last)
        GeoCal::CombinedGroundMask::CombinedGroundMask
        Create a CombinedGroundMask using the given set of masks, where we get this from a general
        InputIterator.

        """
        _ground_mask.CombinedGroundMask_swiginit(self, _ground_mask.new_CombinedGroundMask(*args))
    mask_list = property(_ground_mask.CombinedGroundMask_mask_list_get, _ground_mask.CombinedGroundMask_mask_list_set)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _ground_mask.delete_CombinedGroundMask

# Register CombinedGroundMask in _ground_mask:
_ground_mask.CombinedGroundMask_swigregister(CombinedGroundMask)
class Vector_GroundMask(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_ground_mask.Vector_GroundMask_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_ground_mask.Vector_GroundMask___nonzero__)
    __bool__ = _swig_new_instance_method(_ground_mask.Vector_GroundMask___bool__)
    __len__ = _swig_new_instance_method(_ground_mask.Vector_GroundMask___len__)
    __getslice__ = _swig_new_instance_method(_ground_mask.Vector_GroundMask___getslice__)
    __setslice__ = _swig_new_instance_method(_ground_mask.Vector_GroundMask___setslice__)
    __delslice__ = _swig_new_instance_method(_ground_mask.Vector_GroundMask___delslice__)
    __delitem__ = _swig_new_instance_method(_ground_mask.Vector_GroundMask___delitem__)
    __getitem__ = _swig_new_instance_method(_ground_mask.Vector_GroundMask___getitem__)
    __setitem__ = _swig_new_instance_method(_ground_mask.Vector_GroundMask___setitem__)
    pop = _swig_new_instance_method(_ground_mask.Vector_GroundMask_pop)
    append = _swig_new_instance_method(_ground_mask.Vector_GroundMask_append)
    empty = _swig_new_instance_method(_ground_mask.Vector_GroundMask_empty)
    size = _swig_new_instance_method(_ground_mask.Vector_GroundMask_size)
    swap = _swig_new_instance_method(_ground_mask.Vector_GroundMask_swap)
    begin = _swig_new_instance_method(_ground_mask.Vector_GroundMask_begin)
    end = _swig_new_instance_method(_ground_mask.Vector_GroundMask_end)
    rbegin = _swig_new_instance_method(_ground_mask.Vector_GroundMask_rbegin)
    rend = _swig_new_instance_method(_ground_mask.Vector_GroundMask_rend)
    clear = _swig_new_instance_method(_ground_mask.Vector_GroundMask_clear)
    get_allocator = _swig_new_instance_method(_ground_mask.Vector_GroundMask_get_allocator)
    pop_back = _swig_new_instance_method(_ground_mask.Vector_GroundMask_pop_back)
    erase = _swig_new_instance_method(_ground_mask.Vector_GroundMask_erase)

    def __init__(self, *args):
        _ground_mask.Vector_GroundMask_swiginit(self, _ground_mask.new_Vector_GroundMask(*args))
    push_back = _swig_new_instance_method(_ground_mask.Vector_GroundMask_push_back)
    front = _swig_new_instance_method(_ground_mask.Vector_GroundMask_front)
    back = _swig_new_instance_method(_ground_mask.Vector_GroundMask_back)
    assign = _swig_new_instance_method(_ground_mask.Vector_GroundMask_assign)
    resize = _swig_new_instance_method(_ground_mask.Vector_GroundMask_resize)
    insert = _swig_new_instance_method(_ground_mask.Vector_GroundMask_insert)
    reserve = _swig_new_instance_method(_ground_mask.Vector_GroundMask_reserve)
    capacity = _swig_new_instance_method(_ground_mask.Vector_GroundMask_capacity)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _ground_mask.delete_Vector_GroundMask

# Register Vector_GroundMask in _ground_mask:
_ground_mask.Vector_GroundMask_swigregister(Vector_GroundMask)

__all__ = ["GroundMask","CombinedGroundMask","Vector_GroundMask"]


