# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _spice_planet_orbit.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_spice_planet_orbit', [dirname(__file__)])
        except ImportError:
            import _spice_planet_orbit
            return _spice_planet_orbit
        if fp is not None:
            try:
                _mod = imp.load_module('_spice_planet_orbit', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _spice_planet_orbit = swig_import_helper()
    del swig_import_helper
else:
    import _spice_planet_orbit
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spice_planet_orbit.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_spice_planet_orbit.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_spice_planet_orbit.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_spice_planet_orbit.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_spice_planet_orbit.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_spice_planet_orbit.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_spice_planet_orbit.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_spice_planet_orbit.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_spice_planet_orbit.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_spice_planet_orbit.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_spice_planet_orbit.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_spice_planet_orbit.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_spice_planet_orbit.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_spice_planet_orbit.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_spice_planet_orbit.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_spice_planet_orbit.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_spice_planet_orbit.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _spice_planet_orbit.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_spice_planet_orbit.SHARED_PTR_DISOWN_swigconstant(_spice_planet_orbit)
SHARED_PTR_DISOWN = _spice_planet_orbit.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.orbit
import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.with_parameter
class SpicePlanetOrbit(geocal_swig.orbit.Orbit):
    """

    This is an orbit that uses a SPICE kernel as the underlying
    implementation.

    This class is used with planet satellites. Compare this class with
    SpiceOrbit. These could perhaps be merged at some point, but for right
    now just keep these separate. Don't have enough experience with these
    classes yet to know what the interface should be like, or if these
    really could be merged.

    Note that this combined both the space craft coordinate system and
    conversion to frame coordinates. We could split this out into a
    separate camera model, but there doesn't seem to be much of a reason
    to do this. We could revisit this if there is ever a need to. In
    practice, this means that something like a QuaternionCamera would have
    the identify Frame_to_sc quaternion.

    This class can be a bit on the slow side, you may want to consider
    wrapping it with OrbitListCache to cache the orbit data calculation.

    C++ includes: spice_planet_orbit.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        SpicePlanetOrbit::SpicePlanetOrbit(const std::string &Target_name, const std::string
        &Spacecraft_reference_frame_name, const std::vector< std::string >
        &Kernel_list, int Naif_id)
        Create an orbit that has position information for the Target_name
        (e.g., "GLL", "MRO"), and pointing information in the
        Spacecraft_reference_frame_name (e.g., "GLL_SCAN_PLANE",
        "MRO_CTX").

        Note that the Target_name is of a body (e.g., something we have a spk
        kernel for), while the Spacecraft_reference_frame_name is for a frame
        (e.g., something we have a fk kernel for). In addition to the frame
        definition, you'll generally need a C kernel file (ck kernel) giving
        the orientation of the frame with the target.

        In addition, this gives a list of kernels to load. This list is
        included in this class, so if you load a serialized version it will
        automatically load this given list of kernels.

        Note we check first if the kernel as already been loaded. If it has,
        then we don't load it a second time. Most of the time this is what you
        want, but if you really do want to reload the kernel then this class
        won't be doing what you want. 
        """
        _spice_planet_orbit.SpicePlanetOrbit_swiginit(self, _spice_planet_orbit.new_SpicePlanetOrbit(*args))

    def orbit_data(self, *args):
        """

        virtual boost::shared_ptr<OrbitData> GeoCal::SpicePlanetOrbit::orbit_data(const TimeWithDerivative &T) const

        """
        return _spice_planet_orbit.SpicePlanetOrbit_orbit_data(self, *args)


    def _v_naif_id(self):
        """

        int GeoCal::SpicePlanetOrbit::naif_id() const
        Body NAIF id. 
        """
        return _spice_planet_orbit.SpicePlanetOrbit__v_naif_id(self)


    @property
    def naif_id(self):
        return self._v_naif_id()


    def _v_target_name(self):
        """

        const std::string& GeoCal::SpicePlanetOrbit::target_name() const
        Target name of spacecraft (e.g., "GLL", "MRO") 
        """
        return _spice_planet_orbit.SpicePlanetOrbit__v_target_name(self)


    @property
    def target_name(self):
        return self._v_target_name()


    def _v_spacecraft_reference_frame_name(self):
        """

        const std::string& GeoCal::SpicePlanetOrbit::spacecraft_reference_frame_name() const
        Name of spacecraft reference frame (e.g., "GLL_SCAN_PLANE",
        "MRO_CTX") 
        """
        return _spice_planet_orbit.SpicePlanetOrbit__v_spacecraft_reference_frame_name(self)


    @property
    def spacecraft_reference_frame_name(self):
        return self._v_spacecraft_reference_frame_name()


    def _v_kernel_list(self):
        """

        const std::vector<std::string> GeoCal::SpicePlanetOrbit::kernel_list() const
        List of kernels that should be loaded with this class. 
        """
        return _spice_planet_orbit.SpicePlanetOrbit__v_kernel_list(self)


    @property
    def kernel_list(self):
        return self._v_kernel_list()


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _spice_planet_orbit.delete_SpicePlanetOrbit
SpicePlanetOrbit.orbit_data = new_instancemethod(_spice_planet_orbit.SpicePlanetOrbit_orbit_data, None, SpicePlanetOrbit)
SpicePlanetOrbit._v_naif_id = new_instancemethod(_spice_planet_orbit.SpicePlanetOrbit__v_naif_id, None, SpicePlanetOrbit)
SpicePlanetOrbit._v_target_name = new_instancemethod(_spice_planet_orbit.SpicePlanetOrbit__v_target_name, None, SpicePlanetOrbit)
SpicePlanetOrbit._v_spacecraft_reference_frame_name = new_instancemethod(_spice_planet_orbit.SpicePlanetOrbit__v_spacecraft_reference_frame_name, None, SpicePlanetOrbit)
SpicePlanetOrbit._v_kernel_list = new_instancemethod(_spice_planet_orbit.SpicePlanetOrbit__v_kernel_list, None, SpicePlanetOrbit)
SpicePlanetOrbit_swigregister = _spice_planet_orbit.SpicePlanetOrbit_swigregister
SpicePlanetOrbit_swigregister(SpicePlanetOrbit)



