# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _raw_raster_image

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _raw_raster_image.SWIG_PyInstanceMethod_New
_swig_new_static_method = _raw_raster_image.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _raw_raster_image.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _raw_raster_image.delete_SwigPyIterator
    value = _swig_new_instance_method(_raw_raster_image.SwigPyIterator_value)
    incr = _swig_new_instance_method(_raw_raster_image.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_raw_raster_image.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_raw_raster_image.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_raw_raster_image.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_raw_raster_image.SwigPyIterator_copy)
    next = _swig_new_instance_method(_raw_raster_image.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_raw_raster_image.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_raw_raster_image.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_raw_raster_image.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_raw_raster_image.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_raw_raster_image.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_raw_raster_image.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_raw_raster_image.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_raw_raster_image.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_raw_raster_image.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _raw_raster_image:
_raw_raster_image.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _raw_raster_image.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.raster_image
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class RawRasterImage(geocal_swig.raster_image.RasterImage):
    r"""

    This uses libraw to read RAW format.

    This is the format used by some cameras, e.g., Cannon RAW format. You
    can see the details about what can be read athttp://www.libraw.org.

    Note that although this reads the RAW format, the data is in the RAW
    space, the DN values don't mean much without translating them to RGB
    color space. You may want to instead use the program dcraw which
    converts to PPM or Tiff format and includes translating to color plus
    making 8 bit.

    C++ includes: raw_raster_image.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Fname, Band=0):
        r"""

        RawRasterImage::RawRasterImage(const std::string &Fname, int Band=0)
        Read in the given file with the given Band (0 based). 
        """
        _raw_raster_image.RawRasterImage_swiginit(self, _raw_raster_image.new_RawRasterImage(Fname, Band))
    read_all_bands = _swig_new_static_method(_raw_raster_image.RawRasterImage_read_all_bands)
    _v_file_name = _swig_new_instance_method(_raw_raster_image.RawRasterImage__v_file_name)

    @property
    def file_name(self):
        return self._v_file_name()

    _v_band = _swig_new_instance_method(_raw_raster_image.RawRasterImage__v_band)

    @property
    def band(self):
        return self._v_band()


    @classmethod
    def pickle_format_version(cls):
      return 1

    def __reduce__(self):
      return _new_from_init, (self.__class__, 1, self.file_name,self.band)

    __swig_destroy__ = _raw_raster_image.delete_RawRasterImage

# Register RawRasterImage in _raw_raster_image:
_raw_raster_image.RawRasterImage_swigregister(RawRasterImage)

__all__ = ["RawRasterImage"]


