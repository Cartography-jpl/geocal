# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _auto_derivative

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _auto_derivative.SWIG_PyInstanceMethod_New
_swig_new_static_method = _auto_derivative.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _auto_derivative.delete_SwigPyIterator
    value = _swig_new_instance_method(_auto_derivative.SwigPyIterator_value)
    incr = _swig_new_instance_method(_auto_derivative.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_auto_derivative.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_auto_derivative.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_auto_derivative.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_auto_derivative.SwigPyIterator_copy)
    next = _swig_new_instance_method(_auto_derivative.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_auto_derivative.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_auto_derivative.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_auto_derivative.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_auto_derivative.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_auto_derivative.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_auto_derivative.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_auto_derivative.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_auto_derivative.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_auto_derivative.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _auto_derivative:
_auto_derivative.SwigPyIterator_swigregister(SwigPyIterator)
SWIG_MODULE_ALREADY_DONE = _auto_derivative.SWIG_MODULE_ALREADY_DONE
SHARED_PTR_DISOWN = _auto_derivative.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
class AutoDerivativeDouble(geocal_swig.generic_object.GenericObject):
    r"""

    There are a number of tools that can be used to do "Automatic
    Differentiation" (see for
    examplehttp://www.autodiff.org/?module=Tools).

    We examined several of the tools, and while these packages have a
    number of advantages (in particular, the ability to run the
    calculation either forward or backwards) for our particular needs a
    simpler forward only calculation was selected. This uses a number of
    type T, along with the first order gradient with respect to a set of
    independent variables. We then overload the standard operations such
    as "+" and "*" to apply the chain rule, to propagate the
    derivatives forward.

    This is a newer field, so there doesn't seem to be standard
    terminology. In "Scientific and Engineering C++" by John Barton and
    Lee Nackman, this is call "Rall numbers" after a paper by L.B. Rall.
    On wikipedia athttp://en.wikipedia.org/wiki/Automatic_differentiation
    this is called "Automatic differentiation using dual numbers".

    As the existing automatic differentiation packages mature, we may want
    to revisit this choice and replace this class with a fuller library.

    This class is not as efficient as hand coding derivative calculation,
    although it is much easier to use. If profiling shows a particular
    bottle neck, you might want to hand code derivatives for that specific
    location, which can then be placed into a AutoDerivative for use
    elsewhere.

    See also ArrayAd which work with this class for Arrays of
    AutoDerivative.

    C++ includes: auto_derivative.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::AutoDerivative< T >::AutoDerivative(const AutoDerivative< T > &D)
        Copy constructor. This does a deep copy. 
        """
        _auto_derivative.AutoDerivativeDouble_swiginit(self, _auto_derivative.new_AutoDerivativeDouble(*args))
    _v_number_variable = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble__v_number_variable)

    @property
    def number_variable(self):
        return self._v_number_variable()

    _v_is_constant = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble__v_is_constant)

    @property
    def is_constant(self):
        return self._v_is_constant()

    __lt__ = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble___lt__)
    __eq__ = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble___eq__)
    __iadd__ = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble___iadd__)
    __isub__ = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble___isub__)
    __imul__ = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble___imul__)

    def __itruediv__(self, *args):
        return _auto_derivative.AutoDerivativeDouble___itruediv__(self, *args)
    __idiv__ = __itruediv__


    __str__ = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble___str__)
    _value = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble__value)
    _value_set = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble__value_set)
    _gradient = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble__gradient)
    _gradient_set = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble__gradient_set)
    __add__ = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble___add__)
    __radd__ = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble___radd__)
    __sub__ = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble___sub__)
    __rsub__ = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble___rsub__)
    __mul__ = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble___mul__)
    __rmul__ = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble___rmul__)
    __div__ = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble___div__)
    __rdiv__ = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble___rdiv__)
    __pow__ = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble___pow__)
    __rpow__ = _swig_new_instance_method(_auto_derivative.AutoDerivativeDouble___rpow__)

    @property
    def value(self):
      return self._value()

    @value.setter
    def value(self, val):
      self._value_set(val)

    @property
    def gradient(self):
      return self._gradient()

    @gradient.setter
    def gradient(self,val):
        self._gradient_set(val)


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _auto_derivative.delete_AutoDerivativeDouble

# Register AutoDerivativeDouble in _auto_derivative:
_auto_derivative.AutoDerivativeDouble_swigregister(AutoDerivativeDouble)
class AutoDerivativeRefDouble(geocal_swig.generic_object.GenericObject):
    r"""

    Helper class that gives us a reference that we can assign a
    AutoDerivative to and write into the correct space in a ArrayAd.

    C++ includes: auto_derivative.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, V, FORCE_COPY):
        r"""

        GeoCal::AutoDerivativeRef< T >::AutoDerivativeRef(T &V)

        """
        _auto_derivative.AutoDerivativeRefDouble_swiginit(self, _auto_derivative.new_AutoDerivativeRefDouble(V, FORCE_COPY))
    _v_value = _swig_new_instance_method(_auto_derivative.AutoDerivativeRefDouble__v_value)

    @property
    def value(self):
        return self._v_value()

    _v_gradient = _swig_new_instance_method(_auto_derivative.AutoDerivativeRefDouble__v_gradient)

    @property
    def gradient(self):
        return self._v_gradient()

    __str__ = _swig_new_instance_method(_auto_derivative.AutoDerivativeRefDouble___str__)
    __swig_destroy__ = _auto_derivative.delete_AutoDerivativeRefDouble

# Register AutoDerivativeRefDouble in _auto_derivative:
_auto_derivative.AutoDerivativeRefDouble_swigregister(AutoDerivativeRefDouble)
class ArrayAutoDerivativeDouble_1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _auto_derivative.ArrayAutoDerivativeDouble_1_swiginit(self, _auto_derivative.new_ArrayAutoDerivativeDouble_1(*args))
    data = _swig_new_instance_method(_auto_derivative.ArrayAutoDerivativeDouble_1_data)
    size = _swig_new_instance_method(_auto_derivative.ArrayAutoDerivativeDouble_1_size)
    read = _swig_new_instance_method(_auto_derivative.ArrayAutoDerivativeDouble_1_read)
    write = _swig_new_instance_method(_auto_derivative.ArrayAutoDerivativeDouble_1_write)
    datav = _swig_new_instance_method(_auto_derivative.ArrayAutoDerivativeDouble_1_datav)
    shape0 = _swig_new_instance_method(_auto_derivative.ArrayAutoDerivativeDouble_1_shape0)
    shape1 = _swig_new_instance_method(_auto_derivative.ArrayAutoDerivativeDouble_1_shape1)
    shape2 = _swig_new_instance_method(_auto_derivative.ArrayAutoDerivativeDouble_1_shape2)
    shape3 = _swig_new_instance_method(_auto_derivative.ArrayAutoDerivativeDouble_1_shape3)
    __swig_destroy__ = _auto_derivative.delete_ArrayAutoDerivativeDouble_1

# Register ArrayAutoDerivativeDouble_1 in _auto_derivative:
_auto_derivative.ArrayAutoDerivativeDouble_1_swigregister(ArrayAutoDerivativeDouble_1)
class BoostArrayAutoDerivativeDouble_3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _size = _swig_new_instance_method(_auto_derivative.BoostArrayAutoDerivativeDouble_3__size)

    @property
    def size(self):
       return self._size()

    def set(self, v):
       '''Set the value to the given value. The value should be a container
       that we can enumerate over to fill in the value of the array'''
       for i, t in enumerate(v):
          if(i >= self.size):
              raise RuntimeError("Value must be exactly %d in size" % self.size)
          self[i] = t
       if(i != self.size - 1):
           raise RuntimeError("Value must be exactly %d in size" % self.size)

    def __iter__(self):
       for i in range(self.size):
           yield self[i]

    def __reduce__(self):
       return _new_from_set, (self.__class__, list(self))

    __getitem__ = _swig_new_instance_method(_auto_derivative.BoostArrayAutoDerivativeDouble_3___getitem__)
    __setitem__ = _swig_new_instance_method(_auto_derivative.BoostArrayAutoDerivativeDouble_3___setitem__)
    __str__ = _swig_new_instance_method(_auto_derivative.BoostArrayAutoDerivativeDouble_3___str__)

    def __init__(self):
        _auto_derivative.BoostArrayAutoDerivativeDouble_3_swiginit(self, _auto_derivative.new_BoostArrayAutoDerivativeDouble_3())
    __swig_destroy__ = _auto_derivative.delete_BoostArrayAutoDerivativeDouble_3

# Register BoostArrayAutoDerivativeDouble_3 in _auto_derivative:
_auto_derivative.BoostArrayAutoDerivativeDouble_3_swigregister(BoostArrayAutoDerivativeDouble_3)
sqrt = _auto_derivative.sqrt
log = _auto_derivative.log
log10 = _auto_derivative.log10
exp = _auto_derivative.exp
sin = _auto_derivative.sin
asin = _auto_derivative.asin
cos = _auto_derivative.cos
acos = _auto_derivative.acos
tan = _auto_derivative.tan
atan = _auto_derivative.atan
class vector_auto_derivative(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_auto_derivative.vector_auto_derivative___nonzero__)
    __bool__ = _swig_new_instance_method(_auto_derivative.vector_auto_derivative___bool__)
    __len__ = _swig_new_instance_method(_auto_derivative.vector_auto_derivative___len__)
    __getslice__ = _swig_new_instance_method(_auto_derivative.vector_auto_derivative___getslice__)
    __setslice__ = _swig_new_instance_method(_auto_derivative.vector_auto_derivative___setslice__)
    __delslice__ = _swig_new_instance_method(_auto_derivative.vector_auto_derivative___delslice__)
    __delitem__ = _swig_new_instance_method(_auto_derivative.vector_auto_derivative___delitem__)
    __getitem__ = _swig_new_instance_method(_auto_derivative.vector_auto_derivative___getitem__)
    __setitem__ = _swig_new_instance_method(_auto_derivative.vector_auto_derivative___setitem__)
    pop = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_pop)
    append = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_append)
    empty = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_empty)
    size = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_size)
    swap = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_swap)
    begin = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_begin)
    end = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_end)
    rbegin = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_rbegin)
    rend = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_rend)
    clear = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_clear)
    get_allocator = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_get_allocator)
    pop_back = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_pop_back)
    erase = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_erase)

    def __init__(self, *args):
        _auto_derivative.vector_auto_derivative_swiginit(self, _auto_derivative.new_vector_auto_derivative(*args))
    push_back = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_push_back)
    front = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_front)
    back = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_back)
    assign = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_assign)
    resize = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_resize)
    insert = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_insert)
    reserve = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_reserve)
    capacity = _swig_new_instance_method(_auto_derivative.vector_auto_derivative_capacity)
    __swig_destroy__ = _auto_derivative.delete_vector_auto_derivative

# Register vector_auto_derivative in _auto_derivative:
_auto_derivative.vector_auto_derivative_swigregister(vector_auto_derivative)

__all__ = ["AutoDerivativeDouble","AutoDerivativeRefDouble","ArrayAutoDerivativeDouble_1","BoostArrayAutoDerivativeDouble_3","sqrt","log","log10","exp","sin","asin","cos","acos","tan","atan"]


