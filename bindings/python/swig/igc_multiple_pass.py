# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _igc_multiple_pass

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _igc_multiple_pass.SWIG_PyInstanceMethod_New
_swig_new_static_method = _igc_multiple_pass.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _igc_multiple_pass.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _igc_multiple_pass.delete_SwigPyIterator
    value = _swig_new_instance_method(_igc_multiple_pass.SwigPyIterator_value)
    incr = _swig_new_instance_method(_igc_multiple_pass.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_igc_multiple_pass.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_igc_multiple_pass.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_igc_multiple_pass.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_igc_multiple_pass.SwigPyIterator_copy)
    next = _swig_new_instance_method(_igc_multiple_pass.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_igc_multiple_pass.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_igc_multiple_pass.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_igc_multiple_pass.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_igc_multiple_pass.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_igc_multiple_pass.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_igc_multiple_pass.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_igc_multiple_pass.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_igc_multiple_pass.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_igc_multiple_pass.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _igc_multiple_pass:
_igc_multiple_pass.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _igc_multiple_pass.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.igc_collection
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class IgcMultiplePass(geocal_swig.igc_collection.IgcCollection, geocal_swig.with_parameter.WithParameterNested):
    r"""

    This is a IgcCollection that stitches a collection of IgcCollection
    together.

    The use case is multiple passes , e.g., AirMSPI having multiple
    collections in a day. Typically you will have a shared set of
    parameters that you are jointly fitting for, e.g., fitting for the
    camera parameters over multiple passes of AirMSPI. This class is a
    WithParameterNested, but it doesn't automatically add anything into
    the parameter list. The normal case is you would create the
    IgcMultiplePass, and then add in the objects you want. For
    example:boost::shared_ptr<IgcCollection> igc_pass1(new
    AirMspiIgcCollection (orb1, cam, gim, Dem, l1b1_file_name1));
    boost::shared_ptr<IgcCollection> igc_pass2(new AirMspiIgcCollection
    (orb2, cam, gim, Dem, l1b1_file_name2)); IgcMultiplePass igc;
    igc.add_igc(igc_pass1); igc.add_igc(igc_pass2); igc.add_object(cam);
    igc.add_object(gim);

    The images are stacked together. So if the first IgcCollection Igc1
    has 5 image, the second Igc2 6, the third Igc3 2 then in the
    IgcMultiplePass image 0 is 0th image in Igc1, image 5 is the 0th image
    in Igc2, image 12 is image 1 of Igc3. The total number of images is
    13.

    C++ includes: igc_multiple_pass.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::IgcMultiplePass::IgcMultiplePass(const std::vector< boost::shared_ptr< IgcCollection > > &Igc_list)
        GeoCal::IgcMultiplePass::IgcMultiplePass
        Constructor that takes a list of IgcCollection to initialize with.

        """
        _igc_multiple_pass.IgcMultiplePass_swiginit(self, _igc_multiple_pass.new_IgcMultiplePass(*args))
    add_igc = _swig_new_instance_method(_igc_multiple_pass.IgcMultiplePass_add_igc)
    image_ground_connection = _swig_new_instance_method(_igc_multiple_pass.IgcMultiplePass_image_ground_connection)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _igc_multiple_pass.delete_IgcMultiplePass

# Register IgcMultiplePass in _igc_multiple_pass:
_igc_multiple_pass.IgcMultiplePass_swigregister(IgcMultiplePass)

__all__ = ["IgcMultiplePass"]


