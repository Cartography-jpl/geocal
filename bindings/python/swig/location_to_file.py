# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _location_to_file

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _location_to_file.SWIG_PyInstanceMethod_New
_swig_new_static_method = _location_to_file.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _location_to_file.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _location_to_file.delete_SwigPyIterator
    value = _swig_new_instance_method(_location_to_file.SwigPyIterator_value)
    incr = _swig_new_instance_method(_location_to_file.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_location_to_file.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_location_to_file.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_location_to_file.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_location_to_file.SwigPyIterator_copy)
    next = _swig_new_instance_method(_location_to_file.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_location_to_file.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_location_to_file.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_location_to_file.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_location_to_file.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_location_to_file.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_location_to_file.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_location_to_file.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_location_to_file.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_location_to_file.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _location_to_file:
_location_to_file.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _location_to_file.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
class LocationToFile(geocal_swig.generic_object.GenericObject):
    r"""

    A common implementation of MapProjectedMultifile is to have some sort
    of a look up table that gives the file name for a particular location.

    This class is a thin wrapper around RTree to give a mapping between
    location and file name. We do this both because RTree's interface is a
    bit different than how we want to access this, and because we want to
    abstract out the use of the libsdbx library since this may go away at
    some point.

    Note that boost has added a library "geometry" that looks like it
    also has a R-* tree (as of version 1.47). There is no compelling
    reason right now to change to using this, but if libsdx ever becomes
    an issue we can switch to boost.

    C++ includes: location_to_file.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _location_to_file.delete_LocationToFile

# Register LocationToFile in _location_to_file:
_location_to_file.LocationToFile_swigregister(LocationToFile)

__all__ = ["LocationToFile"]


