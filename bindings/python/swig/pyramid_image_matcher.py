# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _pyramid_image_matcher

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _pyramid_image_matcher.SWIG_PyInstanceMethod_New
_swig_new_static_method = _pyramid_image_matcher.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _pyramid_image_matcher.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyramid_image_matcher.delete_SwigPyIterator
    value = _swig_new_instance_method(_pyramid_image_matcher.SwigPyIterator_value)
    incr = _swig_new_instance_method(_pyramid_image_matcher.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_pyramid_image_matcher.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_pyramid_image_matcher.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_pyramid_image_matcher.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_pyramid_image_matcher.SwigPyIterator_copy)
    next = _swig_new_instance_method(_pyramid_image_matcher.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_pyramid_image_matcher.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_pyramid_image_matcher.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_pyramid_image_matcher.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_pyramid_image_matcher.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_pyramid_image_matcher.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_pyramid_image_matcher.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_pyramid_image_matcher.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_pyramid_image_matcher.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_pyramid_image_matcher.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pyramid_image_matcher:
_pyramid_image_matcher.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _pyramid_image_matcher.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.image_matcher
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class PyramidImageMatcher(geocal_swig.image_matcher.ImageMatcher):
    r"""

    This takes an existing ImageMatcher, and it uses it on images in a
    pyramid fashion.

    We start with a given power of 2 (e.g., 8), average the raster data by
    that value and perform image matching.

    If that is successful, we then take the result of the previous match
    as the initial guess, then match on the finer grid by a factor p of 2
    (e.g., 4). If successful, we then proceed to the next level, ending at
    the full resolution image.

    If we match any level, then we call the match successful. However, the
    Line and Sample sigmas will get scaled the same way - so data matched
    at a coarser resolution is less accurate than matched at the finer
    resolution.

    C++ includes: pyramid_image_matcher.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Im, start_level, Only_accept_finest_resolution=False):
        r"""

        GeoCal::PyramidImageMatcher::PyramidImageMatcher(const boost::shared_ptr< ImageMatcher > &Im, int start_level, bool
        Only_accept_finest_resolution=false)
        Constructor.

        The start level is how coarse to do the initial matching. By default
        we accept any level of matching (just with a larger error), but you
        can optionally specify that we only accept a point if we can match at
        the finest resolution 
        """
        _pyramid_image_matcher.PyramidImageMatcher_swiginit(self, _pyramid_image_matcher.new_PyramidImageMatcher(Im, start_level, Only_accept_finest_resolution))
    _v_start_level = _swig_new_instance_method(_pyramid_image_matcher.PyramidImageMatcher__v_start_level)

    @property
    def start_level(self):
        return self._v_start_level()

    _v_only_accept_finest_resolution = _swig_new_instance_method(_pyramid_image_matcher.PyramidImageMatcher__v_only_accept_finest_resolution)

    @property
    def only_accept_finest_resolution(self):
        return self._v_only_accept_finest_resolution()

    _v_underlying_matcher = _swig_new_instance_method(_pyramid_image_matcher.PyramidImageMatcher__v_underlying_matcher)

    @property
    def underlying_matcher(self):
        return self._v_underlying_matcher()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _pyramid_image_matcher.delete_PyramidImageMatcher

# Register PyramidImageMatcher in _pyramid_image_matcher:
_pyramid_image_matcher.PyramidImageMatcher_swigregister(PyramidImageMatcher)

__all__ = ["PyramidImageMatcher"]


