# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _aircraft_orbit_data

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _aircraft_orbit_data.SWIG_PyInstanceMethod_New
_swig_new_static_method = _aircraft_orbit_data.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _aircraft_orbit_data.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _aircraft_orbit_data.delete_SwigPyIterator
    value = _swig_new_instance_method(_aircraft_orbit_data.SwigPyIterator_value)
    incr = _swig_new_instance_method(_aircraft_orbit_data.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_aircraft_orbit_data.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_aircraft_orbit_data.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_aircraft_orbit_data.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_aircraft_orbit_data.SwigPyIterator_copy)
    next = _swig_new_instance_method(_aircraft_orbit_data.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_aircraft_orbit_data.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_aircraft_orbit_data.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_aircraft_orbit_data.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_aircraft_orbit_data.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_aircraft_orbit_data.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_aircraft_orbit_data.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_aircraft_orbit_data.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_aircraft_orbit_data.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_aircraft_orbit_data.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _aircraft_orbit_data:
_aircraft_orbit_data.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _aircraft_orbit_data.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.orbit
import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.with_parameter
import geocal_swig.look_vector
class AircraftOrbitData(geocal_swig.orbit.QuaternionOrbitData):
    r"""

    This is a single navigation file record for aircraft data.

    This was originally written for data as reported by Applanix ephemeris
    and attitude, but it is likely to be useful for other INU untis.

    Note that we frequently don't have access to a direct measurement of
    the velocity. Rather than trying to do some clever estimate of the
    velocity, we just set it to 0. The velocity is only used for the
    aberration of light calculation, which isn't important for aircraft
    speeds. We can revisit this choice if needed, it wouldn't be too hard
    to use a couple of position measurements at nearby times to estimate
    the velocity.

    C++ includes: aircraft_orbit_data.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GEODETIC_VERTICAL = _aircraft_orbit_data.AircraftOrbitData_GEODETIC_VERTICAL
    GEOCENTRIC_VERTICAL = _aircraft_orbit_data.AircraftOrbitData_GEOCENTRIC_VERTICAL

    def __init__(self, *args):
        r"""

        AircraftOrbitData::AircraftOrbitData(const QuaternionOrbitData &Od, VerticalDefinition
        V=GEODETIC_VERTICAL)
        Convert a more general QuaternionOrbitData to a AircraftOrbitData.

        This is useful if you want to report things in terms of aircraft
        heading etc., but didn't get the original navigation data in that
        format. 
        """
        _aircraft_orbit_data.AircraftOrbitData_swiginit(self, _aircraft_orbit_data.new_AircraftOrbitData(*args))
    _v_local_north_to_ecr = _swig_new_instance_method(_aircraft_orbit_data.AircraftOrbitData__v_local_north_to_ecr)

    @property
    def local_north_to_ecr(self):
        return self._v_local_north_to_ecr()

    _v_body_to_local_north = _swig_new_instance_method(_aircraft_orbit_data.AircraftOrbitData__v_body_to_local_north)

    @property
    def body_to_local_north(self):
        return self._v_body_to_local_north()

    _v_position_geodetic = _swig_new_instance_method(_aircraft_orbit_data.AircraftOrbitData__v_position_geodetic)

    @property
    def position_geodetic(self):
        return self._v_position_geodetic()

    _v_roll = _swig_new_instance_method(_aircraft_orbit_data.AircraftOrbitData__v_roll)

    @property
    def roll(self):
        return self._v_roll()

    _v_pitch = _swig_new_instance_method(_aircraft_orbit_data.AircraftOrbitData__v_pitch)

    @property
    def pitch(self):
        return self._v_pitch()

    _v_heading = _swig_new_instance_method(_aircraft_orbit_data.AircraftOrbitData__v_heading)

    @property
    def heading(self):
        return self._v_heading()

    _v_vertical_definition = _swig_new_instance_method(_aircraft_orbit_data.AircraftOrbitData__v_vertical_definition)

    @property
    def vertical_definition(self):
        return self._v_vertical_definition()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _aircraft_orbit_data.delete_AircraftOrbitData

# Register AircraftOrbitData in _aircraft_orbit_data:
_aircraft_orbit_data.AircraftOrbitData_swigregister(AircraftOrbitData)

__all__ = ["AircraftOrbitData"]


