# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _array_ad

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _array_ad.SWIG_PyInstanceMethod_New
_swig_new_static_method = _array_ad.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _array_ad.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _array_ad.delete_SwigPyIterator
    value = _swig_new_instance_method(_array_ad.SwigPyIterator_value)
    incr = _swig_new_instance_method(_array_ad.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_array_ad.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_array_ad.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_array_ad.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_array_ad.SwigPyIterator_copy)
    next = _swig_new_instance_method(_array_ad.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_array_ad.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_array_ad.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_array_ad.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_array_ad.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_array_ad.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_array_ad.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_array_ad.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_array_ad.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_array_ad.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _array_ad:
_array_ad.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _array_ad.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object

import numpy as np

def np_to_array_ad(a):
    '''Convert a numpy array of AutoDerivatives to a ArrayAd'''
    nvar = 0
    for i in a.flat:
        if(i.number_variable > 0):
            nvar = i.number_variable
            break
    if(len(a.shape) == 1):
        res = ArrayAd_double_1(a.shape[0], nvar)
        for i1 in range(res.rows):
            res[i1]  = a[i1]
    elif(len(a.shape) == 2):
        res = ArrayAd_double_2(a.shape[0], a.shape[1], nvar)
        for i1 in range(res.rows):
            for i2 in range(res.cols):
                res[i1,i2]  = a[i1, i2]
    elif(len(a.shape) == 3):
        res = ArrayAd_double_3(a.shape[0], a.shape[1], a.shape[2], nvar)
        for i1 in range(res.rows):
            for i2 in range(res.cols):
                for i3 in range(res.depth):
                    res[i1,i2, i3]  = a[i1, i2, i3]
    else:
        raise IndexError("np_to_array_ad only implemented for dimension <= 3")
    return res

class ArrayAd_double_1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::ArrayAd< T, D >::ArrayAd(const blitz::TinyVector< int, D > &Shape, int nvar)

        """
        _array_ad.ArrayAd_double_1_swiginit(self, _array_ad.new_ArrayAd_double_1(*args))
    resize_number_variable = _swig_new_instance_method(_array_ad.ArrayAd_double_1_resize_number_variable)
    resize = _swig_new_instance_method(_array_ad.ArrayAd_double_1_resize)
    _v_value = _swig_new_instance_method(_array_ad.ArrayAd_double_1__v_value)

    @property
    def value(self):
        return self._v_value()

    _v_jacobian = _swig_new_instance_method(_array_ad.ArrayAd_double_1__v_jacobian)

    @property
    def jacobian(self):
        return self._v_jacobian()

    _v_rows = _swig_new_instance_method(_array_ad.ArrayAd_double_1__v_rows)

    @property
    def rows(self):
        return self._v_rows()

    _v_cols = _swig_new_instance_method(_array_ad.ArrayAd_double_1__v_cols)

    @property
    def cols(self):
        return self._v_cols()

    _v_depth = _swig_new_instance_method(_array_ad.ArrayAd_double_1__v_depth)

    @property
    def depth(self):
        return self._v_depth()

    _v_is_constant = _swig_new_instance_method(_array_ad.ArrayAd_double_1__v_is_constant)

    @property
    def is_constant(self):
        return self._v_is_constant()

    _v_number_variable = _swig_new_instance_method(_array_ad.ArrayAd_double_1__v_number_variable)

    @property
    def number_variable(self):
        return self._v_number_variable()

    __str__ = _swig_new_instance_method(_array_ad.ArrayAd_double_1___str__)
    reference = _swig_new_instance_method(_array_ad.ArrayAd_double_1_reference)
    copy = _swig_new_instance_method(_array_ad.ArrayAd_double_1_copy)

    def __array__(self):
        if(1 == 1):
            res = np.empty([self.rows], np.object)
            for i1 in range(self.rows):
                res[i1] = self[i1]
        elif(1 ==2):
            res = np.empty([self.rows, self.cols], np.object)
            for i1 in range(self.rows):
                for i2 in range(self.cols):
                    res[i1,i2] = self[i1, i2]
        elif(1 ==3):
            res = np.empty([self.rows, self.cols, self.depth], np.object)
            for i1 in range(self.rows):
                for i2 in range(self.cols):
                    for i3 in range(self.depth):
                        res[i1,i2, i3] = self[i1, i2, i3]
        else:
          raise IndexError("__array__ only implemented to dimensions <= 3")
        return res

    def slice_data(self, key):
      if not type(key) is tuple:
        key = (key,)

      ad_val = self.value[key]
      ad_jac = self.jacobian[key + (slice(None),)]

      num_dim = len(ad_val.shape)

      return eval("ArrayAd_double_%d" % num_dim)(ad_val, ad_jac)

    def __getitem__(self, index):
      if(1 == 1):
        if type(index) is slice:
          return self.slice_data(index)
        else:
          return self.read(index)
      else:
        if any(type(x) is slice for x in index):
          return self.slice_data(index)
        else:
          return self.read(*index)

    def __setitem__(self, index, val):
      if(1 == 1):
        if type(index) is slice:
          raise NotImplementedError("__setitem__ can not be used for setting values to slices")
        self.write(index, val)
      else:
        if any(type(x) is slice for x in index):
          raise NotImplementedError("__setitem__ can not be used for setting values to slices")
        t = list(index)
        t.append(val)
        self.write(*t)

    read = _swig_new_instance_method(_array_ad.ArrayAd_double_1_read)
    write = _swig_new_instance_method(_array_ad.ArrayAd_double_1_write)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _array_ad.delete_ArrayAd_double_1

# Register ArrayAd_double_1 in _array_ad:
_array_ad.ArrayAd_double_1_swigregister(ArrayAd_double_1)
class ArrayAd_double_2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::ArrayAd< T, D >::ArrayAd(const blitz::TinyVector< int, D > &Shape, int nvar)

        """
        _array_ad.ArrayAd_double_2_swiginit(self, _array_ad.new_ArrayAd_double_2(*args))
    resize_number_variable = _swig_new_instance_method(_array_ad.ArrayAd_double_2_resize_number_variable)
    resize = _swig_new_instance_method(_array_ad.ArrayAd_double_2_resize)
    _v_value = _swig_new_instance_method(_array_ad.ArrayAd_double_2__v_value)

    @property
    def value(self):
        return self._v_value()

    _v_jacobian = _swig_new_instance_method(_array_ad.ArrayAd_double_2__v_jacobian)

    @property
    def jacobian(self):
        return self._v_jacobian()

    _v_rows = _swig_new_instance_method(_array_ad.ArrayAd_double_2__v_rows)

    @property
    def rows(self):
        return self._v_rows()

    _v_cols = _swig_new_instance_method(_array_ad.ArrayAd_double_2__v_cols)

    @property
    def cols(self):
        return self._v_cols()

    _v_depth = _swig_new_instance_method(_array_ad.ArrayAd_double_2__v_depth)

    @property
    def depth(self):
        return self._v_depth()

    _v_is_constant = _swig_new_instance_method(_array_ad.ArrayAd_double_2__v_is_constant)

    @property
    def is_constant(self):
        return self._v_is_constant()

    _v_number_variable = _swig_new_instance_method(_array_ad.ArrayAd_double_2__v_number_variable)

    @property
    def number_variable(self):
        return self._v_number_variable()

    __str__ = _swig_new_instance_method(_array_ad.ArrayAd_double_2___str__)
    reference = _swig_new_instance_method(_array_ad.ArrayAd_double_2_reference)
    copy = _swig_new_instance_method(_array_ad.ArrayAd_double_2_copy)

    def __array__(self):
        if(2 == 1):
            res = np.empty([self.rows], np.object)
            for i1 in range(self.rows):
                res[i1] = self[i1]
        elif(2 ==2):
            res = np.empty([self.rows, self.cols], np.object)
            for i1 in range(self.rows):
                for i2 in range(self.cols):
                    res[i1,i2] = self[i1, i2]
        elif(2 ==3):
            res = np.empty([self.rows, self.cols, self.depth], np.object)
            for i1 in range(self.rows):
                for i2 in range(self.cols):
                    for i3 in range(self.depth):
                        res[i1,i2, i3] = self[i1, i2, i3]
        else:
          raise IndexError("__array__ only implemented to dimensions <= 3")
        return res

    def slice_data(self, key):
      if not type(key) is tuple:
        key = (key,)

      ad_val = self.value[key]
      ad_jac = self.jacobian[key + (slice(None),)]

      num_dim = len(ad_val.shape)

      return eval("ArrayAd_double_%d" % num_dim)(ad_val, ad_jac)

    def __getitem__(self, index):
      if(2 == 1):
        if type(index) is slice:
          return self.slice_data(index)
        else:
          return self.read(index)
      else:
        if any(type(x) is slice for x in index):
          return self.slice_data(index)
        else:
          return self.read(*index)

    def __setitem__(self, index, val):
      if(2 == 1):
        if type(index) is slice:
          raise NotImplementedError("__setitem__ can not be used for setting values to slices")
        self.write(index, val)
      else:
        if any(type(x) is slice for x in index):
          raise NotImplementedError("__setitem__ can not be used for setting values to slices")
        t = list(index)
        t.append(val)
        self.write(*t)

    read = _swig_new_instance_method(_array_ad.ArrayAd_double_2_read)
    write = _swig_new_instance_method(_array_ad.ArrayAd_double_2_write)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _array_ad.delete_ArrayAd_double_2

# Register ArrayAd_double_2 in _array_ad:
_array_ad.ArrayAd_double_2_swigregister(ArrayAd_double_2)
class ArrayAd_double_3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::ArrayAd< T, D >::ArrayAd(const blitz::TinyVector< int, D > &Shape, int nvar)

        """
        _array_ad.ArrayAd_double_3_swiginit(self, _array_ad.new_ArrayAd_double_3(*args))
    resize_number_variable = _swig_new_instance_method(_array_ad.ArrayAd_double_3_resize_number_variable)
    resize = _swig_new_instance_method(_array_ad.ArrayAd_double_3_resize)
    _v_value = _swig_new_instance_method(_array_ad.ArrayAd_double_3__v_value)

    @property
    def value(self):
        return self._v_value()

    _v_jacobian = _swig_new_instance_method(_array_ad.ArrayAd_double_3__v_jacobian)

    @property
    def jacobian(self):
        return self._v_jacobian()

    _v_rows = _swig_new_instance_method(_array_ad.ArrayAd_double_3__v_rows)

    @property
    def rows(self):
        return self._v_rows()

    _v_cols = _swig_new_instance_method(_array_ad.ArrayAd_double_3__v_cols)

    @property
    def cols(self):
        return self._v_cols()

    _v_depth = _swig_new_instance_method(_array_ad.ArrayAd_double_3__v_depth)

    @property
    def depth(self):
        return self._v_depth()

    _v_is_constant = _swig_new_instance_method(_array_ad.ArrayAd_double_3__v_is_constant)

    @property
    def is_constant(self):
        return self._v_is_constant()

    _v_number_variable = _swig_new_instance_method(_array_ad.ArrayAd_double_3__v_number_variable)

    @property
    def number_variable(self):
        return self._v_number_variable()

    __str__ = _swig_new_instance_method(_array_ad.ArrayAd_double_3___str__)
    reference = _swig_new_instance_method(_array_ad.ArrayAd_double_3_reference)
    copy = _swig_new_instance_method(_array_ad.ArrayAd_double_3_copy)

    def __array__(self):
        if(3 == 1):
            res = np.empty([self.rows], np.object)
            for i1 in range(self.rows):
                res[i1] = self[i1]
        elif(3 ==2):
            res = np.empty([self.rows, self.cols], np.object)
            for i1 in range(self.rows):
                for i2 in range(self.cols):
                    res[i1,i2] = self[i1, i2]
        elif(3 ==3):
            res = np.empty([self.rows, self.cols, self.depth], np.object)
            for i1 in range(self.rows):
                for i2 in range(self.cols):
                    for i3 in range(self.depth):
                        res[i1,i2, i3] = self[i1, i2, i3]
        else:
          raise IndexError("__array__ only implemented to dimensions <= 3")
        return res

    def slice_data(self, key):
      if not type(key) is tuple:
        key = (key,)

      ad_val = self.value[key]
      ad_jac = self.jacobian[key + (slice(None),)]

      num_dim = len(ad_val.shape)

      return eval("ArrayAd_double_%d" % num_dim)(ad_val, ad_jac)

    def __getitem__(self, index):
      if(3 == 1):
        if type(index) is slice:
          return self.slice_data(index)
        else:
          return self.read(index)
      else:
        if any(type(x) is slice for x in index):
          return self.slice_data(index)
        else:
          return self.read(*index)

    def __setitem__(self, index, val):
      if(3 == 1):
        if type(index) is slice:
          raise NotImplementedError("__setitem__ can not be used for setting values to slices")
        self.write(index, val)
      else:
        if any(type(x) is slice for x in index):
          raise NotImplementedError("__setitem__ can not be used for setting values to slices")
        t = list(index)
        t.append(val)
        self.write(*t)

    read = _swig_new_instance_method(_array_ad.ArrayAd_double_3_read)
    write = _swig_new_instance_method(_array_ad.ArrayAd_double_3_write)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _array_ad.delete_ArrayAd_double_3

# Register ArrayAd_double_3 in _array_ad:
_array_ad.ArrayAd_double_3_swigregister(ArrayAd_double_3)
class ArrayAd_double_4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::ArrayAd< T, D >::ArrayAd(const blitz::TinyVector< int, D > &Shape, int nvar)

        """
        _array_ad.ArrayAd_double_4_swiginit(self, _array_ad.new_ArrayAd_double_4(*args))
    resize_number_variable = _swig_new_instance_method(_array_ad.ArrayAd_double_4_resize_number_variable)
    resize = _swig_new_instance_method(_array_ad.ArrayAd_double_4_resize)
    _v_value = _swig_new_instance_method(_array_ad.ArrayAd_double_4__v_value)

    @property
    def value(self):
        return self._v_value()

    _v_jacobian = _swig_new_instance_method(_array_ad.ArrayAd_double_4__v_jacobian)

    @property
    def jacobian(self):
        return self._v_jacobian()

    _v_rows = _swig_new_instance_method(_array_ad.ArrayAd_double_4__v_rows)

    @property
    def rows(self):
        return self._v_rows()

    _v_cols = _swig_new_instance_method(_array_ad.ArrayAd_double_4__v_cols)

    @property
    def cols(self):
        return self._v_cols()

    _v_depth = _swig_new_instance_method(_array_ad.ArrayAd_double_4__v_depth)

    @property
    def depth(self):
        return self._v_depth()

    _v_is_constant = _swig_new_instance_method(_array_ad.ArrayAd_double_4__v_is_constant)

    @property
    def is_constant(self):
        return self._v_is_constant()

    _v_number_variable = _swig_new_instance_method(_array_ad.ArrayAd_double_4__v_number_variable)

    @property
    def number_variable(self):
        return self._v_number_variable()

    __str__ = _swig_new_instance_method(_array_ad.ArrayAd_double_4___str__)
    reference = _swig_new_instance_method(_array_ad.ArrayAd_double_4_reference)
    copy = _swig_new_instance_method(_array_ad.ArrayAd_double_4_copy)

    def __array__(self):
        if(4 == 1):
            res = np.empty([self.rows], np.object)
            for i1 in range(self.rows):
                res[i1] = self[i1]
        elif(4 ==2):
            res = np.empty([self.rows, self.cols], np.object)
            for i1 in range(self.rows):
                for i2 in range(self.cols):
                    res[i1,i2] = self[i1, i2]
        elif(4 ==3):
            res = np.empty([self.rows, self.cols, self.depth], np.object)
            for i1 in range(self.rows):
                for i2 in range(self.cols):
                    for i3 in range(self.depth):
                        res[i1,i2, i3] = self[i1, i2, i3]
        else:
          raise IndexError("__array__ only implemented to dimensions <= 3")
        return res

    def slice_data(self, key):
      if not type(key) is tuple:
        key = (key,)

      ad_val = self.value[key]
      ad_jac = self.jacobian[key + (slice(None),)]

      num_dim = len(ad_val.shape)

      return eval("ArrayAd_double_%d" % num_dim)(ad_val, ad_jac)

    def __getitem__(self, index):
      if(4 == 1):
        if type(index) is slice:
          return self.slice_data(index)
        else:
          return self.read(index)
      else:
        if any(type(x) is slice for x in index):
          return self.slice_data(index)
        else:
          return self.read(*index)

    def __setitem__(self, index, val):
      if(4 == 1):
        if type(index) is slice:
          raise NotImplementedError("__setitem__ can not be used for setting values to slices")
        self.write(index, val)
      else:
        if any(type(x) is slice for x in index):
          raise NotImplementedError("__setitem__ can not be used for setting values to slices")
        t = list(index)
        t.append(val)
        self.write(*t)

    read = _swig_new_instance_method(_array_ad.ArrayAd_double_4_read)
    write = _swig_new_instance_method(_array_ad.ArrayAd_double_4_write)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _array_ad.delete_ArrayAd_double_4

# Register ArrayAd_double_4 in _array_ad:
_array_ad.ArrayAd_double_4_swigregister(ArrayAd_double_4)

__all__ = ["ArrayAd_double_1","ArrayAd_double_2","ArrayAd_double_3","ArrayAd_double_4"]


