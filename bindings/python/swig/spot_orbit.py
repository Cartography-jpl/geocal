# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _spot_orbit

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _spot_orbit.SWIG_PyInstanceMethod_New
_swig_new_static_method = _spot_orbit.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _spot_orbit.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spot_orbit.delete_SwigPyIterator
    value = _swig_new_instance_method(_spot_orbit.SwigPyIterator_value)
    incr = _swig_new_instance_method(_spot_orbit.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_spot_orbit.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_spot_orbit.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_spot_orbit.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_spot_orbit.SwigPyIterator_copy)
    next = _swig_new_instance_method(_spot_orbit.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_spot_orbit.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_spot_orbit.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_spot_orbit.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_spot_orbit.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_spot_orbit.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_spot_orbit.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_spot_orbit.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_spot_orbit.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_spot_orbit.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _spot_orbit:
_spot_orbit.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _spot_orbit.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.orbit
import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.with_parameter
import geocal_swig.look_vector
class SpotOrbit(geocal_swig.orbit.Orbit):
    r"""

    This class models the SPOT orbit.

    The orbit parameters are given by an DIMAP file. This file is an XML
    file format. You can find documentation for this format
    athttp://www.spot.com/web/SICORP/452-sicorp-the-dimap-format.php.

    We don't actually read this file format. XML is a bit of a pain to
    deal with in C++, and is much easier to process in Ruby. So we set up
    an interface that just takes the Ephemeris and Attitude measurements.
    The Afids class Dimap processes the XML file and can use that to
    create an instance of this class.

    The various angles and so forth are described in the "SPOT Geometry
    Handbook", available athttp://www.spotimage.com/automne_modules_files
    /standard/public/p229_0b
    9c0d94a22e77aac09df2b360c73073SPOT_Geometry_Handbook.pdf

    A note for a developer working with this class. The definition of
    space craft and orbital coordinate used internally has a different
    sign convention than we've used on other instruments such as MISR.

    We use the conventions spelled out in the "SPOT Geometry Handbook"
    consistently in this class, even though this is different than what is
    used in the MISR ATB. In particular, the Z axis points from earth
    center to spacecraft, not spacecraft to earth center as we've used on
    MISR. This is all accounted for by this class, for the outside user
    everything works as expected. But if you are working internally on
    this class this might seem strange.

    Note also that according to the "SPOT Geometry Handbook" the
    reported attitudes are relative to -X, -Y, and Z axis. This means that
    pitch and roll (but not yaw) have the opposite sign of what you would
    expect. The Ypr given to this routine should match what is supplied by
    SPOT in its DIMAP file - we account for the strange sign in this
    class.

    C++ includes: spot_orbit.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    orbit_data = _swig_new_instance_method(_spot_orbit.SpotOrbit_orbit_data)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _spot_orbit.delete_SpotOrbit

# Register SpotOrbit in _spot_orbit:
_spot_orbit.SpotOrbit_swigregister(SpotOrbit)

__all__ = ["SpotOrbit"]


