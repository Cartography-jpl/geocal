# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _ipi

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _ipi.SWIG_PyInstanceMethod_New
_swig_new_static_method = _ipi.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _ipi.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ipi.delete_SwigPyIterator
    value = _swig_new_instance_method(_ipi.SwigPyIterator_value)
    incr = _swig_new_instance_method(_ipi.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_ipi.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_ipi.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_ipi.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_ipi.SwigPyIterator_copy)
    next = _swig_new_instance_method(_ipi.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_ipi.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_ipi.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_ipi.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_ipi.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_ipi.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_ipi.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_ipi.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_ipi.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_ipi.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ipi:
_ipi.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _ipi.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.with_parameter
import geocal_swig.look_vector
class Ipi(geocal_swig.generic_object.GenericObject):
    r"""

    This performs an image point intersection (IPI), finding the time or
    image coordinates that a given ground point is seen by a camera.

    This solves the collinearity equation in order to find the time and
    frame coordinates that a ground point is seen. Note however that the
    collinearity equation can give "false" solutions, because it is
    perfectly happy to find points seen by looking straight through the
    earth (since it does not account for an obstructed view).

    These "false" solutions have nothing to do with the obscuration
    "looking being a mountain" sorts of problems. This actually is a
    different problem. When you run the IPI you can get solutions that are
    on the other side of earth, so looking at when a ground point in the
    United State is seen you can get a solution that returns a time for
    when the spacecraft is flying over China. This is not the "behind a
    mountain" issue, but the fact that a line of sight intersects a
    sphere twice on opposite sides of the Earth. The "false solutions"
    tries to throw these "other side of the earth" solutions out. But
    the IPI does nothing for simple obscuration of the "behind a
    mountain" sorts. The IPI assumes that the point it is given is not
    obscured by terrain. If you need to calculate obscuration, you should
    use a full ray caster (e.g., IgcRayCaster).

    We also get "false" solutions if the camera model diverges (i.e, we
    pass in a look vector parallel to the camera CCD plane, so the point
    is not seen by the camera). This is because the root finder doesn't
    actually look for a zero, but rather a change in the sign of the
    equation. When the camera model diverges, we go from negative infinity
    to positive infinity. We recognize these "false" solutions by
    comparing the collinearity equation results to a user supplied
    tolerance.

    We also allow a "extended" camera (i.e., frame coordinate outside of
    the range of the camera). This is useful for edge of images etc, so we
    don't have abrupt transitions. But we can get false solutions with
    really large coordinate - e.g., imagine two lines at a slight angle to
    each other than intersect at some point outside of the image. We pass
    in a "max_frame_extend" value to limit how far outside the camera we
    look for a solution. This can be a large value to skip this limit, or
    set to 0 to not allow any extension at all.

    We find all the solutions to the collinearity equation, in the range
    Tmin to Tmax. The solutions found must be seperated by a time larger
    then Root_min_separation.

    We then inspect the list of roots, and reject those that are "false"
    solutions. If 1 solution is left, we return it with the success flag
    set to true. Otherwise, we return with the success flag set to false.

    It is very common to call the IPI with a ground point near the last
    call. As a performance improvement, we remember the time results from
    the previous IPI calculation. We first look in a local time range
    around the previous time result. If no solution is found, we then look
    over the entire time range.

    C++ includes: ipi.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Ipi::Ipi(const boost::shared_ptr< Orbit > &Orb, const boost::shared_ptr<
        Camera > &Cam, int Band, Time Tmin, Time Tmax, const
        boost::shared_ptr< TimeTable > &Tt=boost::shared_ptr< TimeTable >(),
        const boost::shared_ptr< Refraction > &Ref=boost::shared_ptr<
        Refraction >(), const boost::shared_ptr< VelocityAberration >
        &Vabb=boost::shared_ptr< VelocityAberration >(), double
        Local_time_window_size=5.0, double Root_min_separation=30.0, double
        Time_tolerance=1e-6, double Max_frame_extend=1000)
        Constructor.

        If you only want to get the Time from the Ipi and not ImageCoordinate,
        it is ok for Tt to be null.

        We find solutions to the Collinearity equations over the full time
        range Tmin to Tmax. However, as a performance enhancement we first
        look around the given Local_time_window_size in seconds around the
        solution from the last call to time() or image_coordinate(). We look
        for all solutions that are Root_min_separation apart. We find time
        with a accuracy given by Time_tolerance. 
        """
        _ipi.Ipi_swiginit(self, _ipi.new_Ipi(*args))
    image_coordinate = _swig_new_instance_method(_ipi.Ipi_image_coordinate)
    image_coordinate_with_derivative = _swig_new_instance_method(_ipi.Ipi_image_coordinate_with_derivative)
    image_coordinate_with_derivative_extended = _swig_new_instance_method(_ipi.Ipi_image_coordinate_with_derivative_extended)
    time = _swig_new_instance_method(_ipi.Ipi_time)
    time_with_derivative = _swig_new_instance_method(_ipi.Ipi_time_with_derivative)
    footprint = _swig_new_instance_method(_ipi.Ipi_footprint)
    _v_resolution_meter = _swig_new_instance_method(_ipi.Ipi__v_resolution_meter)

    @property
    def resolution_meter(self):
        return self._v_resolution_meter()

    __str__ = _swig_new_instance_method(_ipi.Ipi___str__)
    _v_time_acquisition_adjustment = _swig_new_instance_method(_ipi.Ipi__v_time_acquisition_adjustment)

    @property
    def time_acquisition_adjustment(self):
        return self._v_time_acquisition_adjustment()

    @time_acquisition_adjustment.setter
    def time_acquisition_adjustment(self, value):
      self._v_time_acquisition_adjustment(value)

    _v_orbit = _swig_new_instance_method(_ipi.Ipi__v_orbit)

    @property
    def orbit(self):
        return self._v_orbit()

    @orbit.setter
    def orbit(self, value):
      self._v_orbit(value)

    _v_camera = _swig_new_instance_method(_ipi.Ipi__v_camera)

    @property
    def camera(self):
        return self._v_camera()

    @camera.setter
    def camera(self, value):
      self._v_camera(value)

    _v_time_table = _swig_new_instance_method(_ipi.Ipi__v_time_table)

    @property
    def time_table(self):
        return self._v_time_table()

    @time_table.setter
    def time_table(self, value):
      self._v_time_table(value)

    _v_refraction = _swig_new_instance_method(_ipi.Ipi__v_refraction)

    @property
    def refraction(self):
        return self._v_refraction()

    @refraction.setter
    def refraction(self, value):
      self._v_refraction(value)

    _v_velocity_aberration = _swig_new_instance_method(_ipi.Ipi__v_velocity_aberration)

    @property
    def velocity_aberration(self):
        return self._v_velocity_aberration()

    @velocity_aberration.setter
    def velocity_aberration(self, value):
      self._v_velocity_aberration(value)

    _v_band = _swig_new_instance_method(_ipi.Ipi__v_band)

    @property
    def band(self):
        return self._v_band()

    @band.setter
    def band(self, value):
      self._v_band(value)

    _v_min_time = _swig_new_instance_method(_ipi.Ipi__v_min_time)

    @property
    def min_time(self):
        return self._v_min_time()

    _v_max_time = _swig_new_instance_method(_ipi.Ipi__v_max_time)

    @property
    def max_time(self):
        return self._v_max_time()

    _v_local_time_window_size = _swig_new_instance_method(_ipi.Ipi__v_local_time_window_size)

    @property
    def local_time_window_size(self):
        return self._v_local_time_window_size()

    _v_root_min_separation = _swig_new_instance_method(_ipi.Ipi__v_root_min_separation)

    @property
    def root_min_separation(self):
        return self._v_root_min_separation()

    _v_time_tolerance = _swig_new_instance_method(_ipi.Ipi__v_time_tolerance)

    @property
    def time_tolerance(self):
        return self._v_time_tolerance()

    _v_max_frame_extend = _swig_new_instance_method(_ipi.Ipi__v_max_frame_extend)

    @property
    def max_frame_extend(self):
        return self._v_max_frame_extend()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _ipi.delete_Ipi

# Register Ipi in _ipi:
_ipi.Ipi_swigregister(Ipi)

__all__ = ["Ipi"]


