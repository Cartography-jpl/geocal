PROCESS       HELP=*

parm pdsimg type=(string,99) count=1
parm outbase type=(string,99) count=1
parm pdsimg2 type=(string,99) count=1 default=""
parm fulligc type=(string,99) count=1 default=""
parm glas type=(string,4) count=(0:1) valid=(n,y) default=n
parm minh type=real count=1 default=-5000.0
parm maxh type=real count=1 default=-1500.0
parm plot type=(string,99) count=1 default=""
parm subset type=int count=0:4 default=-999
parm kfile type=(string,250) count=1 default=""
parm kpfile type=(string,250) count=1 default=""
parm kjson type=(string,250) count=1 default=""
END-PROC
.TITLE
Mars_Generate_Rsm
.HELP
mars_generate_rsm takes an unprojected PDS image, imports it to VICAR, 
and adds a RSM.

We do not do any radiance correction (e.g., dark current subtraction),
we just pass through the DNs unchanged. However, for CTX camera the
data is at level 0 is normally SQRT encoded. We do expand that out to 
unencoded data.

Currently the specific forms of the RSM are hard coded based on the 
instrument type.

It is not clear what we should do with masked pixels (e.g., CTX), right 
now, we are just removing them.

We are not currently including camera nonlinearities (e.g., HRSC), this 
is something we could add in the future.

One of the required inputs is the various SPICE kernels need to calculate
ephemeris and attitude. There are two components to this - a fixed set of
kernels that is used for any run, and a set of kernels that are time based.
We get the fixed set of kernels from a parent kernel file (kernel files can
list other files to include), and we get the time based kernels from a JSON
file that describes a mapping from time to a the kernel to use. This JSON
file is created by a separate program that looks at all the kernels in
a directory, see the "create_kernel_json" file.

To simplify the input, we default to files in the directory pointed to
by the environment variable MARS_KERNEL. This is filled in with the normal
AFIDS setup_afids_env.sh script. The fixed kernel defaults to 
mro_kernel/mro.ker or mex_kernel/mex.ker depending on the instrument used
(mro.ker for CTX images, mex.ker for HRSC images).

You may have instances where you want to use different set of kernels, e.g.
you have newer improved versions of the kernels than in the standard
MARS_KERNEL directory, or you need to process times not found in the 
MARS_KERNEL directory. You can override the kernels used by using the
command line arguments --fixed-kernel and --kernel-json. There is also the
additional option --fixed-kernel-post for loading kernels after the others.
This is used by example MEX where there is a CK/ATNM_RECONSTITUTED_00004.BC
file that fixes some of the data in the MEX kernels.

Example:
    mars_generate_rsm /raid26/tllogan/mars/mawrth_vallis/source/unmapped/P16_007388_2049_XI_24N020W.IMG ctx1
    rsm_project --grid-spacing=10 --map-info=ctx1_ref_img.xml --number-process=20 --verbose --process-number-line=1000 --process-number-sample=1000 ctx1.img ctx1_proj.img

.LEVEL1
.variable pdsimg
The PDS image we are importing
and adding a RSM to.
.variable pdsimg2
For HiRISE, the second channel of the PDS image
we are importing and adding a RSM to.
.variable outbase
Name to use when forming the
first part of the output file
names.
.variable fulligc

For diagnostic purposes, it
can be useful to have the full
IGC (i.e., the one with the
camera model, spice kernel,
etc.). This is what we
are approximating with the
RSM.
.variable glas
If set to "y" use a GLAS/GFM
model rather than a RSM.
For push-broom instruments
this tends to be more
accurate. Default is
"n"
.variable kfile
If supplied, override the
kernel file used. If not
specified we use
mro_kernel/mro.ker or
mex_kernel/mex.ker in the
directory given by the
environment variable MARS_KERNEL
.variable kpfile
If supplied, override the kernel
file to include after all the
others. Defaults to
"mex_kernel/mex_reconstituted.ker"
for HRSC, none for CTX
.variable kjson
If supplied, override the time
based JSON file mapping to kernels.
Defaults to "mro_kernel/kernel.json"
or "mex_kernel/kernel.json"
.variable minh
Minimum DEM height we create
RSM for. Note this doesn't
need to be super accurate,
just a reasonable value that
is lower than any height we
will encounter over the area.
.variable .maxh
Maximum DEM height we create
RSM for. Note this doesn't
need to be super accurate,
just a reasonable value that
is lower than any height we
will encounter over the area.
.variable plot 
To evaluate the quality of the
generated RSM, this takes a
cross section for all lines,
and 5 equally spaced samples
and plots the difference
between the calculated line
and sample vs. what the full
ImageGroundConnection
calculation creates. Output
is a PDF file.
.END
