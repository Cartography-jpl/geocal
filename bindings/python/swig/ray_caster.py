# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _ray_caster

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _ray_caster.SWIG_PyInstanceMethod_New
_swig_new_static_method = _ray_caster.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ray_caster.delete_SwigPyIterator
    value = _swig_new_instance_method(_ray_caster.SwigPyIterator_value)
    incr = _swig_new_instance_method(_ray_caster.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_ray_caster.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_ray_caster.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_ray_caster.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_ray_caster.SwigPyIterator_copy)
    next = _swig_new_instance_method(_ray_caster.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_ray_caster.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_ray_caster.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_ray_caster.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_ray_caster.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_ray_caster.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_ray_caster.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_ray_caster.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_ray_caster.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_ray_caster.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ray_caster:
_ray_caster.SwigPyIterator_swigregister(SwigPyIterator)
SWIG_MODULE_ALREADY_DONE = _ray_caster.SWIG_MODULE_ALREADY_DONE
SHARED_PTR_DISOWN = _ray_caster.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class RayCaster(geocal_swig.generic_object.GenericObject):
    r"""

    This class is used to do ray casting, determining what in instrument
    is looking at on the ground (e.g., a camera at a particular pose).

    This includes the calculation of obscuration.

    This class chooses what order it is going to go through the various
    camera positions. You can step to the next position, getting the
    ground locations for that position, by calling "next_position". All
    positions have been stepped through from start_position() to
    start_position() + number_position() - 1 (in whatever order the class
    wants) when last_position() returns true.The current position can be
    queried by "current_position". The mapping of position to something
    like image line depends on the particular derived class used, so for
    example a push broom camera might have the position corresponding to
    line number.

    C++ includes: ray_caster.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    _v_cartesian_fixed = _swig_new_instance_method(_ray_caster.RayCaster__v_cartesian_fixed)

    @property
    def cartesian_fixed(self):
        return self._v_cartesian_fixed()

    _v_start_position = _swig_new_instance_method(_ray_caster.RayCaster__v_start_position)

    @property
    def start_position(self):
        return self._v_start_position()

    _v_number_position = _swig_new_instance_method(_ray_caster.RayCaster__v_number_position)

    @property
    def number_position(self):
        return self._v_number_position()

    _v_last_position = _swig_new_instance_method(_ray_caster.RayCaster__v_last_position)

    @property
    def last_position(self):
        return self._v_last_position()

    _v_current_position = _swig_new_instance_method(_ray_caster.RayCaster__v_current_position)

    @property
    def current_position(self):
        return self._v_current_position()

    next_position = _swig_new_instance_method(_ray_caster.RayCaster_next_position)
    shape = _swig_new_instance_method(_ray_caster.RayCaster_shape)
    next_radiance = _swig_new_instance_method(_ray_caster.RayCaster_next_radiance)
    __str__ = _swig_new_instance_method(_ray_caster.RayCaster___str__)
    __swig_destroy__ = _ray_caster.delete_RayCaster

# Register RayCaster in _ray_caster:
_ray_caster.RayCaster_swigregister(RayCaster)

__all__ = ["RayCaster"]


