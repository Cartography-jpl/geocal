# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _raster_averaged

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _raster_averaged.SWIG_PyInstanceMethod_New
_swig_new_static_method = _raster_averaged.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _raster_averaged.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _raster_averaged.delete_SwigPyIterator
    value = _swig_new_instance_method(_raster_averaged.SwigPyIterator_value)
    incr = _swig_new_instance_method(_raster_averaged.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_raster_averaged.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_raster_averaged.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_raster_averaged.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_raster_averaged.SwigPyIterator_copy)
    next = _swig_new_instance_method(_raster_averaged.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_raster_averaged.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_raster_averaged.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_raster_averaged.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_raster_averaged.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_raster_averaged.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_raster_averaged.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_raster_averaged.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_raster_averaged.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_raster_averaged.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _raster_averaged:
_raster_averaged.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _raster_averaged.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.calc_raster
import geocal_swig.raster_image_variable
import geocal_swig.raster_image
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
import geocal_swig.calc_raster_multi_band
class RasterAveraged(geocal_swig.calc_raster.CalcRaster):
    r"""

    This averages a higher resolution RasterImage into a lower resolution
    one.

    The data is a straight average of a given number of pixels in the line
    and sample direction of the full resolution data.

    Typically the pixel averaging factor doesn't exactly divide the number
    of lines and samples of the full resolution data. We just trim the
    data to the largest low resolution pixel that completely fits in the
    higher resolution data.

    This class calculates the average on the fly. Sometimes this is what
    you want, but if you are going to be using the resulting data a few
    times, you may want to use a MemoryRasterImage to generate a copy once
    and keep it in memory.

    C++ includes: raster_averaged.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Data, Number_line_per_pixel, Number_sample_per_pixel, Ignore_zero=False):
        r"""

        RasterAveraged::RasterAveraged(const boost::shared_ptr< RasterImage > &Data, int
        Number_line_per_pixel, int Number_sample_per_pixel, bool
        Ignore_zero=false)
        Constructor. 
        """
        _raster_averaged.RasterAveraged_swiginit(self, _raster_averaged.new_RasterAveraged(Data, Number_line_per_pixel, Number_sample_per_pixel, Ignore_zero))
    _v_high_resolution_image = _swig_new_instance_method(_raster_averaged.RasterAveraged__v_high_resolution_image)

    @property
    def high_resolution_image(self):
        return self._v_high_resolution_image()

    _v_number_line_per_pixel = _swig_new_instance_method(_raster_averaged.RasterAveraged__v_number_line_per_pixel)

    @property
    def number_line_per_pixel(self):
        return self._v_number_line_per_pixel()

    _v_number_sample_per_pixel = _swig_new_instance_method(_raster_averaged.RasterAveraged__v_number_sample_per_pixel)

    @property
    def number_sample_per_pixel(self):
        return self._v_number_sample_per_pixel()

    _v_ignore_zero = _swig_new_instance_method(_raster_averaged.RasterAveraged__v_ignore_zero)

    @property
    def ignore_zero(self):
        return self._v_ignore_zero()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _raster_averaged.delete_RasterAveraged

# Register RasterAveraged in _raster_averaged:
_raster_averaged.RasterAveraged_swigregister(RasterAveraged)
class RasterAveragedMultiBand(geocal_swig.calc_raster_multi_band.CalcRasterMultiBand):
    r"""

    This averages a higher resolution RasterImageMultiBand into a lower
    resolution one.

    The data is a straight average of a given number of pixels in the line
    and sample direction of the full resolution data.

    Typically the pixel averaging factor doesn't exactly divide the number
    of lines and samples of the full resolution data. We just trim the
    data to the largest low resolution pixel that completely fits in the
    higher resolution data.

    This class calculates the average on the fly. Sometimes this is what
    you want, but if you are going to be using the resulting data a few
    times, you may want to use a MemoryRasterImage to generate a copy once
    and keep it in memory.

    C++ includes: raster_averaged.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Data, Number_line_per_pixel, Number_sample_per_pixel, Ignore_zero=False):
        r"""

        RasterAveragedMultiBand::RasterAveragedMultiBand(const boost::shared_ptr< RasterImageMultiBand > &Data, int
        Number_line_per_pixel, int Number_sample_per_pixel, bool
        Ignore_zero=false)
        Constructor. 
        """
        _raster_averaged.RasterAveragedMultiBand_swiginit(self, _raster_averaged.new_RasterAveragedMultiBand(Data, Number_line_per_pixel, Number_sample_per_pixel, Ignore_zero))
    _v_high_resolution_image = _swig_new_instance_method(_raster_averaged.RasterAveragedMultiBand__v_high_resolution_image)

    @property
    def high_resolution_image(self):
        return self._v_high_resolution_image()

    _v_number_line_per_pixel = _swig_new_instance_method(_raster_averaged.RasterAveragedMultiBand__v_number_line_per_pixel)

    @property
    def number_line_per_pixel(self):
        return self._v_number_line_per_pixel()

    _v_number_sample_per_pixel = _swig_new_instance_method(_raster_averaged.RasterAveragedMultiBand__v_number_sample_per_pixel)

    @property
    def number_sample_per_pixel(self):
        return self._v_number_sample_per_pixel()

    _v_ignore_zero = _swig_new_instance_method(_raster_averaged.RasterAveragedMultiBand__v_ignore_zero)

    @property
    def ignore_zero(self):
        return self._v_ignore_zero()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _raster_averaged.delete_RasterAveragedMultiBand

# Register RasterAveragedMultiBand in _raster_averaged:
_raster_averaged.RasterAveragedMultiBand_swigregister(RasterAveragedMultiBand)
class ImageMaskAveraged(object):
    r"""

    Take an existing image mask, and averages it like RasterAveraged.

    We mask a point if any of the points that make it up are masked. This
    does the calculation on fly.

    C++ includes: raster_averaged.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Data, Number_line_per_pixel, Number_sample_per_pixel):
        r"""

        GeoCal::ImageMaskAveraged::ImageMaskAveraged(const boost::shared_ptr< ImageMask > &Data, int
        Number_line_per_pixel, int Number_sample_per_pixel)

        """
        _raster_averaged.ImageMaskAveraged_swiginit(self, _raster_averaged.new_ImageMaskAveraged(Data, Number_line_per_pixel, Number_sample_per_pixel))
    _v_high_resolution_image_mask = _swig_new_instance_method(_raster_averaged.ImageMaskAveraged__v_high_resolution_image_mask)

    @property
    def high_resolution_image_mask(self):
        return self._v_high_resolution_image_mask()

    _v_number_line_per_pixel = _swig_new_instance_method(_raster_averaged.ImageMaskAveraged__v_number_line_per_pixel)

    @property
    def number_line_per_pixel(self):
        return self._v_number_line_per_pixel()

    _v_number_sample_per_pixel = _swig_new_instance_method(_raster_averaged.ImageMaskAveraged__v_number_sample_per_pixel)

    @property
    def number_sample_per_pixel(self):
        return self._v_number_sample_per_pixel()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _raster_averaged.delete_ImageMaskAveraged

# Register ImageMaskAveraged in _raster_averaged:
_raster_averaged.ImageMaskAveraged_swigregister(ImageMaskAveraged)
class AveragedImageGroundConnection(object):
    r"""

    This takes an existing ImageGroundConnection and it averages the
    raster image, accounting for this in the ground/image calculation.

    You can either have the image averaged on the fly, or have it done
    once and kept in memory.

    C++ includes: raster_averaged.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Igc, Number_line_per_pixel, Number_sample_per_pixel, In_memory=False, Ignore_zero=False):
        r"""

        AveragedImageGroundConnection::AveragedImageGroundConnection(const boost::shared_ptr< ImageGroundConnection > Igc, int
        Number_line_per_pixel, int Number_sample_per_pixel, bool
        In_memory=false, bool Ignore_zero=false)
        Constructor for average.

        You can specify your choice of doing the average calculation on the
        fly, or once and kept in memory.

        Note that we set the title to the empty string, you can optionally set
        this to whatever after creating this object. 
        """
        _raster_averaged.AveragedImageGroundConnection_swiginit(self, _raster_averaged.new_AveragedImageGroundConnection(Igc, Number_line_per_pixel, Number_sample_per_pixel, In_memory, Ignore_zero))
    _v_original_image_ground_connection = _swig_new_instance_method(_raster_averaged.AveragedImageGroundConnection__v_original_image_ground_connection)

    @property
    def original_image_ground_connection(self):
        return self._v_original_image_ground_connection()

    _v_number_line_per_pixel = _swig_new_instance_method(_raster_averaged.AveragedImageGroundConnection__v_number_line_per_pixel)

    @property
    def number_line_per_pixel(self):
        return self._v_number_line_per_pixel()

    _v_number_sample_per_pixel = _swig_new_instance_method(_raster_averaged.AveragedImageGroundConnection__v_number_sample_per_pixel)

    @property
    def number_sample_per_pixel(self):
        return self._v_number_sample_per_pixel()

    _v_ignore_zero = _swig_new_instance_method(_raster_averaged.AveragedImageGroundConnection__v_ignore_zero)

    @property
    def ignore_zero(self):
        return self._v_ignore_zero()

    _v_in_memory = _swig_new_instance_method(_raster_averaged.AveragedImageGroundConnection__v_in_memory)

    @property
    def in_memory(self):
        return self._v_in_memory()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _raster_averaged.delete_AveragedImageGroundConnection

# Register AveragedImageGroundConnection in _raster_averaged:
_raster_averaged.AveragedImageGroundConnection_swigregister(AveragedImageGroundConnection)

__all__ = ["RasterAveraged","RasterAveragedMultiBand","ImageMaskAveraged","AveragedImageGroundConnection"]


