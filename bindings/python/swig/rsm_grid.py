# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _rsm_grid

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rsm_grid.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rsm_grid.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _rsm_grid.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rsm_grid.delete_SwigPyIterator
    value = _swig_new_instance_method(_rsm_grid.SwigPyIterator_value)
    incr = _swig_new_instance_method(_rsm_grid.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_rsm_grid.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_rsm_grid.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_rsm_grid.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_rsm_grid.SwigPyIterator_copy)
    next = _swig_new_instance_method(_rsm_grid.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_rsm_grid.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_rsm_grid.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_rsm_grid.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_rsm_grid.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_rsm_grid.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_rsm_grid.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_rsm_grid.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_rsm_grid.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_rsm_grid.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _rsm_grid:
_rsm_grid.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _rsm_grid.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.rsm_base
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class RsmGrid(geocal_swig.rsm_base.RsmBase):
    r"""

    Use a interpolation grid to map from ground to image.

    Right now we only do a linear interpolation. The RSM documentation
    suggests doing Lagrange interpolation of various orders, we can
    implement that in the future.

    This can contain missing data, either because it is outside of the
    image or because the initial ImageGroundConnection failed for a
    particular point. We record these as NaNs.

    Right now this just carries through, we should probably add some kind
    of a status for image_coordinate.

    We plan on using the same grid for a full ground to image map, or for
    doing a correction.

    C++ includes: rsm_grid.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::RsmGrid::RsmGrid(int N_x, int N_y, int N_z, bool Ignore_igc_error_in_fit=false, int
        Total_number_row_digit=11, int Total_number_col_digit=11, int
        Number_fractional_row_digit=2, int Number_fractional_col_digit=2, int
        Row_section_number=1, int Col_section_number=1, const std::string
        &Image_identifier="", const std::string
        &Rsm_support_data_edition="fake-1")
        GeoCal::RsmGrid::RsmGrid
        """
        _rsm_grid.RsmGrid_swiginit(self, _rsm_grid.new_RsmGrid(*args))
    fit_corr = _swig_new_instance_method(_rsm_grid.RsmGrid_fit_corr)
    _v_ignore_igc_error_in_fit = _swig_new_instance_method(_rsm_grid.RsmGrid__v_ignore_igc_error_in_fit)

    @property
    def ignore_igc_error_in_fit(self):
        return self._v_ignore_igc_error_in_fit()

    @ignore_igc_error_in_fit.setter
    def ignore_igc_error_in_fit(self, value):
      self._v_ignore_igc_error_in_fit(value)

    _v_line_grid = _swig_new_instance_method(_rsm_grid.RsmGrid__v_line_grid)

    @property
    def line_grid(self):
        return self._v_line_grid()

    _v_sample_grid = _swig_new_instance_method(_rsm_grid.RsmGrid__v_sample_grid)

    @property
    def sample_grid(self):
        return self._v_sample_grid()

    image_coordinate = _swig_new_instance_method(_rsm_grid.RsmGrid_image_coordinate)
    image_coordinate_jacobian = _swig_new_instance_method(_rsm_grid.RsmGrid_image_coordinate_jacobian)
    number_x = _swig_new_instance_method(_rsm_grid.RsmGrid_number_x)
    number_y = _swig_new_instance_method(_rsm_grid.RsmGrid_number_y)
    x_offset = _swig_new_instance_method(_rsm_grid.RsmGrid_x_offset)
    y_offset = _swig_new_instance_method(_rsm_grid.RsmGrid_y_offset)
    _v_number_z = _swig_new_instance_method(_rsm_grid.RsmGrid__v_number_z)

    @property
    def number_z(self):
        return self._v_number_z()

    _v_x_start = _swig_new_instance_method(_rsm_grid.RsmGrid__v_x_start)

    @property
    def x_start(self):
        return self._v_x_start()

    _v_x_delta = _swig_new_instance_method(_rsm_grid.RsmGrid__v_x_delta)

    @property
    def x_delta(self):
        return self._v_x_delta()

    _v_y_start = _swig_new_instance_method(_rsm_grid.RsmGrid__v_y_start)

    @property
    def y_start(self):
        return self._v_y_start()

    _v_y_delta = _swig_new_instance_method(_rsm_grid.RsmGrid__v_y_delta)

    @property
    def y_delta(self):
        return self._v_y_delta()

    _v_z_start = _swig_new_instance_method(_rsm_grid.RsmGrid__v_z_start)

    @property
    def z_start(self):
        return self._v_z_start()

    _v_z_delta = _swig_new_instance_method(_rsm_grid.RsmGrid__v_z_delta)

    @property
    def z_delta(self):
        return self._v_z_delta()

    _v_total_number_row_digit = _swig_new_instance_method(_rsm_grid.RsmGrid__v_total_number_row_digit)

    @property
    def total_number_row_digit(self):
        return self._v_total_number_row_digit()

    @total_number_row_digit.setter
    def total_number_row_digit(self, value):
      self._v_total_number_row_digit(value)

    _v_total_number_col_digit = _swig_new_instance_method(_rsm_grid.RsmGrid__v_total_number_col_digit)

    @property
    def total_number_col_digit(self):
        return self._v_total_number_col_digit()

    @total_number_col_digit.setter
    def total_number_col_digit(self, value):
      self._v_total_number_col_digit(value)

    _v_number_fractional_row_digit = _swig_new_instance_method(_rsm_grid.RsmGrid__v_number_fractional_row_digit)

    @property
    def number_fractional_row_digit(self):
        return self._v_number_fractional_row_digit()

    @number_fractional_row_digit.setter
    def number_fractional_row_digit(self, value):
      self._v_number_fractional_row_digit(value)

    _v_number_fractional_col_digit = _swig_new_instance_method(_rsm_grid.RsmGrid__v_number_fractional_col_digit)

    @property
    def number_fractional_col_digit(self):
        return self._v_number_fractional_col_digit()

    @number_fractional_col_digit.setter
    def number_fractional_col_digit(self, value):
      self._v_number_fractional_col_digit(value)

    extrapolate_x_direction = _swig_new_instance_method(_rsm_grid.RsmGrid_extrapolate_x_direction)
    extrapolate_y_direction = _swig_new_instance_method(_rsm_grid.RsmGrid_extrapolate_y_direction)
    extrapolate_z_direction = _swig_new_instance_method(_rsm_grid.RsmGrid_extrapolate_z_direction)
    tre_size = _swig_new_instance_method(_rsm_grid.RsmGrid_tre_size)
    tre_string = _swig_new_instance_method(_rsm_grid.RsmGrid_tre_string)
    read_tre_string = _swig_new_static_method(_rsm_grid.RsmGrid_read_tre_string)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _rsm_grid.delete_RsmGrid

# Register RsmGrid in _rsm_grid:
_rsm_grid.RsmGrid_swigregister(RsmGrid)

__all__ = ["RsmGrid"]


