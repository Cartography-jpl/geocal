# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _landsat7_global.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_landsat7_global')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_landsat7_global')
    _landsat7_global = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_landsat7_global', [dirname(__file__)])
        except ImportError:
            import _landsat7_global
            return _landsat7_global
        try:
            _mod = imp.load_module('_landsat7_global', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _landsat7_global = swig_import_helper()
    del swig_import_helper
else:
    import _landsat7_global
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SWIG_MODULE_ALREADY_DONE = _landsat7_global.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _landsat7_global.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_landsat7_global.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_landsat7_global.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_landsat7_global.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_landsat7_global.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_landsat7_global.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_landsat7_global.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_landsat7_global.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_landsat7_global.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_landsat7_global.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_landsat7_global.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_landsat7_global.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_landsat7_global.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_landsat7_global.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_landsat7_global.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_landsat7_global.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_landsat7_global.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _landsat7_global.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _landsat7_global.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.cart_lab_multifile
import geocal_swig.raster_multifile
import geocal_swig.raster_image_variable
import geocal_swig.raster_image
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class Landsat7Global(geocal_swig.cart_lab_multifile.VicarCartLabMultifile):
    """

    This is used to read the global Landsat 7 data.

    The resolution varies by band. The The geolocation accuracy was
    estimated by Tom Logan at 1/3 pixel or so. Not sure how accurate this
    estimate is, perhaps Tom has a better estimate.

    The bands are the standard Landsat 7 bands:

    Band Wavelength (micrometer) Resolution (m)  Band 1 - Blue 0.45-0.52
    30 Band 2 - Green 0.52-0.60 30 Band 3 - Red 0.63-0.69 30 Band 4 - Near
    Infrared (NIR) 0.77-0.90 30 Band 5 - Shortwave Infrared (SWIR) 1
    1.55-1.75 30 Band 6 - Thermal 10.40-12.50 60 Band 7 - Shortwave
    Infrared (SWIR) 2 2.09-2.35 30 Band 8 - Panchromatic .52-.90 15

    Band 6 has both a low and a high gain (Bands 61 and 62).

    C++ includes: landsat7_global.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    BAND1 = _landsat7_global.Landsat7Global_BAND1
    BAND2 = _landsat7_global.Landsat7Global_BAND2
    BAND3 = _landsat7_global.Landsat7Global_BAND3
    BAND4 = _landsat7_global.Landsat7Global_BAND4
    BAND5 = _landsat7_global.Landsat7Global_BAND5
    BAND61 = _landsat7_global.Landsat7Global_BAND61
    BAND62 = _landsat7_global.Landsat7Global_BAND62
    BAND7 = _landsat7_global.Landsat7Global_BAND7
    BAND8 = _landsat7_global.Landsat7Global_BAND8

    def __init__(self, Dir, B):
        """

        Landsat7Global::Landsat7Global(const std::string &Dir, Band B)
        Constructor.

        You provide the directory to look for Landsat 7 data, along with the
        band type. 
        """
        _landsat7_global.Landsat7Global_swiginit(self, _landsat7_global.new_Landsat7Global(Dir, B))

    def _v_band(self):
        """

        Band GeoCal::Landsat7Global::band() const

        """
        return _landsat7_global.Landsat7Global__v_band(self)


    @property
    def band(self):
        return self._v_band()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _landsat7_global.delete_Landsat7Global
Landsat7Global._v_band = new_instancemethod(_landsat7_global.Landsat7Global__v_band, None, Landsat7Global)
Landsat7Global_swigregister = _landsat7_global.Landsat7Global_swigregister
Landsat7Global_swigregister(Landsat7Global)


__all__ = ["Landsat7Global"]



