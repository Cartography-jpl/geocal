# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _vicar_file

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _vicar_file.SWIG_PyInstanceMethod_New
_swig_new_static_method = _vicar_file.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _vicar_file.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vicar_file.delete_SwigPyIterator
    value = _swig_new_instance_method(_vicar_file.SwigPyIterator_value)
    incr = _swig_new_instance_method(_vicar_file.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_vicar_file.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_vicar_file.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_vicar_file.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_vicar_file.SwigPyIterator_copy)
    next = _swig_new_instance_method(_vicar_file.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_vicar_file.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_vicar_file.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_vicar_file.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_vicar_file.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_vicar_file.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_vicar_file.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_vicar_file.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_vicar_file.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_vicar_file.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _vicar_file:
_vicar_file.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _vicar_file.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class VicarFile(geocal_swig.generic_object.GenericObject):
    r"""

    This handles opening and closing a Vicar file.

    This class doesn't actually read and write data, but is used by other
    classes which do.

    This uses the VICAR RTL, which is documented athttp://www-
    mipl.jpl.nasa.gov/RTL

    If the VICAR RTL library wasn't available when this geocal was built,
    then this class will just throw an exception when we try to do
    anything with a VICAR file.

    As an implementation detail, the class VicarFile and IbisFile need to
    coordinate in translating file names to unit numbers since the same
    underlying Vicar routine zvunit is used by both. We arbitrarily have
    VicarFile handle this, and IbisFile accesses VicarFile when it needs
    to do this.

    Also a note for developers. The Vicar RTL library uses various
    variable argument functions. You need to end the list of arguments
    with "NULL". Note that a cast to a point type is mandatory, you
    can't just say "0". If say "0" then you will get fairly difficult
    to track down errors. Without the cast, this gets passed as an int,
    which the RTL library code will then try to interpret as a char *.
    va_args has undefined behavior when called with the wrong type,
    ranging from seeming to work to core dumping.

    Because of the complication involved, we have separated out the
    functionality of reading and writing MapInfo metadata. This is done by
    the class VicarOgr. This is handled behind the scenes, so for a user
    of this class this separation makes no difference. But if you are
    looking for the code that does this, you'll need to look in VicarOgr.

    The current implementation of the MapInfo metadata requires the GDAL
    library to be available. If this isn't you can still build the GeoCal
    system but any attempt to read or write MapInfo metadata will trigger
    an exception.

    C++ includes: vicar_file.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    VICAR_INT = _vicar_file.VicarFile_VICAR_INT
    VICAR_REAL = _vicar_file.VicarFile_VICAR_REAL
    VICAR_STRING = _vicar_file.VicarFile_VICAR_STRING
    VICAR_BYTE = _vicar_file.VicarFile_VICAR_BYTE
    VICAR_HALF = _vicar_file.VicarFile_VICAR_HALF
    VICAR_FULL = _vicar_file.VicarFile_VICAR_FULL
    VICAR_FLOAT = _vicar_file.VicarFile_VICAR_FLOAT
    VICAR_DOUBLE = _vicar_file.VicarFile_VICAR_DOUBLE
    READ = _vicar_file.VicarFile_READ
    WRITE = _vicar_file.VicarFile_WRITE
    UPDATE = _vicar_file.VicarFile_UPDATE
    NONE = _vicar_file.VicarFile_NONE
    BASIC = _vicar_file.VicarFile_BASIC
    BASIC2 = _vicar_file.VicarFile_BASIC2
    RSM_XML_FILE = _vicar_file.VicarFile_RSM_XML_FILE
    RSM_NITF_FILE = _vicar_file.VicarFile_RSM_NITF_FILE
    GLAS_GFM_XML_FILE = _vicar_file.VicarFile_GLAS_GFM_XML_FILE
    GLAS_GFM_NITF_FILE = _vicar_file.VicarFile_GLAS_GFM_NITF_FILE

    def __init__(self, *args):
        r"""

        VicarFile::VicarFile(int Instance, int Number_line, int Number_sample, int Number_band=1,
        const std::string &Type="BYTE", const std::string &Name="OUT",
        const std::string &Org="BSQ", compression C=NONE)
        GeoCal::VicarFile::VicarFile
        Create a new VICAR file with the given size.
        Use the VICAR Name and Instance input (so for example, "INP" and 2
        is the second INP file passed to a VICAR program. 
        """
        _vicar_file.VicarFile_swiginit(self, _vicar_file.new_VicarFile(*args))
    __swig_destroy__ = _vicar_file.delete_VicarFile
    vicar_available = _swig_new_static_method(_vicar_file.VicarFile_vicar_available)
    _v_access = _swig_new_instance_method(_vicar_file.VicarFile__v_access)

    @property
    def access(self):
        return self._v_access()

    _v_force_area_pixel = _swig_new_instance_method(_vicar_file.VicarFile__v_force_area_pixel)

    @property
    def force_area_pixel(self):
        return self._v_force_area_pixel()

    _v_file_name = _swig_new_instance_method(_vicar_file.VicarFile__v_file_name)

    @property
    def file_name(self):
        return self._v_file_name()

    is_vicar_file = _swig_new_static_method(_vicar_file.VicarFile_is_vicar_file)
    file_name_to_unit = _swig_new_static_method(_vicar_file.VicarFile_file_name_to_unit)
    _v_number_band = _swig_new_instance_method(_vicar_file.VicarFile__v_number_band)

    @property
    def number_band(self):
        return self._v_number_band()

    _v_number_line = _swig_new_instance_method(_vicar_file.VicarFile__v_number_line)

    @property
    def number_line(self):
        return self._v_number_line()

    _v_number_sample = _swig_new_instance_method(_vicar_file.VicarFile__v_number_sample)

    @property
    def number_sample(self):
        return self._v_number_sample()

    _v_type = _swig_new_instance_method(_vicar_file.VicarFile__v_type)

    @property
    def type(self):
        return self._v_type()

    _v_unit = _swig_new_instance_method(_vicar_file.VicarFile__v_unit)

    @property
    def unit(self):
        return self._v_unit()

    _v_map_info = _swig_new_instance_method(_vicar_file.VicarFile__v_map_info)

    @property
    def map_info(self):
        return self._v_map_info()

    @map_info.setter
    def map_info(self, value):
      self._v_map_info(value)

    _v_rpc = _swig_new_instance_method(_vicar_file.VicarFile__v_rpc)

    @property
    def rpc(self):
        return self._v_rpc()

    @rpc.setter
    def rpc(self, value):
      self._v_rpc(value)

    _v_rsm = _swig_new_instance_method(_vicar_file.VicarFile__v_rsm)

    @property
    def rsm(self):
        return self._v_rsm()

    @rsm.setter
    def rsm(self, value):
      self._v_rsm(value)

    _v_igc_glas_gfm = _swig_new_instance_method(_vicar_file.VicarFile__v_igc_glas_gfm)

    @property
    def igc_glas_gfm(self):
        return self._v_igc_glas_gfm()

    @igc_glas_gfm.setter
    def igc_glas_gfm(self, value):
      self._v_igc_glas_gfm(value)


    def rsm_save_xml(self, value):
      self._v_rsm(value, self.RSM_XML_FILE)


    def igc_glas_gfm_save_xml(self, value):
      self._v_igc_glas_gfm(value, self.GLAS_GFM_XML_FILE)

    close = _swig_new_instance_method(_vicar_file.VicarFile_close)
    flush = _swig_new_instance_method(_vicar_file.VicarFile_flush)
    __str__ = _swig_new_instance_method(_vicar_file.VicarFile___str__)
    label_delete = _swig_new_instance_method(_vicar_file.VicarFile_label_delete)
    label_set = _swig_new_instance_method(_vicar_file.VicarFile_label_set)
    ltype = _swig_new_instance_method(_vicar_file.VicarFile_ltype)
    label_int = _swig_new_instance_method(_vicar_file.VicarFile_label_int)
    label_float = _swig_new_instance_method(_vicar_file.VicarFile_label_float)
    label_double = _swig_new_instance_method(_vicar_file.VicarFile_label_double)
    label_string = _swig_new_instance_method(_vicar_file.VicarFile_label_string)
    label_list = _swig_new_instance_method(_vicar_file.VicarFile_label_list)
    property_list = _swig_new_instance_method(_vicar_file.VicarFile_property_list)

    def __getitem__(self, key):
        if(isinstance(key, list) or isinstance(key, tuple)):
          prop, ky = key
          tp = self.ltype(prop + " " + ky)
          if(tp == VicarFile.VICAR_INT):
             return self.label_int(ky, prop)
          elif(tp == VicarFile.VICAR_REAL):
             return self.label_float(ky, prop)
          elif(tp == VicarFile.VICAR_DOUBLE):
             return self.label_double(ky, prop)
          else:
             return self.label_string(ky, prop)
        else:
          tp = self.ltype(key)
          if(tp == VicarFile.VICAR_INT):
             return self.label_int(key)
          elif(tp == VicarFile.VICAR_REAL):
             return self.label_float(key)
          elif(tp == VicarFile.VICAR_DOUBLE):
             return self.label_double(key)
          else:
             return self.label_string(key)

    def __setitem__(self, key, v):
        if(isinstance(key, list) or isinstance(key, tuple)):
          prop, ky = key
          self.label_set(ky, v, prop)
        else:
          self.label_set(key, v)


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)


# Register VicarFile in _vicar_file:
_vicar_file.VicarFile_swigregister(VicarFile)

__all__ = ["VicarFile"]


