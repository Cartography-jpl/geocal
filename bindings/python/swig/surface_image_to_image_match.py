# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _surface_image_to_image_match

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _surface_image_to_image_match.SWIG_PyInstanceMethod_New
_swig_new_static_method = _surface_image_to_image_match.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _surface_image_to_image_match.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _surface_image_to_image_match.delete_SwigPyIterator
    value = _swig_new_instance_method(_surface_image_to_image_match.SwigPyIterator_value)
    incr = _swig_new_instance_method(_surface_image_to_image_match.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_surface_image_to_image_match.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_surface_image_to_image_match.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_surface_image_to_image_match.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_surface_image_to_image_match.SwigPyIterator_copy)
    next = _swig_new_instance_method(_surface_image_to_image_match.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_surface_image_to_image_match.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_surface_image_to_image_match.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_surface_image_to_image_match.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_surface_image_to_image_match.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_surface_image_to_image_match.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_surface_image_to_image_match.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_surface_image_to_image_match.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_surface_image_to_image_match.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_surface_image_to_image_match.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _surface_image_to_image_match:
_surface_image_to_image_match.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _surface_image_to_image_match.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.image_to_image_match
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class SurfaceImageToImageMatch(geocal_swig.image_to_image_match.ImageToImageMatch):
    r"""

    This is an ImageToImageMatch that takes two image ground connections
    along with a MapInfo to project to.

    The data is matched at the surface, although the results are reported
    in image coordinates.

    The MapInfo is used to get the resolution and map projection, the
    actual coverage isn't important (e.g., the ulc and lrc). We make sure
    that the coverage works over the full image.

    Depending on your application, we can do the map projection only where
    we need an image patch for matching, or you can supply the full
    surface image.

    If you are collecting tiepoints over a large image, you usually want
    to do the map projection on the fly as needed, since we typically only
    map project a small part of the image.

    In some cases, you may be doing lots of points or simply already have
    the data map projected. In those cases, you can pass the RasterImage
    in. These should be map projected, with a MapInfo (e.g., geotiff label
    or whatever in the data).

    C++ includes: surface_image_to_image_match.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        SurfaceImageToImageMatch::SurfaceImageToImageMatch(const boost::shared_ptr< ImageGroundConnection > &Igc1, const
        boost::shared_ptr< RasterImage > &Surface_image1, const
        boost::shared_ptr< ImageGroundConnection > &Igc2, const
        boost::shared_ptr< RasterImage > &Surface_image2, const
        boost::shared_ptr< ImageMatcher > &Matcher)
        Constructor, where we supply the already map projected data. 
        """
        _surface_image_to_image_match.SurfaceImageToImageMatch_swiginit(self, _surface_image_to_image_match.new_SurfaceImageToImageMatch(*args))
    match_surf = _swig_new_instance_method(_surface_image_to_image_match.SurfaceImageToImageMatch_match_surf)
    _v_image_ground_connection1 = _swig_new_instance_method(_surface_image_to_image_match.SurfaceImageToImageMatch__v_image_ground_connection1)

    @property
    def image_ground_connection1(self):
        return self._v_image_ground_connection1()

    _v_image_ground_connection2 = _swig_new_instance_method(_surface_image_to_image_match.SurfaceImageToImageMatch__v_image_ground_connection2)

    @property
    def image_ground_connection2(self):
        return self._v_image_ground_connection2()

    _v_matcher = _swig_new_instance_method(_surface_image_to_image_match.SurfaceImageToImageMatch__v_matcher)

    @property
    def matcher(self):
        return self._v_matcher()

    _v_map_project_on_demand = _swig_new_instance_method(_surface_image_to_image_match.SurfaceImageToImageMatch__v_map_project_on_demand)

    @property
    def map_project_on_demand(self):
        return self._v_map_project_on_demand()

    _v_surface_image1 = _swig_new_instance_method(_surface_image_to_image_match.SurfaceImageToImageMatch__v_surface_image1)

    @property
    def surface_image1(self):
        return self._v_surface_image1()

    _v_surface_image2 = _swig_new_instance_method(_surface_image_to_image_match.SurfaceImageToImageMatch__v_surface_image2)

    @property
    def surface_image2(self):
        return self._v_surface_image2()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _surface_image_to_image_match.delete_SurfaceImageToImageMatch

# Register SurfaceImageToImageMatch in _surface_image_to_image_match:
_surface_image_to_image_match.SurfaceImageToImageMatch_swigregister(SurfaceImageToImageMatch)

__all__ = ["SurfaceImageToImageMatch"]


