# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _swig_boost_array

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _swig_boost_array.SWIG_PyInstanceMethod_New
_swig_new_static_method = _swig_boost_array.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class Array_double_20(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _size = _swig_new_instance_method(_swig_boost_array.Array_double_20__size)

    @property
    def size(self):
       return self._size()

    def set(self, v):
       '''Set the value to the given value. The value should be a container
       that we can enumerate over to fill in the value of the array'''
       for i, t in enumerate(v):
          if(i >= self.size):
              raise RuntimeError("Value must be exactly %d in size" % self.size)
          self[i] = t
       if(i != self.size - 1):
           raise RuntimeError("Value must be exactly %d in size" % self.size)

    def __iter__(self):
       for i in range(self.size):
           yield self[i]

    def __reduce__(self):
       return _new_from_set, (self.__class__, list(self))

    __getitem__ = _swig_new_instance_method(_swig_boost_array.Array_double_20___getitem__)
    __setitem__ = _swig_new_instance_method(_swig_boost_array.Array_double_20___setitem__)
    print_to_string = _swig_new_instance_method(_swig_boost_array.Array_double_20_print_to_string)

    def __init__(self):
        _swig_boost_array.Array_double_20_swiginit(self, _swig_boost_array.new_Array_double_20())
    __swig_destroy__ = _swig_boost_array.delete_Array_double_20

# Register Array_double_20 in _swig_boost_array:
_swig_boost_array.Array_double_20_swigregister(Array_double_20)
class Array_double_12(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _size = _swig_new_instance_method(_swig_boost_array.Array_double_12__size)

    @property
    def size(self):
       return self._size()

    def set(self, v):
       '''Set the value to the given value. The value should be a container
       that we can enumerate over to fill in the value of the array'''
       for i, t in enumerate(v):
          if(i >= self.size):
              raise RuntimeError("Value must be exactly %d in size" % self.size)
          self[i] = t
       if(i != self.size - 1):
           raise RuntimeError("Value must be exactly %d in size" % self.size)

    def __iter__(self):
       for i in range(self.size):
           yield self[i]

    def __reduce__(self):
       return _new_from_set, (self.__class__, list(self))

    __getitem__ = _swig_new_instance_method(_swig_boost_array.Array_double_12___getitem__)
    __setitem__ = _swig_new_instance_method(_swig_boost_array.Array_double_12___setitem__)
    print_to_string = _swig_new_instance_method(_swig_boost_array.Array_double_12_print_to_string)

    def __init__(self):
        _swig_boost_array.Array_double_12_swiginit(self, _swig_boost_array.new_Array_double_12())
    __swig_destroy__ = _swig_boost_array.delete_Array_double_12

# Register Array_double_12 in _swig_boost_array:
_swig_boost_array.Array_double_12_swigregister(Array_double_12)
class Array_double_14(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _size = _swig_new_instance_method(_swig_boost_array.Array_double_14__size)

    @property
    def size(self):
       return self._size()

    def set(self, v):
       '''Set the value to the given value. The value should be a container
       that we can enumerate over to fill in the value of the array'''
       for i, t in enumerate(v):
          if(i >= self.size):
              raise RuntimeError("Value must be exactly %d in size" % self.size)
          self[i] = t
       if(i != self.size - 1):
           raise RuntimeError("Value must be exactly %d in size" % self.size)

    def __iter__(self):
       for i in range(self.size):
           yield self[i]

    def __reduce__(self):
       return _new_from_set, (self.__class__, list(self))

    __getitem__ = _swig_new_instance_method(_swig_boost_array.Array_double_14___getitem__)
    __setitem__ = _swig_new_instance_method(_swig_boost_array.Array_double_14___setitem__)
    print_to_string = _swig_new_instance_method(_swig_boost_array.Array_double_14_print_to_string)

    def __init__(self):
        _swig_boost_array.Array_double_14_swiginit(self, _swig_boost_array.new_Array_double_14())
    __swig_destroy__ = _swig_boost_array.delete_Array_double_14

# Register Array_double_14 in _swig_boost_array:
_swig_boost_array.Array_double_14_swigregister(Array_double_14)
class Array_double_3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _size = _swig_new_instance_method(_swig_boost_array.Array_double_3__size)

    @property
    def size(self):
       return self._size()

    def set(self, v):
       '''Set the value to the given value. The value should be a container
       that we can enumerate over to fill in the value of the array'''
       for i, t in enumerate(v):
          if(i >= self.size):
              raise RuntimeError("Value must be exactly %d in size" % self.size)
          self[i] = t
       if(i != self.size - 1):
           raise RuntimeError("Value must be exactly %d in size" % self.size)

    def __iter__(self):
       for i in range(self.size):
           yield self[i]

    def __reduce__(self):
       return _new_from_set, (self.__class__, list(self))

    __getitem__ = _swig_new_instance_method(_swig_boost_array.Array_double_3___getitem__)
    __setitem__ = _swig_new_instance_method(_swig_boost_array.Array_double_3___setitem__)
    print_to_string = _swig_new_instance_method(_swig_boost_array.Array_double_3_print_to_string)

    def __init__(self):
        _swig_boost_array.Array_double_3_swiginit(self, _swig_boost_array.new_Array_double_3())
    __swig_destroy__ = _swig_boost_array.delete_Array_double_3

# Register Array_double_3 in _swig_boost_array:
_swig_boost_array.Array_double_3_swigregister(Array_double_3)
class Array_bool_20(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _size = _swig_new_instance_method(_swig_boost_array.Array_bool_20__size)

    @property
    def size(self):
       return self._size()

    def set(self, v):
       '''Set the value to the given value. The value should be a container
       that we can enumerate over to fill in the value of the array'''
       for i, t in enumerate(v):
          if(i >= self.size):
              raise RuntimeError("Value must be exactly %d in size" % self.size)
          self[i] = t
       if(i != self.size - 1):
           raise RuntimeError("Value must be exactly %d in size" % self.size)

    def __iter__(self):
       for i in range(self.size):
           yield self[i]

    def __reduce__(self):
       return _new_from_set, (self.__class__, list(self))

    __getitem__ = _swig_new_instance_method(_swig_boost_array.Array_bool_20___getitem__)
    __setitem__ = _swig_new_instance_method(_swig_boost_array.Array_bool_20___setitem__)
    print_to_string = _swig_new_instance_method(_swig_boost_array.Array_bool_20_print_to_string)

    def __init__(self):
        _swig_boost_array.Array_bool_20_swiginit(self, _swig_boost_array.new_Array_bool_20())
    __swig_destroy__ = _swig_boost_array.delete_Array_bool_20

# Register Array_bool_20 in _swig_boost_array:
_swig_boost_array.Array_bool_20_swigregister(Array_bool_20)

