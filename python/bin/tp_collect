#! /usr/bin/env python
#
# This collects tie points.

import geocal
from multiprocessing import Pool
import logging

version = "September 9, 2016"
usage="""Usage: 
  tp_collect [options] <igc> <output>
  tp_collect --gcp [options] <igc> <reference_image> <output>
  tp_collect -h | --help
  tp_collect -v | --version

This program is used to generate a collection of tie points or ground control
points (tie points with the addition of ground truth).

This creates a sqlite shelve object that holds an array of TiePoints. The
output should be in "file:key" format, e.g., "my_data.db:tp". The input is
the IgcCollection to use, also in the same format (which can be in the same
or a different input file).

If you supply a reference image, this should be a "file:key" object.

Options:
  -h --help         
       Print this message

  --add-tp
       The default behavior is to overwrite whatever "file:key" value is
       specified as the output. You can optionally add the TP/GCPs we 
       generate.

  --avg-level=n
       You can specify an averaging level to use. If supplied, we use
       a pyramid image matching scheme, starting at a resolution of 
       2^avg_level, and proceeding down factors of 2 until we fail image
       matching or get all the way down to full resolution data. Useful
       for difficult to match imagery. [default: 0]

  --base-image-index=n
       The image to consider the base image in matching. [default: 0]

  --base-image-spacing=n
       If supplied, rather than collecting tiepoints for one base image
       step through all the images in the igc, with the given spacing. We
       always do the edges. So if we have 11 images and spacing of 3, we
       collect tiepoints with images 0, 3, 6, 9, 10 as the base image. If
       you also specify "--gcp", we in addition collect gcps. [default: 0]

  --grid-border=n
       Border to use, so we don't look for tiepoints too close to the edge
       of the image. [default: 100]

  --feature-match 
       Use feature matching instead of image matching. If
       you also specify "--gcp", we in addition collect GCPs. 

       Note that feature matching can have much larger blunders than we
       typically see for image matching (since it can match any 2
       features in an image). You will want to do some kind of outlier
       rejection (e.g., "--outlier-reject-ransac")

  --gcp
       Create GCPs, which requires the additional arguments of a reference
       image.
   
  --grid-spacing=f
       If we are dong a surface projection, you can supply how frequently
       to do the full ImageGroundConnection. Most of the time there is no
       point in doing this calculation at a high resolution than the 
       underlying DEM. [default: 1]

  --map-info=f
       Use the supplied map information (either a MapInfo, or a RasterImage 
       with a MapInfo). This is used to project to the surface before matching, 
       useful for matching data that is from different enough angles or 
       resolution that matching the raw images will fail. See
       also --project-surface that automatically finds the map info to use.

  --matcher=f
       Can pass the matcher to use as a shelve or xml file. Useful when
       you want to use a different matcher (e.g., phase correlation matcher)
       or different parameters for the standard ccorr/lsm matcher.

  --matching-qa-file=f
       Write matching QA summary to the given file.

  --gcp-matcher=f
       Can pass in a matcher to use for matching to the reference image.
       You may want this to be different than what is used to match between
       images (e.g., have a larger search area on the surface). If not 
       supplied, we use the matcher given in matcher option.

  --max-ground-sigma=d
       How far off the various matched points can miss when intersecting
       on the surface, in meters. This is used to filter out bad tie-points,
       but you want this large enough you aren't filtering out good points.
       [default: 20.0]

  --min-grid-size=n
       If we have a smaller image, then reduce the number x and y so the
       grid cell we examine isn't smaller than this size [default: 100]

  --number-feature=n
       Number of features to match for. Note that a value of 0 means "find 
       as many as you can", and for smaller images this if often a good 
       choice. [default: 500]

   --number-octave-levels=n
       Number of octave levels to include in feature matching. [default: 4]

   --number-ref-feature=n
       Number of features to match for in reference image. Since reference
       image covers a larger area, usually you want this larger than
       "--number-feature" value. Note that a value of 0 means "find 
       as many as you can", and for smaller images this if often a good 
       choice. [default: 1000]

  --number-process=n 
       Number of processors to use. [default: 1]

  --number-x=n      
       Number of grid points in the X direction to try for [default: 100]

  --number-y=n      
       Number of grid points in the Y direction to try for [default: 100]

   --outlier-reject-ransac
       If true, then do RANSAC outlier rejection. This fits the
       tiepoints between pairs of images to create the Fundamental Matrix, 
       rejecting outliers using Random sample consensus (RANSAC).

       Note that the Fundamental Matrix really only applies for epipolar
       geometry, e.g., a pair of frame pinhole cameras as single position.
       Our cameras often aren't this (e.g., a pushbroom camera). However often
       we are close enough that we can still used this approximation to look
       for outliers.

   --outlier-reject-ransac-surface-project
       Like "--outlier-reject-ransac", but project the points first to the 
       surface. This is useful for data that isn't sufficiently close to a
       frame camera (e.g., aircraft data).

   --outlier-reject-ransac-threshold=d
       Threshold to use in rejecting outliers using "--outlier-reject-ransac"
       [default: 3]

  --reference-dem=shelve
       DEM to use with the reference image specified as file:key. 
       If not specified, we use the DEM from the first IGC.

  --project-surface
       This is used to project to the surface before matching, 
       useful for matching data that is from different enough angles or 
       resolution that matching the raw images will fail. We use a geographic
       projection that matches the resolution of the center pixel of the 
       base image. See also --map-info option.

  --scale-factor=f
       You can optionally pass in a scale factor. This is applied to
       the raster data before image matching. This is useful for
       example AirMSPI data where the image is a reflectance value
       between 0.0 and 1.0. Since the image matchers expect integer
       data, you won't get any results unless you scale to a different
       range.

  --surface-image=shelve
       Like project-surface, but use already projected imagery. This will
       often run much faster, since we don't need to project. The imagery
       should all be at the same resolution, although it doesn't need to
       have the same coverage.

  --surface-image-aoi
       Sometimes the ForstnerFeatureDetector doesn't select good points. As an
       alternative, we can just use a regular grid in the surface-image space.

  --verbose
       Print more information as we run.

  --debug
       Print even more verbose information.

  -v --version      
       Print program version
"""

def image_match_tp_collect(args, igc, mi, refimg, pool):
    '''Tp collection is a bit different for image matching vs. feature matching.
    Collect image matching into a single function, that we can call'''
    tpcollect = []
    msg = []
    if(args.surface_image):
        surface_image = geocal.read_shelve(args.surface_image)
    else:
        surface_image = None
    if(args.matcher):
       image_matcher = geocal.read_shelve(args.matcher)
    else:       
       image_matcher = None
    if(args.gcp_matcher):
       gcp_image_matcher = geocal.read_shelve(args.gcp_matcher)
    else:       
       gcp_image_matcher = image_matcher
    if(args.reference_dem):
       dem = geocal.read_shelve(args.reference_dem)
    else:
       dem = igc.dem(0)
    border=args.grid_border
    if(args.surface_image_aoi):
        aoi = surface_image[args.base_image_index].map_info
    else:
        aoi = None    
    
    if(args.base_image_spacing):
        for i in range(0, igc.number_image, args.base_image_spacing):
            log.info("Adding base image %d" % i)
            msg.append("Doing base image %d" % i)
            if(args.project_surface):
                ig_base = igc.image_ground_connection(i)
                mibase = cib01_mapinfo(desired_resolution = ig_base.resolution_meter())
                mi = ig_base.cover(mibase)
            tpcollect.append(geocal.TiePointCollect(igc, avg_level = args.avg_level,
                                             scale_factor = args.scale_factor,
                                             image_matcher = image_matcher,
                                             ref_image = refimg,
                                             ref_dem = dem,
                                             gcp_image_matcher = gcp_image_matcher,
                                             map_info = mi,
                                             grid_spacing = args.grid_spacing,
                                             surface_image = surface_image,
                                             base_image_index = i,
                                             max_ground_covariance = 
                                             args.max_ground_sigma ** 2))
        if(not igc.number_image % args.base_image_spacing == 0):
            log.info("Adding base image %d" % (igc.number_image - 1, ))
            msg.append("Doing base image %d" % (igc.number_image - 1, ))
            if(args.project_surface):
                ig_base = igc.image_ground_connection(igc.number_image - 1)
                mibase = geocal.cib01_mapinfo(desired_resolution = ig_base.resolution_meter())
                mi = ig_base.cover(mibase)
            tpcollect.append(geocal.TiePointCollect(igc, avg_level = args.avg_level,
                                             image_matcher = image_matcher,
                                             ref_image = refimg,
                                             ref_dem = dem,
                                             gcp_image_matcher = gcp_image_matcher,
                                             scale_factor = args.scale_factor,
                                             map_info = mi,
                                             grid_spacing = args.grid_spacing,
                                             surface_image = surface_image,
                                             base_image_index = igc.number_image - 1,
                                             max_ground_covariance = 
                                             args.max_ground_sigma ** 2))
    else:
        log.info("Adding base image %d" % args.base_image_index)
        msg.append("Doing base image %d" % args.base_image_index)
        tpcollect.append(geocal.TiePointCollect(igc, avg_level = args.avg_level,
                                         image_matcher = image_matcher,
                                         ref_image = refimg,
                                         ref_dem = dem,
                                         gcp_image_matcher = gcp_image_matcher,
                                         scale_factor = args.scale_factor,
                                         map_info = mi,
                                         grid_spacing = args.grid_spacing,
                                         surface_image = surface_image,
                                         base_image_index = args.base_image_index,
                                         max_ground_covariance = 
                                         args.max_ground_sigma ** 2))
    maxnumx = int(igc.image(0).number_line / args.min_grid_size)
    maxnumy = int(igc.image(0).number_sample / args.min_grid_size)
    numx = min(args.number_x, maxnumx)
    numy = min(args.number_y, maxnumy)
    tparr = geocal.TiePointCollection()
    diag = None
    for i, tpcol in enumerate(tpcollect):
        log.info("---------------------------------------------------------")
        log.info(msg[i])
        log.info("---------------------------------------------------------")
        tpres, diag = tpcol.tie_point_grid(numx, numy, aoi=aoi,
                                           dem=dem,
                                           border=border, pool = pool,
                                           diagnostic=diag)
        tparr.extend(tpres)
    return tparr, diag

def feature_match_tp_collect(args, igc, refimg, pool):
    tp_collect = geocal.TiePointCollectFM(igc, ref_image = refimg,
                               number_feature = args.number_feature,
                               number_octave_levels = args.number_octave_levels,
                               number_ref_feature = args.number_ref_feature,
                               max_ground_covariance = 
                               args.max_ground_sigma ** 2)
    return tp_collect.tie_point_list(pool = pool)
    

args = geocal.docopt_simple(usage, version=version)
if(args.debug):
    logging.basicConfig(level = logging.DEBUG)
elif(args.verbose):
    logging.basicConfig(level = logging.INFO)
log = logging.getLogger("geocal-python.tp_collect")
# This is really verbose, so we don't in general want to see this
log_optimize = logging.getLogger("geocal-python.lm_optimize")
log_optimize.setLevel(logging.WARNING)
pool = None
if(args.number_process > 1):
    pool = Pool(args.number_process)

igc = geocal.read_shelve(args.igc)
if(args.map_info):
    m = geocal.read_shelve(args.map_info)
    if(isinstance(m, geocal.MapInfo)):
        mi = m
    else:
        mi = m.map_info
elif(args.project_surface):
    ig_base = igc.image_ground_connection(args.base_image_index)
    mibase = geocal.cib01_mapinfo(desired_resolution = ig_base.resolution_meter())
    mi = ig_base.cover(mibase)
else:
    mi = None
if(args.gcp):
    refimg = geocal.read_shelve(args.reference_image)
else:
    refimg = None


if(args.feature_match):
    if(pool != None):
        log.warning("Parallel processing for feature matching doesn't currently work.")
    pool = None
    tparr = feature_match_tp_collect(args, igc, refimg, pool)
    diag = None                 # Don't have yet for feature match
else:
    tparr, diag = image_match_tp_collect(args, igc, mi, refimg, pool)

if(args.outlier_reject_ransac):
    tparr = geocal.outlier_reject_ransac(tparr, ref_image = refimg, 
               threshold = args.outlier_reject_ransac_threshold,
               diagnostic = diag)
if(args.outlier_reject_ransac_surface_project):
    tparr = geocal.outlier_reject_ransac(tparr, ref_image = refimg, 
               igccol = igc, threshold = args.outlier_reject_ransac_threshold,
               diagnostic = diag)

if(diag is not None):
    diag.print_report(log = log)
    if(args.matching_qa_file):
        with open(args.matching_qa_file, "w") as fh:
            diag.print_report(fh=fh)
try:
    # Ok if this fails, it just means args.output doesn't exist yet
    if(args.add_tp):
        tparr.extend(geocal.read_shelve(args.output))
except (KeyError, RuntimeError):
    pass

for i in range(len(tparr)):
    tparr[i].id = i

geocal.write_shelve(args.output, tparr)
if(pool):
    pool.close()


