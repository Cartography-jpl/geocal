# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _map_info

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _map_info.SWIG_PyInstanceMethod_New
_swig_new_static_method = _map_info.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _map_info.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _map_info.delete_SwigPyIterator
    value = _swig_new_instance_method(_map_info.SwigPyIterator_value)
    incr = _swig_new_instance_method(_map_info.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_map_info.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_map_info.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_map_info.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_map_info.SwigPyIterator_copy)
    next = _swig_new_instance_method(_map_info.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_map_info.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_map_info.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_map_info.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_map_info.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_map_info.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_map_info.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_map_info.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_map_info.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_map_info.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _map_info:
_map_info.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _map_info.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
class MapInfo(geocal_swig.generic_object.GenericObject):
    r"""

    This contains information describing a map.

    This class is used to treat map projection information the same,
    regardless of the specific map projection used. However, the pixels of
    the map are required to be equally spaced in the X and Y coordinates
    of the underlying map projection.

    Note that the various coordinates (e.g., lrc_x()) are for the bounding
    box, not for the center of the lrc or ulc pixel.

    The parameters used in MapInfo are the affine parameters, see for
    example GeoTiff. Note though that by convention we use the middle of
    the ulc pixel is at (0,0), and the upper left corner of the pixel is
    at (-0.5, -0.5). The parameters on the other hand have the center of
    the ulc pixel at (0.5, 0.5) and the upper left corner of the pixel at
    (0, 0). This class handles this difference, but we mention this in
    this comment so you can understand where the various "0.5" terms
    come in.

    We have a field indicating if the pixels are points or area. Note that
    we follow the GDAL convention - the value of the field doesn't change
    the geotiff parameters or any of the other fields. (-0.5, -0.5) is the
    ulc of the area, regardless of if we are point or area. But the value
    of this tells how to interpret the pixels in the RasterImage that this
    MapInfo is attached to - either as points or averages over area.

    C++ includes: map_info.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::MapInfo::MapInfo(const MapInfo &Mi)
        GeoCal::MapInfo::MapInfo
        """
        _map_info.MapInfo_swiginit(self, _map_info.new_MapInfo(*args))
    change_to_geodetic360 = _swig_new_instance_method(_map_info.MapInfo_change_to_geodetic360)
    change_to_geodetic = _swig_new_instance_method(_map_info.MapInfo_change_to_geodetic)
    _v_is_geodetic_360 = _swig_new_instance_method(_map_info.MapInfo__v_is_geodetic_360)

    @property
    def is_geodetic_360(self):
        return self._v_is_geodetic_360()

    _v_coordinate_converter = _swig_new_instance_method(_map_info.MapInfo__v_coordinate_converter)

    @property
    def coordinate_converter(self):
        return self._v_coordinate_converter()

    _v_is_point = _swig_new_instance_method(_map_info.MapInfo__v_is_point)

    @property
    def is_point(self):
        return self._v_is_point()

    coordinate = _swig_new_instance_method(_map_info.MapInfo_coordinate)
    cover = _swig_new_instance_method(_map_info.MapInfo_cover)
    ground_coordinate = _swig_new_instance_method(_map_info.MapInfo_ground_coordinate)
    intersection = _swig_new_instance_method(_map_info.MapInfo_intersection)
    map_union = _swig_new_instance_method(_map_info.MapInfo_map_union)
    index_to_coordinate = _swig_new_instance_method(_map_info.MapInfo_index_to_coordinate)
    coordinate_to_index = _swig_new_instance_method(_map_info.MapInfo_coordinate_to_index)
    _v_lrc_x = _swig_new_instance_method(_map_info.MapInfo__v_lrc_x)

    @property
    def lrc_x(self):
        return self._v_lrc_x()

    _v_lrc_y = _swig_new_instance_method(_map_info.MapInfo__v_lrc_y)

    @property
    def lrc_y(self):
        return self._v_lrc_y()

    _v_number_x_pixel = _swig_new_instance_method(_map_info.MapInfo__v_number_x_pixel)

    @property
    def number_x_pixel(self):
        return self._v_number_x_pixel()

    _v_number_y_pixel = _swig_new_instance_method(_map_info.MapInfo__v_number_y_pixel)

    @property
    def number_y_pixel(self):
        return self._v_number_y_pixel()

    _v_resolution_meter = _swig_new_instance_method(_map_info.MapInfo__v_resolution_meter)

    @property
    def resolution_meter(self):
        return self._v_resolution_meter()

    _v_resolution_x = _swig_new_instance_method(_map_info.MapInfo__v_resolution_x)

    @property
    def resolution_x(self):
        return self._v_resolution_x()

    _v_resolution_y = _swig_new_instance_method(_map_info.MapInfo__v_resolution_y)

    @property
    def resolution_y(self):
        return self._v_resolution_y()

    subset = _swig_new_instance_method(_map_info.MapInfo_subset)
    scale = _swig_new_instance_method(_map_info.MapInfo_scale)
    _v_ulc_x = _swig_new_instance_method(_map_info.MapInfo__v_ulc_x)

    @property
    def ulc_x(self):
        return self._v_ulc_x()

    _v_ulc_y = _swig_new_instance_method(_map_info.MapInfo__v_ulc_y)

    @property
    def ulc_y(self):
        return self._v_ulc_y()

    _v_transform = _swig_new_instance_method(_map_info.MapInfo__v_transform)

    @property
    def transform(self):
        return self._v_transform()

    __str__ = _swig_new_instance_method(_map_info.MapInfo___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _map_info.delete_MapInfo

# Register MapInfo in _map_info:
_map_info.MapInfo_swigregister(MapInfo)

__all__ = ["MapInfo"]


