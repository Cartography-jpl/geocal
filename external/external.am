# ========================================================================
# Build boost
#
# Boost has many libraries. We used the --with-libraries to restrict to the
# build to only the libraries we use. This is entirely to reduce build time
# - all the libraries in boost build fine and we could use any of them that
# are desired. If we want to add a library or two they can be added to the 
# list, or if it is easier we can remove the --with-libraries option to build
# the full set.
#
# Boost can be built for multithreading. We don't need or use that, so
# we pass the option threading=single to turn that off. If we ever do
# need it, we can change this option.

if BUILD_BOOST
BOOST_NAME = boost_1_46_1

# Select one of the files installed. We use the timestamp on this to
# determine if we already have installed boost, or if we need to. Nothing
# special about this particular file, it is just one of them installed.
BOOST_TARGET = $(DESTDIR)$(includedir)/boost/smart_ptr.hpp

# Header files might be needed by other sources. Inform Makefile it needs
# to build these header files first.
BUILT_SOURCES += $(BOOST_TARGET)

# See discussion of options passed to configure and make above
$(BOOST_TARGET): $(srcapyexternal)/$(BOOST_NAME).tar.gz
	@echo "*************************** Building BOOST"
	-rm -rf $(BOOST_NAME)
	${AMTAR} xzf $<
	cd $(BOOST_NAME) && \
	export PATH=$(bindir):$$PATH && \
        export LD_LIBRARY_PATH="$(DESTDIR)$(libdir):${LD_LIBRARY_PATH}" && \
        ./bootstrap.sh --prefix=$(DESTDIR)$(prefix) \
           --with-libraries=date_time,regex,test && \
        echo "using gcc : : $(CXX) ;" > tools/build/v2/user-config.jam && \
        ./bjam install threading=single link=shared && exit 0; exit 1
# On mac, the full name of the library isn't put into the installed library.
# This command will fail on linux, which is fine. We just ignore failure.
	-install_name_tool -id ${prefix}/lib/libboost_regex.dylib ${prefix}/lib/libboost_regex.dylib
	-install_name_tool -id ${prefix}/lib/libboost_date_time.dylib ${prefix}/lib/libboost_date_time.dylib
	-install_name_tool -id ${prefix}/lib/libboost_unit_test_framework.dylib ${prefix}/lib/libboost_unit_test_framework.dylib
	rm -rf $(BOOST_NAME)
	touch $(BOOST_TARGET)
	@echo "========================== Done building BOOST"
else
BOOST_TARGET = 
endif

# ========================================================================
# Build blitz++

if BUILD_BLITZ
BLITZ_NAME = blitz-0.9
BLITZ_TARGET = $(DESTDIR)$(libdir)/libblitz.la

BUILT_SOURCES += $(BLITZ_TARGET)

# This patch is described at 
# http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=455661. This adds some
# header files that are needed by gcc >= 4.3. These really should have
# always been there, but the headers in gcc were a bit messy before
BLITZ_PATCH = blitz++.patch

$(BLITZ_TARGET): $(srcapyexternal)/$(BLITZ_NAME).tar.gz 
	@echo "*************************** Building Blitz"
	-rm -rf $(BLITZ_NAME)
	${AMTAR} xzf $<
	cd $(BLITZ_NAME) && patch -p1 < $(abs_srcdir)/$(srcapyexternal)/$(BLITZ_PATCH) &&\
	export PATH=$(bindir):$$PATH && \
        export LD_LIBRARY_PATH="$(DESTDIR)$(libdir):${LD_LIBRARY_PATH}" && \
        ./configure --prefix=$(prefix) --enable-shared --disable-doxygen \
           CXX=$(CXX) CC=$(CC) F77=$(F77) && \
        $(MAKE) && $(MAKE) -j 1 install && exit 0; exit 1
	rm -rf $(BLITZ_NAME)
	@echo "========================== Done building Blitz"

else
BLITZ_TARGET = 
endif

if BUILD_EXIV
# ========================================================================
# Build exiv2
#
# The --disable-visibility is a bit obscure. The library is trying to take
# advantage of something it calls "g++ visibility support". Not sure what
# actually this is, but it is apparently not supported by the older gcc 3.4
# avaliable on minaret. This compiles with no problem on gcc 4.0 and later,
# but we'll go ahead and turn this off to build on minaret.

EXIV2_NAME = exiv2-0.21.1
EXIV2_TARGET = $(DESTDIR)$(libdir)/libexiv2.la
BUILT_SOURCES += $(EXIV2_TARGET)

$(EXIV2_TARGET): $(srcapyexternal)/$(EXIV2_NAME).tar.gz $(PKGCONFIG_TARGET) $(ZLIB_TARGET) $(BOOST_TARGET)
	@echo "*************************** Building exiv"
	-rm -rf $(EXIV2_NAME)
	${AMTAR} xzf $<
	cd $(EXIV2_NAME) && \
	export PATH=$(bindir):$$PATH && \
        export LD_LIBRARY_PATH="$(DESTDIR)$(libdir):${LD_LIBRARY_PATH}" && \
        ./configure --disable-visibility --prefix=$(prefix) --disable-xmp \
            --with-zlib=$(prefix) CXX=$(CXX) CC=$(CC) F77=$(F77) && \
        $(MAKE) && $(MAKE) -j 1 install && exit 0; exit 1
	rm -rf $(EXIV2_NAME)
	@echo "========================== Done building exiv"

endif


# ========================================================================
# Build graphviz

GRAPHVIZ_NAME = graphviz-2.28.0
GRAPHVIZ_TARGET = $(DESTDIR)$(bindir)/dot

$(GRAPHVIZ_TARGET): $(srcexternal)/$(GRAPHVIZ_NAME).tar.gz $(JPEG_TARGET) $(FREETYPE_TARGET) $(GD_TARGET) $(PNG_TARGET)
	@echo "*************************** Building Graphviz"
	-rm -rf $(GRAPHVIZ_NAME)
	${AMTAR} xzf $<
	cd $(GRAPHVIZ_NAME) && \
	export PATH=$(bindir):$$PATH && \
        export LD_LIBRARY_PATH="$(DESTDIR)$(libdir):${LD_LIBRARY_PATH}" && \
        ./configure --prefix=$(prefix) --disable-swig --disable-sharp \
           --disable-guile --disable-java --disable-lua --disable-ocaml \
           --disable-perl --disable-php --disable-python --disable-ruby \
           --disable-tcl --without-pangocairo --without-lasi \
           --with-included-ltdl \
           CXX=$(CXX) CC=$(CC) F77=$(F77) && \
        $(MAKE) && $(MAKE) -j 1 install && exit 0; exit 1
	rm -rf $(GRAPHVIZ_NAME)
	@echo "========================== Done building Grapviz"

# ========================================================================
# Build doxygen

if BUILD_DOXYGEN
DOXYGEN_NAME = doxygen-1.7.5.1
DOXYGEN_TARGET = $(DESTDIR)$(bindir)/doxygen
BUILT_SOURCES += $(DOXYGEN_TARGET)

$(DOXYGEN_TARGET): $(srcexternal)/$(DOXYGEN_NAME).src.tar.gz $(GRAPHVIZ_TARGET) $(FLEX_TARGET) $(BISON_TARGET)
	@echo "*************************** Building Doxygen"
	-rm -rf $(DOXYGEN_NAME)
	${AMTAR} xzf $<
	cd $(DOXYGEN_NAME) && \
	export PATH=$(bindir):$$PATH && \
        export LD_LIBRARY_PATH="$(DESTDIR)$(libdir):${LD_LIBRARY_PATH}" && \
        ./configure --prefix $(prefix) --flex $(DESTDIR)$(bindir)/flex \
           --bison $(DESTDIR)$(bindir)/bison --dot $(DESTDIR)$(bindir)/dot && \
        $(MAKE) && $(MAKE) -j 1 install && exit 0; exit 1
	rm -rf $(DOXYGEN_NAME)
	@echo "========================== Done building Doxygen"
else
DOXYGEN_TARGET =
endif


