# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _look_vector.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_look_vector', [dirname(__file__)])
        except ImportError:
            import _look_vector
            return _look_vector
        if fp is not None:
            try:
                _mod = imp.load_module('_look_vector', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _look_vector = swig_import_helper()
    del swig_import_helper
else:
    import _look_vector
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _look_vector.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_look_vector.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_look_vector.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_look_vector.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_look_vector.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_look_vector.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_look_vector.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_look_vector.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_look_vector.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_look_vector.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_look_vector.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_look_vector.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_look_vector.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_look_vector.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_look_vector.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_look_vector.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_look_vector.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _look_vector.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_look_vector.SHARED_PTR_DISOWN_swigconstant(_look_vector)
SHARED_PTR_DISOWN = _look_vector.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
class Vector_Time(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _look_vector.Vector_Time_swiginit(self, _look_vector.new_Vector_Time(*args))

    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _look_vector.delete_Vector_Time
Vector_Time.iterator = new_instancemethod(_look_vector.Vector_Time_iterator, None, Vector_Time)
Vector_Time.__nonzero__ = new_instancemethod(_look_vector.Vector_Time___nonzero__, None, Vector_Time)
Vector_Time.__bool__ = new_instancemethod(_look_vector.Vector_Time___bool__, None, Vector_Time)
Vector_Time.__len__ = new_instancemethod(_look_vector.Vector_Time___len__, None, Vector_Time)
Vector_Time.pop = new_instancemethod(_look_vector.Vector_Time_pop, None, Vector_Time)
Vector_Time.__getslice__ = new_instancemethod(_look_vector.Vector_Time___getslice__, None, Vector_Time)
Vector_Time.__setslice__ = new_instancemethod(_look_vector.Vector_Time___setslice__, None, Vector_Time)
Vector_Time.__delslice__ = new_instancemethod(_look_vector.Vector_Time___delslice__, None, Vector_Time)
Vector_Time.__delitem__ = new_instancemethod(_look_vector.Vector_Time___delitem__, None, Vector_Time)
Vector_Time.__getitem__ = new_instancemethod(_look_vector.Vector_Time___getitem__, None, Vector_Time)
Vector_Time.__setitem__ = new_instancemethod(_look_vector.Vector_Time___setitem__, None, Vector_Time)
Vector_Time.append = new_instancemethod(_look_vector.Vector_Time_append, None, Vector_Time)
Vector_Time.empty = new_instancemethod(_look_vector.Vector_Time_empty, None, Vector_Time)
Vector_Time.size = new_instancemethod(_look_vector.Vector_Time_size, None, Vector_Time)
Vector_Time.clear = new_instancemethod(_look_vector.Vector_Time_clear, None, Vector_Time)
Vector_Time.swap = new_instancemethod(_look_vector.Vector_Time_swap, None, Vector_Time)
Vector_Time.get_allocator = new_instancemethod(_look_vector.Vector_Time_get_allocator, None, Vector_Time)
Vector_Time.begin = new_instancemethod(_look_vector.Vector_Time_begin, None, Vector_Time)
Vector_Time.end = new_instancemethod(_look_vector.Vector_Time_end, None, Vector_Time)
Vector_Time.rbegin = new_instancemethod(_look_vector.Vector_Time_rbegin, None, Vector_Time)
Vector_Time.rend = new_instancemethod(_look_vector.Vector_Time_rend, None, Vector_Time)
Vector_Time.pop_back = new_instancemethod(_look_vector.Vector_Time_pop_back, None, Vector_Time)
Vector_Time.erase = new_instancemethod(_look_vector.Vector_Time_erase, None, Vector_Time)
Vector_Time.push_back = new_instancemethod(_look_vector.Vector_Time_push_back, None, Vector_Time)
Vector_Time.front = new_instancemethod(_look_vector.Vector_Time_front, None, Vector_Time)
Vector_Time.back = new_instancemethod(_look_vector.Vector_Time_back, None, Vector_Time)
Vector_Time.assign = new_instancemethod(_look_vector.Vector_Time_assign, None, Vector_Time)
Vector_Time.resize = new_instancemethod(_look_vector.Vector_Time_resize, None, Vector_Time)
Vector_Time.insert = new_instancemethod(_look_vector.Vector_Time_insert, None, Vector_Time)
Vector_Time.reserve = new_instancemethod(_look_vector.Vector_Time_reserve, None, Vector_Time)
Vector_Time.capacity = new_instancemethod(_look_vector.Vector_Time_capacity, None, Vector_Time)
Vector_Time_swigregister = _look_vector.Vector_Time_swigregister
Vector_Time_swigregister(Vector_Time)

class Vector_Time2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _look_vector.Vector_Time2_swiginit(self, _look_vector.new_Vector_Time2(*args))
    __swig_destroy__ = _look_vector.delete_Vector_Time2
Vector_Time2.iterator = new_instancemethod(_look_vector.Vector_Time2_iterator, None, Vector_Time2)
Vector_Time2.__nonzero__ = new_instancemethod(_look_vector.Vector_Time2___nonzero__, None, Vector_Time2)
Vector_Time2.__bool__ = new_instancemethod(_look_vector.Vector_Time2___bool__, None, Vector_Time2)
Vector_Time2.__len__ = new_instancemethod(_look_vector.Vector_Time2___len__, None, Vector_Time2)
Vector_Time2.pop = new_instancemethod(_look_vector.Vector_Time2_pop, None, Vector_Time2)
Vector_Time2.__getslice__ = new_instancemethod(_look_vector.Vector_Time2___getslice__, None, Vector_Time2)
Vector_Time2.__setslice__ = new_instancemethod(_look_vector.Vector_Time2___setslice__, None, Vector_Time2)
Vector_Time2.__delslice__ = new_instancemethod(_look_vector.Vector_Time2___delslice__, None, Vector_Time2)
Vector_Time2.__delitem__ = new_instancemethod(_look_vector.Vector_Time2___delitem__, None, Vector_Time2)
Vector_Time2.__getitem__ = new_instancemethod(_look_vector.Vector_Time2___getitem__, None, Vector_Time2)
Vector_Time2.__setitem__ = new_instancemethod(_look_vector.Vector_Time2___setitem__, None, Vector_Time2)
Vector_Time2.append = new_instancemethod(_look_vector.Vector_Time2_append, None, Vector_Time2)
Vector_Time2.empty = new_instancemethod(_look_vector.Vector_Time2_empty, None, Vector_Time2)
Vector_Time2.size = new_instancemethod(_look_vector.Vector_Time2_size, None, Vector_Time2)
Vector_Time2.clear = new_instancemethod(_look_vector.Vector_Time2_clear, None, Vector_Time2)
Vector_Time2.swap = new_instancemethod(_look_vector.Vector_Time2_swap, None, Vector_Time2)
Vector_Time2.get_allocator = new_instancemethod(_look_vector.Vector_Time2_get_allocator, None, Vector_Time2)
Vector_Time2.begin = new_instancemethod(_look_vector.Vector_Time2_begin, None, Vector_Time2)
Vector_Time2.end = new_instancemethod(_look_vector.Vector_Time2_end, None, Vector_Time2)
Vector_Time2.rbegin = new_instancemethod(_look_vector.Vector_Time2_rbegin, None, Vector_Time2)
Vector_Time2.rend = new_instancemethod(_look_vector.Vector_Time2_rend, None, Vector_Time2)
Vector_Time2.pop_back = new_instancemethod(_look_vector.Vector_Time2_pop_back, None, Vector_Time2)
Vector_Time2.erase = new_instancemethod(_look_vector.Vector_Time2_erase, None, Vector_Time2)
Vector_Time2.push_back = new_instancemethod(_look_vector.Vector_Time2_push_back, None, Vector_Time2)
Vector_Time2.front = new_instancemethod(_look_vector.Vector_Time2_front, None, Vector_Time2)
Vector_Time2.back = new_instancemethod(_look_vector.Vector_Time2_back, None, Vector_Time2)
Vector_Time2.assign = new_instancemethod(_look_vector.Vector_Time2_assign, None, Vector_Time2)
Vector_Time2.resize = new_instancemethod(_look_vector.Vector_Time2_resize, None, Vector_Time2)
Vector_Time2.insert = new_instancemethod(_look_vector.Vector_Time2_insert, None, Vector_Time2)
Vector_Time2.reserve = new_instancemethod(_look_vector.Vector_Time2_reserve, None, Vector_Time2)
Vector_Time2.capacity = new_instancemethod(_look_vector.Vector_Time2_capacity, None, Vector_Time2)
Vector_Time2_swigregister = _look_vector.Vector_Time2_swigregister
Vector_Time2_swigregister(Vector_Time2)

class LookVectorDouble(geocal_swig.generic_object.GenericObject):
    """

    This is a look vector in an unspecified coordinate system.

    Derived classes specify the coordinate system.

    C++ includes: look_vector.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def look_vector(self):
        return self._look_vector()

    @look_vector.setter
    def look_vector(self, value):
      self._look_vector(value)


    def _v_direction(self):
        """

        boost::array<T, 3> GeoCal::LookVector< T >::direction() const
        This is the direction, as a unit vector. 
        """
        return _look_vector.LookVectorDouble__v_direction(self)


    @property
    def direction(self):
        return self._v_direction()


    def _v_look_quaternion(self, *args):
        """

        void GeoCal::LookVector< T >::look_quaternion(const boost::math::quaternion< T > &V)
        Set look vector using a quaternion. 
        """
        return _look_vector.LookVectorDouble__v_look_quaternion(self, *args)


    @property
    def look_quaternion(self):
        return self._v_look_quaternion()

    @look_quaternion.setter
    def look_quaternion(self, value):
      self._v_look_quaternion(value)


    def _v_length(self):
        """

        T GeoCal::LookVector< T >::length() const
        Length of look vector, in meters. 
        """
        return _look_vector.LookVectorDouble__v_length(self)


    @property
    def length(self):
        return self._v_length()

    __swig_destroy__ = _look_vector.delete_LookVectorDouble
LookVectorDouble._look_vector = new_instancemethod(_look_vector.LookVectorDouble__look_vector, None, LookVectorDouble)
LookVectorDouble._v_direction = new_instancemethod(_look_vector.LookVectorDouble__v_direction, None, LookVectorDouble)
LookVectorDouble._v_look_quaternion = new_instancemethod(_look_vector.LookVectorDouble__v_look_quaternion, None, LookVectorDouble)
LookVectorDouble._v_length = new_instancemethod(_look_vector.LookVectorDouble__v_length, None, LookVectorDouble)
LookVectorDouble.__str__ = new_instancemethod(_look_vector.LookVectorDouble___str__, None, LookVectorDouble)
LookVectorDouble_swigregister = _look_vector.LookVectorDouble_swigregister
LookVectorDouble_swigregister(LookVectorDouble)

class LookVectorAutoDerivativeDouble(geocal_swig.generic_object.GenericObject):
    """

    This is a look vector in an unspecified coordinate system.

    Derived classes specify the coordinate system.

    C++ includes: look_vector.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def look_vector(self):
        return self._look_vector()

    @look_vector.setter
    def look_vector(self, value):
      self._look_vector(value)


    def _v_direction(self):
        """

        boost::array<T, 3> GeoCal::LookVector< T >::direction() const
        This is the direction, as a unit vector. 
        """
        return _look_vector.LookVectorAutoDerivativeDouble__v_direction(self)


    @property
    def direction(self):
        return self._v_direction()


    def _v_look_quaternion(self, *args):
        """

        void GeoCal::LookVector< T >::look_quaternion(const boost::math::quaternion< T > &V)
        Set look vector using a quaternion. 
        """
        return _look_vector.LookVectorAutoDerivativeDouble__v_look_quaternion(self, *args)


    @property
    def look_quaternion(self):
        return self._v_look_quaternion()

    @look_quaternion.setter
    def look_quaternion(self, value):
      self._v_look_quaternion(value)


    def _v_length(self):
        """

        T GeoCal::LookVector< T >::length() const
        Length of look vector, in meters. 
        """
        return _look_vector.LookVectorAutoDerivativeDouble__v_length(self)


    @property
    def length(self):
        return self._v_length()

    __swig_destroy__ = _look_vector.delete_LookVectorAutoDerivativeDouble
LookVectorAutoDerivativeDouble._look_vector = new_instancemethod(_look_vector.LookVectorAutoDerivativeDouble__look_vector, None, LookVectorAutoDerivativeDouble)
LookVectorAutoDerivativeDouble._v_direction = new_instancemethod(_look_vector.LookVectorAutoDerivativeDouble__v_direction, None, LookVectorAutoDerivativeDouble)
LookVectorAutoDerivativeDouble._v_look_quaternion = new_instancemethod(_look_vector.LookVectorAutoDerivativeDouble__v_look_quaternion, None, LookVectorAutoDerivativeDouble)
LookVectorAutoDerivativeDouble._v_length = new_instancemethod(_look_vector.LookVectorAutoDerivativeDouble__v_length, None, LookVectorAutoDerivativeDouble)
LookVectorAutoDerivativeDouble.__str__ = new_instancemethod(_look_vector.LookVectorAutoDerivativeDouble___str__, None, LookVectorAutoDerivativeDouble)
LookVectorAutoDerivativeDouble_swigregister = _look_vector.LookVectorAutoDerivativeDouble_swigregister
LookVectorAutoDerivativeDouble_swigregister(LookVectorAutoDerivativeDouble)

class ScLookVector(LookVectorDouble):
    """

    This is a look vector in an spacecraft coordinates.

    C++ includes: look_vector.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        GeoCal::ScLookVector::ScLookVector(const boost::math::quaternion< double > &V)
        Constructor using quaternion. 
        """
        _look_vector.ScLookVector_swiginit(self, _look_vector.new_ScLookVector(*args))

    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _look_vector.delete_ScLookVector
ScLookVector.__str__ = new_instancemethod(_look_vector.ScLookVector___str__, None, ScLookVector)
ScLookVector_swigregister = _look_vector.ScLookVector_swigregister
ScLookVector_swigregister(ScLookVector)

class ScLookVectorWithDerivative(LookVectorAutoDerivativeDouble):
    """

    This is a look vector in an spacecraft coordinates, including
    derivatives.

    C++ includes: look_vector.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        GeoCal::ScLookVectorWithDerivative::ScLookVectorWithDerivative(const ScLookVector &Slv)

        """
        _look_vector.ScLookVectorWithDerivative_swiginit(self, _look_vector.new_ScLookVectorWithDerivative(*args))

    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _look_vector.delete_ScLookVectorWithDerivative
ScLookVectorWithDerivative.__str__ = new_instancemethod(_look_vector.ScLookVectorWithDerivative___str__, None, ScLookVectorWithDerivative)
ScLookVectorWithDerivative_swigregister = _look_vector.ScLookVectorWithDerivative_swigregister
ScLookVectorWithDerivative_swigregister(ScLookVectorWithDerivative)

class CartesianInertialLookVector(LookVectorDouble):
    """

    This is a look vector in CartesianInertial coordinates.

    C++ includes: look_vector.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        GeoCal::CartesianInertialLookVector::CartesianInertialLookVector(const boost::math::quaternion< double > &V)
        Constructor using quaternion. 
        """
        _look_vector.CartesianInertialLookVector_swiginit(self, _look_vector.new_CartesianInertialLookVector(*args))

    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _look_vector.delete_CartesianInertialLookVector
CartesianInertialLookVector.__str__ = new_instancemethod(_look_vector.CartesianInertialLookVector___str__, None, CartesianInertialLookVector)
CartesianInertialLookVector_swigregister = _look_vector.CartesianInertialLookVector_swigregister
CartesianInertialLookVector_swigregister(CartesianInertialLookVector)

class CartesianInertialLookVectorWithDerivative(LookVectorAutoDerivativeDouble):
    """

    This is a look vector in CartesianInertial coordinates.

    C++ includes: look_vector.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        GeoCal::CartesianInertialLookVectorWithDerivative::CartesianInertialLookVectorWithDerivative(const boost::math::quaternion< AutoDerivative< double > > &V)
        Constructor using quaternion. 
        """
        _look_vector.CartesianInertialLookVectorWithDerivative_swiginit(self, _look_vector.new_CartesianInertialLookVectorWithDerivative(*args))

    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _look_vector.delete_CartesianInertialLookVectorWithDerivative
CartesianInertialLookVectorWithDerivative.__str__ = new_instancemethod(_look_vector.CartesianInertialLookVectorWithDerivative___str__, None, CartesianInertialLookVectorWithDerivative)
CartesianInertialLookVectorWithDerivative_swigregister = _look_vector.CartesianInertialLookVectorWithDerivative_swigregister
CartesianInertialLookVectorWithDerivative_swigregister(CartesianInertialLookVectorWithDerivative)

class DcsLookVector(LookVectorDouble):
    """

    This is a look vector in Detector Coordinate System coordinates.

    C++ includes: look_vector.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        GeoCal::DcsLookVector::DcsLookVector(const boost::math::quaternion< double > &V)
        Constructor. 
        """
        _look_vector.DcsLookVector_swiginit(self, _look_vector.new_DcsLookVector(*args))

    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _look_vector.delete_DcsLookVector
DcsLookVector.__str__ = new_instancemethod(_look_vector.DcsLookVector___str__, None, DcsLookVector)
DcsLookVector_swigregister = _look_vector.DcsLookVector_swigregister
DcsLookVector_swigregister(DcsLookVector)

class DcsLookVectorWithDerivative(LookVectorAutoDerivativeDouble):
    """

    This is a look vector in Detector Coordinate System coordinates,
    including derivatives.

    C++ includes: look_vector.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        GeoCal::DcsLookVectorWithDerivative::DcsLookVectorWithDerivative(const boost::math::quaternion< AutoDerivative< double > > &V)
        Constructor using quaternion. 
        """
        _look_vector.DcsLookVectorWithDerivative_swiginit(self, _look_vector.new_DcsLookVectorWithDerivative(*args))

    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _look_vector.delete_DcsLookVectorWithDerivative
DcsLookVectorWithDerivative.__str__ = new_instancemethod(_look_vector.DcsLookVectorWithDerivative___str__, None, DcsLookVectorWithDerivative)
DcsLookVectorWithDerivative_swigregister = _look_vector.DcsLookVectorWithDerivative_swigregister
DcsLookVectorWithDerivative_swigregister(DcsLookVectorWithDerivative)

class CartesianFixedLookVectorWithDerivative(LookVectorAutoDerivativeDouble):
    """

    This is a look vector in CartesianFixed coordinates.

    C++ includes: look_vector.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        GeoCal::CartesianFixedLookVectorWithDerivative::CartesianFixedLookVectorWithDerivative(const boost::math::quaternion< AutoDerivative< double > > &V)
        Constructor using quaternion. 
        """
        _look_vector.CartesianFixedLookVectorWithDerivative_swiginit(self, _look_vector.new_CartesianFixedLookVectorWithDerivative(*args))

    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _look_vector.delete_CartesianFixedLookVectorWithDerivative
CartesianFixedLookVectorWithDerivative.__str__ = new_instancemethod(_look_vector.CartesianFixedLookVectorWithDerivative___str__, None, CartesianFixedLookVectorWithDerivative)
CartesianFixedLookVectorWithDerivative_swigregister = _look_vector.CartesianFixedLookVectorWithDerivative_swigregister
CartesianFixedLookVectorWithDerivative_swigregister(CartesianFixedLookVectorWithDerivative)



