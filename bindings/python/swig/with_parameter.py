# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _with_parameter

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _with_parameter.SWIG_PyInstanceMethod_New
_swig_new_static_method = _with_parameter.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _with_parameter.delete_SwigPyIterator
    value = _swig_new_instance_method(_with_parameter.SwigPyIterator_value)
    incr = _swig_new_instance_method(_with_parameter.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_with_parameter.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_with_parameter.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_with_parameter.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_with_parameter.SwigPyIterator_copy)
    next = _swig_new_instance_method(_with_parameter.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_with_parameter.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_with_parameter.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_with_parameter.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_with_parameter.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_with_parameter.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_with_parameter.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_with_parameter.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_with_parameter.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_with_parameter.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _with_parameter:
_with_parameter.SwigPyIterator_swigregister(SwigPyIterator)
SWIG_MODULE_ALREADY_DONE = _with_parameter.SWIG_MODULE_ALREADY_DONE
SHARED_PTR_DISOWN = _with_parameter.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
class WithParameter(geocal_swig.generic_object.GenericObject):
    r"""

    It is common for a class to have some set of parameters that control
    behavior, which we may then fit with something like the SBA.

    It can also be useful for only a subset of those parameter to be
    active. This mixin class supplies this functionality.

    C++ includes: with_parameter.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _v_parameter = _swig_new_instance_method(_with_parameter.WithParameter__v_parameter)

    @property
    def parameter(self):
        return self._v_parameter()

    @parameter.setter
    def parameter(self, value):
      self._v_parameter(value)

    _v_parameter_with_derivative = _swig_new_instance_method(_with_parameter.WithParameter__v_parameter_with_derivative)

    @property
    def parameter_with_derivative(self):
        return self._v_parameter_with_derivative()

    @parameter_with_derivative.setter
    def parameter_with_derivative(self, value):
      self._v_parameter_with_derivative(value)

    _v_parameter_name = _swig_new_instance_method(_with_parameter.WithParameter__v_parameter_name)

    @property
    def parameter_name(self):
        return self._v_parameter_name()

    _v_parameter_subset = _swig_new_instance_method(_with_parameter.WithParameter__v_parameter_subset)

    @property
    def parameter_subset(self):
        return self._v_parameter_subset()

    @parameter_subset.setter
    def parameter_subset(self, value):
      self._v_parameter_subset(value)

    _v_parameter_with_derivative_subset = _swig_new_instance_method(_with_parameter.WithParameter__v_parameter_with_derivative_subset)

    @property
    def parameter_with_derivative_subset(self):
        return self._v_parameter_with_derivative_subset()

    @parameter_with_derivative_subset.setter
    def parameter_with_derivative_subset(self, value):
      self._v_parameter_with_derivative_subset(value)

    _v_parameter_name_subset = _swig_new_instance_method(_with_parameter.WithParameter__v_parameter_name_subset)

    @property
    def parameter_name_subset(self):
        return self._v_parameter_name_subset()

    _v_parameter_mask = _swig_new_instance_method(_with_parameter.WithParameter__v_parameter_mask)

    @property
    def parameter_mask(self):
        return self._v_parameter_mask()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    add_identity_gradient = _swig_new_instance_method(_with_parameter.WithParameter_add_identity_gradient)

    def __init__(self):
        if self.__class__ == WithParameter:
            _self = None
        else:
            _self = self
        _with_parameter.WithParameter_swiginit(self, _with_parameter.new_WithParameter(_self, ))
    __swig_destroy__ = _with_parameter.delete_WithParameter
    def __disown__(self):
        self.this.disown()
        _with_parameter.disown_WithParameter(self)
        return weakref.proxy(self)

# Register WithParameter in _with_parameter:
_with_parameter.WithParameter_swigregister(WithParameter)
class WithParameterNested(WithParameter):
    r"""

    It is common for a class WithParameter to be made up of subobjects an
    just string them together (e.g., a OrbitDataImageGroundConnection
    where the orbit and camera each have parameters).

    This handles this simple case.

    C++ includes: with_parameter.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""

        GeoCal::WithParameterNested::WithParameterNested()

        """
        _with_parameter.WithParameterNested_swiginit(self, _with_parameter.new_WithParameterNested())
    add_object = _swig_new_instance_method(_with_parameter.WithParameterNested_add_object)
    clear_object = _swig_new_instance_method(_with_parameter.WithParameterNested_clear_object)
    __swig_destroy__ = _with_parameter.delete_WithParameterNested

# Register WithParameterNested in _with_parameter:
_with_parameter.WithParameterNested_swigregister(WithParameterNested)
class WithParameterShare(WithParameter):
    r"""

    Another issues that arises (in particular when having IgcCollection
    across multiple orbits, e.g.

    camera calibration for EcostressIgcCollection) is to have multiple
    objects that should all have the same parameter set. This handles that
    case.

    C++ includes: with_parameter.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""

        GeoCal::WithParameterShare::WithParameterShare()

        """
        _with_parameter.WithParameterShare_swiginit(self, _with_parameter.new_WithParameterShare())
    add_object = _swig_new_instance_method(_with_parameter.WithParameterShare_add_object)
    clear_object = _swig_new_instance_method(_with_parameter.WithParameterShare_clear_object)
    _v_parameter_mask = _swig_new_instance_method(_with_parameter.WithParameterShare__v_parameter_mask)

    @property
    def parameter_mask(self):
        return self._v_parameter_mask()

    @parameter_mask.setter
    def parameter_mask(self, value):
      self._v_parameter_mask(value)

    __swig_destroy__ = _with_parameter.delete_WithParameterShare

# Register WithParameterShare in _with_parameter:
_with_parameter.WithParameterShare_swigregister(WithParameterShare)

__all__ = ["WithParameter","WithParameterNested","WithParameterShare"]


