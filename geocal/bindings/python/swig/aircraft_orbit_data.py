# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _aircraft_orbit_data.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_aircraft_orbit_data', [dirname(__file__)])
        except ImportError:
            import _aircraft_orbit_data
            return _aircraft_orbit_data
        if fp is not None:
            try:
                _mod = imp.load_module('_aircraft_orbit_data', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _aircraft_orbit_data = swig_import_helper()
    del swig_import_helper
else:
    import _aircraft_orbit_data
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _aircraft_orbit_data.SHARED_PTR_DISOWN
def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal.orbit
import geocal.generic_object
class AircraftOrbitData(geocal.orbit.QuaternionOrbitData):
    """
    This is a single navigation file record for aircraft data.

    This was originally written for data as reported by Applanix ephemeris
    and attitude, but it is likely to be useful for other INU untis.

    Note that we frequently don't have access to a direct measurement of
    the velocity. Rather than trying to do some clever estimate of the
    velocity, we just set it to 0. The velocity is only used for the
    abberation of light calculation, which isn't important for aircraft
    speeds. We can revisit this choice if needed, it wouldn't be too hard
    to use a couple of position measurements at nearby times to estimate
    the velocity.

    C++ includes: aircraft_orbit_data.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        AircraftOrbitData::AircraftOrbitData(const Time &Tm, const GroundCoordinate &Position, const Time &Tm2,
        const GroundCoordinate &Position2, double Roll, double Pitch, double
        Heading)
        Often with Aircraft data we don't have a direct measure of velocity.

        This calculates a simple velocity by taking a second position and a
        different time and assuming a constant velocity between the values. 
        """
        _aircraft_orbit_data.AircraftOrbitData_swiginit(self,_aircraft_orbit_data.new_AircraftOrbitData(*args))
    def _v_position_geodetic(self):
        """
        const Geodetic& GeoCal::AircraftOrbitData::position_geodetic() const
        Position of aircraft. 
        """
        return _aircraft_orbit_data.AircraftOrbitData__v_position_geodetic(self)

    @property
    def position_geodetic(self):
        return self._v_position_geodetic()

    def _v_roll(self):
        """
        double GeoCal::AircraftOrbitData::roll() const
        Roll, in degrees. 
        """
        return _aircraft_orbit_data.AircraftOrbitData__v_roll(self)

    @property
    def roll(self):
        return self._v_roll()

    def _v_pitch(self):
        """
        double GeoCal::AircraftOrbitData::pitch() const
        Pitch, in degrees. 
        """
        return _aircraft_orbit_data.AircraftOrbitData__v_pitch(self)

    @property
    def pitch(self):
        return self._v_pitch()

    def _v_heading(self):
        """
        double GeoCal::AircraftOrbitData::heading() const
        Heading, in degrees. 
        """
        return _aircraft_orbit_data.AircraftOrbitData__v_heading(self)

    @property
    def heading(self):
        return self._v_heading()

    @classmethod
    def pickle_format_version(cls):
      return 1

    def __reduce__(self):
      return _new_from_init, (self.__class__, 1, self.time,self.position_geodetic,self.velocity_cf,self.roll,self.pitch,self.heading)

    __swig_destroy__ = _aircraft_orbit_data.delete_AircraftOrbitData
AircraftOrbitData._v_position_geodetic = new_instancemethod(_aircraft_orbit_data.AircraftOrbitData__v_position_geodetic,None,AircraftOrbitData)
AircraftOrbitData._v_roll = new_instancemethod(_aircraft_orbit_data.AircraftOrbitData__v_roll,None,AircraftOrbitData)
AircraftOrbitData._v_pitch = new_instancemethod(_aircraft_orbit_data.AircraftOrbitData__v_pitch,None,AircraftOrbitData)
AircraftOrbitData._v_heading = new_instancemethod(_aircraft_orbit_data.AircraftOrbitData__v_heading,None,AircraftOrbitData)
AircraftOrbitData_swigregister = _aircraft_orbit_data.AircraftOrbitData_swigregister
AircraftOrbitData_swigregister(AircraftOrbitData)



