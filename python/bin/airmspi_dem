#! /usr/bin/env python
import geocal
import os
import logging
import time
import numpy as np
import subprocess

version = "October 15, 2013"
usage='''Usage:
  airmspi_dem [options] <image_1> <image_nadir> <image_2> <output_dir>
  airmspi_dem  -h | --help
  airmspi_dem  -v | --version

This generates a AirMSPI DEM. It takes a pair of images (in Level 2 HDF 
format), along with a nadir image. The results are placed in a given output
directory (which is created if it doesn't already exist).

Options:
  -h --help         
       Print this message

  --avg-level=d
       How much to average the 10 meter to for generating the DEM. For
       clear scenes you can just do this at full resolution, but for 
       clouds a value of "3" seems to work well in practice. This is the
       power of 2 to average the data by, so "3" is 2^3 = 8, meaning we
       generate 80m pixels. [default: 0]

  --data-field=s
       The data field to read [default: I]

  --data-scale=f
       The scale to apply to the data [default: 32767.0]

  --group-name=s
       The group name to read from the HDF file. [default: 555nm_band]

  --image1-index=d
       Index to use for the first image in DEM generation. This is in the
       same order the images are listed on the command line. [default: 0]

  --image2-index=d
       Index to use for the second image in DEM generation. This is in the
       same order the images are listed on the command line. [default: 2]

  --interpolation-method=s
       Interpolation method to use for filling in missing data. This should
       be one of nearest, linear, cubic. [default: linear]

  --max-distance-good-point=f
       How far apart the intersection of the rays from the conjugate points
       can be and we still call this is a good match. You will want to raise
       this number considerable if you are working with clouds, the example
       we've done showed 80.0 as a good number. [default: 2.0]

  --number-process=n
       Number of processors to use. [default: 1]

  --sba
       Run SBA to correct the co-registration of the data. If it is already
       registered correctly, this is likely to make things worse - so this
       is off by default.

  --use-dependency
       By default, we just run all steps. It can be useful, particularly 
       when debugging, to only run a step if the input is newer than the
       output (a la Makefile). Select this option of you want that behavior.

  --verbose
       Print more information as we run.

  -v --version      
       Print program version
'''

args = geocal.docopt_simple(usage, version=version)
if(args.verbose):
    logging.basicConfig(level = logging.INFO)
log = logging.getLogger("airmspi_dem")
tstart = time.time()

# Right now this is hardcoded. We have this called out, in case we want 
# to change this at some point.
img1_index = args.image1_index
img2_index = args.image2_index
average_factor = int(pow(2, args.avg_level))
dem_resolution = 10 * average_factor

# Get input files
img1_name = os.path.abspath(args.image_1)
img2_name = os.path.abspath(args.image_2)
imgnadir_name = os.path.abspath(args.image_nadir)

# Few things that appear often enough that it is worth stashing.
dbfile = "airmspi_dem.db:"
nproc = "--number-process=%d" % args.number_process

@contextmanager
def timing(txt):
    log.info(txt)
    tstart2 = time.time()
    yield
    log.info("Delta Time: %f" % (time.time() - tstart2))
    log.info("Total Time: %f" % (time.time() - tstart))

def track_dependency(outp, *inp):
    '''Return True if we need to rebuild outp'''
    if(args.use_dependency):
        for i in inp:
            if(not geocal.shelve_time_after(outp, i)):
                return True
        log.info("Skipping generation of %s, it is up to date" % outp)
        return False
    return True

# 1. Create the output directory, if it doesn't already exist.
subprocess.check_call(["mkdir", "-p", args.output_dir])
os.chdir(args.output_dir)

# 2. Create initial ImageGroundConnections. These are slow, because they
# are implemented in python
with timing("Initial ImageGroundConnections"):
    if track_dependency(dbfile + "igc1_slow", img1_name):
        subprocess.check_call(["shelve_airmspi_igc", 
                               "--data-field=%s" % args.data_field,
                               "--data-scale=%f" % float(args.data_scale),
                               "--group-name=%s" % args.group_name,
                               img1_name, "Image 1", dbfile + "igc1_slow"])
    if track_dependency(dbfile + "igc2_slow", img2_name):
        subprocess.check_call(["shelve_airmspi_igc", 
                               "--data-field=%s" % args.data_field,
                               "--data-scale=%f" % float(args.data_scale),
                               "--group-name=%s" % args.group_name,
                               img2_name, "Image 2", dbfile + "igc2_slow"])
    if track_dependency(dbfile + "igc_nadir_slow", imgnadir_name):
        subprocess.check_call(["shelve_airmspi_igc", 
                               "--data-field=%s" % args.data_field,
                               "--data-scale=%f" % float(args.data_scale),
                               "--group-name=%s" % args.group_name,
                               imgnadir_name, 
                               "Nadir Image", dbfile + "igc_nadir_slow"])

# 3. Create RPC approximations
with timing("RPC approximations"):
    if track_dependency(dbfile + "igc1", dbfile + "igc1_slow"):
        subprocess.check_call(["igc_to_rpc", "--rpc-line-fit=0", 
                               "--rpc-sample-fit=0",
                               dbfile + "igc1_slow", dbfile + "igc1"])
    if track_dependency(dbfile + "igc2", dbfile + "igc2_slow"):
        subprocess.check_call(["igc_to_rpc", "--rpc-line-fit=0", 
                               "--rpc-sample-fit=0",
                           dbfile + "igc2_slow", dbfile + "igc2"])
    if track_dependency(dbfile + "igc_nadir", dbfile + "igc_nadir_slow"):
        subprocess.check_call(["igc_to_rpc", 
                               dbfile + "igc_nadir_slow", dbfile + "igc_nadir"])

# 4. Put into IgcCollection
with timing("IgcCollection"):
    if track_dependency(dbfile + "igc_initial", dbfile + "igc1",
                        dbfile + "igc2", dbfile + "igc_nadir"):
        subprocess.check_call(["shelve_igccol", "--from-shelve",
                               dbfile + "igc_initial", 
                               dbfile + "igc1", dbfile + "igc_nadir",
                               dbfile + "igc2"])

# 5. Collect tiepoints
if(args.sba):
    with timing("Collect tiepoints"):
        if track_dependency(dbfile + "tpcol", dbfile + "igc_initial"):
            cmd = ["tp_collect", "--max-ground-sigma=300",
                   dbfile + "igc_initial", dbfile + "tpcol"]
            if(args.avg_level > 0):
                cmd.append("--avg-level=%d" % args.avg_level)
            subprocess.check_call(cmd)

# 6. Run SBA
# Note really big DEM sigma. We don't actually have functionality in place
# to skip the surface constraint, but the essientially reduces the weight of
# it to almost 0
if(args.sba):
    with timing("SBA"):
        cmd = ["sba","--dem-sigma=10000", dbfile + "igc_initial", dbfile + "tpcol",
               dbfile + "igc_sba", dbfile + "tpcol_sba"]
        if(args.verbose):
            cmd.append("--verbose")
        if track_dependency(dbfile + "igc_sba", dbfile + "tpcol",
                            dbfile + "igc_initial"):
            subprocess.check_call(cmd)
        igc_to_use = dbfile + "igc_sba"
else:
    igc_to_use = dbfile + "igc_initial"

# 7. Project to surface. Note parallel writing doesn't work here, there
# is a bug we haven't tracked down yet in using HDF/GDAL files as input
# for parallel runs.
with timing("Project to surface"):
    if track_dependency(dbfile + "surface_1", igc_to_use):
        subprocess.check_call(["igc_project", "--grid-spacing=10",
                               "--resolution=10", igc_to_use,
                               str(img1_index), dbfile + "surface_1_init"])
        subprocess.check_call(["write_image", dbfile + "surface_1_init",
                              "img1_surf.img"])
        subprocess.check_call(["shelve_image", "img1_surf.img", 
                               dbfile + "surface_1"])
    if track_dependency(dbfile + "surface_2", dbfile + "surface_1",
                        igc_to_use):
        subprocess.check_call(["igc_project", "--grid-spacing=10",
                               "--map-info=" + dbfile + "surface_1", 
                               igc_to_use,
                               str(img2_index), dbfile + "surface_2_init"])
        subprocess.check_call(["write_image", dbfile + "surface_2_init",
                              "img2_surf.img"])
        subprocess.check_call(["shelve_image", "img2_surf.img", 
                               dbfile + "surface_2"])

# 8. Generate DEM
with timing("Generate DEM"):
    if track_dependency(dbfile + "dem", igc_to_use, 
                        dbfile + "surface_1",
                        dbfile + "surface_2"):
        cmd = ["dem_generate", "--resolution=%f" % dem_resolution,
               "--max-distance-good-point=%f" % args.max_distance_good_point,
               "--interpolation-method=%s" % args.interpolation_method,
               "--airmspi-image-match",
               igc_to_use, dbfile + "surface_1",
               dbfile + "surface_2", str(img1_index), str(img2_index),
               dbfile + "dem_init"]
        if(average_factor > 1):
            cmd.append("--average=%d" % average_factor)
        subprocess.check_call(cmd)
        cmd = ["write_image", "--vicar-type=DOUB", "--no-data-value=-9999",
               nproc, dbfile + "dem_init",
               "dem_generated_%dm_nofill.img" % dem_resolution,
               "dem_generated_%dm.img" % dem_resolution]
        if(args.verbose):
            cmd.append("--verbose")
        subprocess.check_call(cmd)
        subprocess.check_call(["shelve_dem", 
                               "--outside-dem-not-error",
                               "dem_generated_%dm.img" % dem_resolution,
                               dbfile + "dem"])
# 9. Convert to tiff
subprocess.check_call(["gdal_translate", "-q",
                       "dem_generated_%dm.img" % dem_resolution,
                       "dem_generated_%dm.tif" % dem_resolution])
subprocess.check_call(["gdal_translate", "-q",
                       "dem_generated_%dm_nofill.img" % dem_resolution,
                       "dem_generated_%dm_nofill.tif" % dem_resolution])



# 10. Generate initial and final image data for display
# Create mask
f = geocal.VicarLiteRasterImage("dem_generated_%dm.img" % dem_resolution)
fv = int(float(f.file.label_string("NODATA")))
gmask = geocal.GroundMaskImage(f, fv, True)
geocal.write_shelve(dbfile + "dem_mask", gmask)
gmask = None
f = None
# Determine map info that covers everything
d = geocal.mmap_file("dem_generated_%dm_nofill.img" % dem_resolution)
h = np.median(d[d > -9999])
dm = geocal.SimpleDem(float(h))
mi = cib01_mapinfo(desired_resolution = 10.0)
igc = geocal.read_shelve(igc_to_use)
igc_initial = geocal.read_shelve(dbfile + "igc_initial")
igc0 = igc.image_ground_connection(0)
igc0.dem = dm
mi = igc0.cover(mi)
for i in range(3):
    mi = mi.map_union(igc_initial.image_ground_connection(i).cover(mi))
    igct = igc.image_ground_connection(i)
    igct.dem = dm
    mi = mi.map_union(igct.cover(mi))
geocal.write_shelve(dbfile + "final_map_info", mi)
with timing("Final projection 1"):
    subprocess.check_call(["igc_project", 
                           "--map-info=" + dbfile + "final_map_info", 
                           "--dem=" + dbfile + "dem",
                           "--ground-mask=" + dbfile + "dem_mask",
                           igc_to_use,
                           "0", dbfile + "surface_1_dem_init"])
    subprocess.check_call(["write_image", dbfile + "surface_1_dem_init",
                           "img1_dem.img"])
    subprocess.check_call(["shelve_image", "img1_dem.img", 
                           dbfile + "surface_1_dem"])
with timing("Final projection 2"):
    subprocess.check_call(["igc_project", 
                           "--map-info=" + dbfile + "final_map_info", 
                           "--dem=" + dbfile + "dem",
                           "--ground-mask=" + dbfile + "dem_mask",
                           igc_to_use,
                           "1", dbfile + "surface_n_dem"])
    subprocess.check_call(["write_image", dbfile + "surface_n_dem",
                           "imgnadir_dem.img"])
with timing("Final projection 3"):
    subprocess.check_call(["igc_project", 
                           "--map-info=" + dbfile + "final_map_info", 
                           "--dem=" + dbfile + "dem",
                           "--ground-mask=" + dbfile + "dem_mask",
                           igc_to_use,
                           "2", dbfile + "surface_2_dem"])
    subprocess.check_call(["write_image", dbfile + "surface_2_dem",
                           "img2_dem.img"])
with timing("Initial projection 1"):
    subprocess.check_call(["igc_project", 
                           "--map-info=" + dbfile + "final_map_info", 
                           dbfile + "igc_initial",
                           "0", dbfile + "surface_1_initial"])
    subprocess.check_call(["write_image", dbfile + "surface_1_initial",
                           "img1_initial.img"])
with timing("Initial projection 2"):
    subprocess.check_call(["igc_project", 
                           "--map-info=" + dbfile + "final_map_info", 
                           dbfile + "igc_initial",
                           "1", dbfile + "surface_n_initial"])
    subprocess.check_call(["write_image", dbfile + "surface_n_initial",
                           "imgnadir_initial.img"])
with timing("Initial projection 3"):
    subprocess.check_call(["igc_project", 
                           "--map-info=" + dbfile + "final_map_info", 
                           dbfile + "igc_initial",
                           "2", dbfile + "surface_2_initial"])
    subprocess.check_call(["write_image", dbfile + "surface_2_initial",
                           "img2_initial.img"])
