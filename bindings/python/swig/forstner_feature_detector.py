# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _forstner_feature_detector.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_forstner_feature_detector', [dirname(__file__)])
        except ImportError:
            import _forstner_feature_detector
            return _forstner_feature_detector
        if fp is not None:
            try:
                _mod = imp.load_module('_forstner_feature_detector', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _forstner_feature_detector = swig_import_helper()
    del swig_import_helper
else:
    import _forstner_feature_detector
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _forstner_feature_detector.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_forstner_feature_detector.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_forstner_feature_detector.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_forstner_feature_detector.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_forstner_feature_detector.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_forstner_feature_detector.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_forstner_feature_detector.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_forstner_feature_detector.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_forstner_feature_detector.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_forstner_feature_detector.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_forstner_feature_detector.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_forstner_feature_detector.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_forstner_feature_detector.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_forstner_feature_detector.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_forstner_feature_detector.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_forstner_feature_detector.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_forstner_feature_detector.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _forstner_feature_detector.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_forstner_feature_detector.SHARED_PTR_DISOWN_swigconstant(_forstner_feature_detector)
SHARED_PTR_DISOWN = _forstner_feature_detector.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.feature_detector
import geocal_swig.generic_object
class ForstnerFeatureDetector(geocal_swig.feature_detector.FeatureDetector):
    """

    This class detects interest points in an image using Forstner feature
    detection.

    C++ includes: forstner_feature_detector.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Basic_ip_large_number=1000, Maximum_weight_threshold=10000, Forstner_max_window_large_size=9, Forstner_max_window_small_size=7, Forstner_window_size=3, Roundness_threshold=0.2, Weight_threshold=1.0, Basic_robert_threshold=1.2):
        """

        BZ_END_STENCIL ForstnerFeatureDetector::ForstnerFeatureDetector(int Basic_ip_large_number=1000, int Maximum_weight_threshold=10000,
        int Forstner_max_window_large_size=9, int
        Forstner_max_window_small_size=7, int Forstner_window_size=3, double
        Roundness_threshold=0.2, double Weight_threshold=1.0, double
        Basic_robert_threshold=1.2)
        Constructor. 
        """
        _forstner_feature_detector.ForstnerFeatureDetector_swiginit(self, _forstner_feature_detector.new_ForstnerFeatureDetector(Basic_ip_large_number, Maximum_weight_threshold, Forstner_max_window_large_size, Forstner_max_window_small_size, Forstner_window_size, Roundness_threshold, Weight_threshold, Basic_robert_threshold))

    def _v_basic_ip_large_number(self):
        """

        int GeoCal::ForstnerFeatureDetector::basic_ip_large_number() const

        """
        return _forstner_feature_detector.ForstnerFeatureDetector__v_basic_ip_large_number(self)


    @property
    def basic_ip_large_number(self):
        return self._v_basic_ip_large_number()


    def _v_maximum_weight_threshold(self):
        """

        int GeoCal::ForstnerFeatureDetector::maximum_weight_threshold() const

        """
        return _forstner_feature_detector.ForstnerFeatureDetector__v_maximum_weight_threshold(self)


    @property
    def maximum_weight_threshold(self):
        return self._v_maximum_weight_threshold()


    def _v_forstner_max_window_large_size(self):
        """

        int GeoCal::ForstnerFeatureDetector::forstner_max_window_large_size() const

        """
        return _forstner_feature_detector.ForstnerFeatureDetector__v_forstner_max_window_large_size(self)


    @property
    def forstner_max_window_large_size(self):
        return self._v_forstner_max_window_large_size()


    def _v_forstner_max_window_small_size(self):
        """

        int GeoCal::ForstnerFeatureDetector::forstner_max_window_small_size() const

        """
        return _forstner_feature_detector.ForstnerFeatureDetector__v_forstner_max_window_small_size(self)


    @property
    def forstner_max_window_small_size(self):
        return self._v_forstner_max_window_small_size()


    def _v_forstner_window_size(self):
        """

        int GeoCal::ForstnerFeatureDetector::forstner_window_size() const

        """
        return _forstner_feature_detector.ForstnerFeatureDetector__v_forstner_window_size(self)


    @property
    def forstner_window_size(self):
        return self._v_forstner_window_size()


    def _v_roundness_threshold(self):
        """

        double GeoCal::ForstnerFeatureDetector::roundness_threshold() const

        """
        return _forstner_feature_detector.ForstnerFeatureDetector__v_roundness_threshold(self)


    @property
    def roundness_threshold(self):
        return self._v_roundness_threshold()


    def _v_weight_threshold(self):
        """

        double GeoCal::ForstnerFeatureDetector::weight_threshold() const

        """
        return _forstner_feature_detector.ForstnerFeatureDetector__v_weight_threshold(self)


    @property
    def weight_threshold(self):
        return self._v_weight_threshold()


    def _v_basic_robert_threshold(self):
        """

        double GeoCal::ForstnerFeatureDetector::basic_robert_threshold() const

        """
        return _forstner_feature_detector.ForstnerFeatureDetector__v_basic_robert_threshold(self)


    @property
    def basic_robert_threshold(self):
        return self._v_basic_robert_threshold()


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _forstner_feature_detector.delete_ForstnerFeatureDetector
ForstnerFeatureDetector._v_basic_ip_large_number = new_instancemethod(_forstner_feature_detector.ForstnerFeatureDetector__v_basic_ip_large_number, None, ForstnerFeatureDetector)
ForstnerFeatureDetector._v_maximum_weight_threshold = new_instancemethod(_forstner_feature_detector.ForstnerFeatureDetector__v_maximum_weight_threshold, None, ForstnerFeatureDetector)
ForstnerFeatureDetector._v_forstner_max_window_large_size = new_instancemethod(_forstner_feature_detector.ForstnerFeatureDetector__v_forstner_max_window_large_size, None, ForstnerFeatureDetector)
ForstnerFeatureDetector._v_forstner_max_window_small_size = new_instancemethod(_forstner_feature_detector.ForstnerFeatureDetector__v_forstner_max_window_small_size, None, ForstnerFeatureDetector)
ForstnerFeatureDetector._v_forstner_window_size = new_instancemethod(_forstner_feature_detector.ForstnerFeatureDetector__v_forstner_window_size, None, ForstnerFeatureDetector)
ForstnerFeatureDetector._v_roundness_threshold = new_instancemethod(_forstner_feature_detector.ForstnerFeatureDetector__v_roundness_threshold, None, ForstnerFeatureDetector)
ForstnerFeatureDetector._v_weight_threshold = new_instancemethod(_forstner_feature_detector.ForstnerFeatureDetector__v_weight_threshold, None, ForstnerFeatureDetector)
ForstnerFeatureDetector._v_basic_robert_threshold = new_instancemethod(_forstner_feature_detector.ForstnerFeatureDetector__v_basic_robert_threshold, None, ForstnerFeatureDetector)
ForstnerFeatureDetector_swigregister = _forstner_feature_detector.ForstnerFeatureDetector_swigregister
ForstnerFeatureDetector_swigregister(ForstnerFeatureDetector)


__all__ = ["ForstnerFeatureDetector"]



