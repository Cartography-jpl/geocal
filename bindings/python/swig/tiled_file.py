# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _tiled_file.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tiled_file', [dirname(__file__)])
        except ImportError:
            import _tiled_file
            return _tiled_file
        if fp is not None:
            try:
                _mod = imp.load_module('_tiled_file', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tiled_file = swig_import_helper()
    del swig_import_helper
else:
    import _tiled_file
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tiled_file.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_tiled_file.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_tiled_file.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_tiled_file.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_tiled_file.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_tiled_file.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_tiled_file.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_tiled_file.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_tiled_file.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_tiled_file.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_tiled_file.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_tiled_file.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_tiled_file.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_tiled_file.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_tiled_file.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_tiled_file.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_tiled_file.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _tiled_file.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_tiled_file.SHARED_PTR_DISOWN_swigconstant(_tiled_file)
SHARED_PTR_DISOWN = _tiled_file.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

class TiledFileBase_2(object):
    """

    This class is the base class of TiledFile<T, D>.

    It turns out to be useful to factor out the part of TiledFile that
    doesn't depend on the type T. For most purposes though, you can ignore
    this class and use TiledFile<T, D> directly.

    For use with some classes, it is useful to be able to change a generic
    type T to some common type. For instance, RasterImage converts the
    types to and from int, and Dem converts to double. We supply
    conversion routines in this base class for a few common types, as
    get_int, put_double, read_int etc.

    C++ includes: tiled_file.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def _v_number_swap(self):
        """

        unsigned int GeoCal::TiledFileBase< D >::number_swap() const
        Number of times we have swapped a tile since reset_number_swap called.

        """
        return _tiled_file.TiledFileBase_2__v_number_swap(self)


    @property
    def number_swap(self):
        return self._v_number_swap()


    def reset_number_swap(self):
        """

        void GeoCal::TiledFileBase< D >::reset_number_swap()
        Reset number of swap counter to 0. 
        """
        return _tiled_file.TiledFileBase_2_reset_number_swap(self)


    def _v_size(self):
        """

        const boost::array<index, D>& GeoCal::TiledFileBase< D >::size() const
        File size. 
        """
        return _tiled_file.TiledFileBase_2__v_size(self)


    @property
    def size(self):
        return self._v_size()


    def _v_tile_size(self):
        """

        const boost::array<index, D>& GeoCal::TiledFileBase< D >::tile_size() const
        Tile size. 
        """
        return _tiled_file.TiledFileBase_2__v_tile_size(self)


    @property
    def tile_size(self):
        return self._v_tile_size()


    def get_int(self, Index):
        """

        virtual int GeoCal::TiledFileBase< D >::get_int(const boost::array< index, D > &Index) const =0
        Get data an convert to integer. 
        """
        return _tiled_file.TiledFileBase_2_get_int(self, Index)


    def get_double(self, Index):
        """

        virtual double GeoCal::TiledFileBase< D >::get_double(const boost::array< index, D > &Index) const =0
        Get data an convert to double. 
        """
        return _tiled_file.TiledFileBase_2_get_double(self, Index)


    def read_int(self, Min_index, Max_index, Res):
        """

        virtual void GeoCal::TiledFileBase< D >::read_int(const boost::array< index, D > &Min_index, const boost::array< index,
        D > &Max_index, int *Res) const =0
        Read a subset of the data, and convert to int. 
        """
        return _tiled_file.TiledFileBase_2_read_int(self, Min_index, Max_index, Res)


    def read_double(self, Min_index, Max_index, Res):
        """

        virtual void GeoCal::TiledFileBase< D >::read_double(const boost::array< index, D > &Min_index, const boost::array< index,
        D > &Max_index, double *Res) const =0
        Read a subset of the data, and convert to double. 
        """
        return _tiled_file.TiledFileBase_2_read_double(self, Min_index, Max_index, Res)


    def write_int(self, Index, Val):
        """

        virtual void GeoCal::TiledFileBase< D >::write_int(const boost::array< index, D > &Index, int Val)=0
        Convert an int to type T, and write to file. 
        """
        return _tiled_file.TiledFileBase_2_write_int(self, Index, Val)


    def write_double(self, Index, Val):
        """

        virtual void GeoCal::TiledFileBase< D >::write_double(const boost::array< index, D > &Index, double Val)=0
        Convert a double to type T, and write to file. 
        """
        return _tiled_file.TiledFileBase_2_write_double(self, Index, Val)

    __swig_destroy__ = _tiled_file.delete_TiledFileBase_2
TiledFileBase_2._v_number_swap = new_instancemethod(_tiled_file.TiledFileBase_2__v_number_swap, None, TiledFileBase_2)
TiledFileBase_2.reset_number_swap = new_instancemethod(_tiled_file.TiledFileBase_2_reset_number_swap, None, TiledFileBase_2)
TiledFileBase_2._v_size = new_instancemethod(_tiled_file.TiledFileBase_2__v_size, None, TiledFileBase_2)
TiledFileBase_2._v_tile_size = new_instancemethod(_tiled_file.TiledFileBase_2__v_tile_size, None, TiledFileBase_2)
TiledFileBase_2.get_int = new_instancemethod(_tiled_file.TiledFileBase_2_get_int, None, TiledFileBase_2)
TiledFileBase_2.get_double = new_instancemethod(_tiled_file.TiledFileBase_2_get_double, None, TiledFileBase_2)
TiledFileBase_2.read_int = new_instancemethod(_tiled_file.TiledFileBase_2_read_int, None, TiledFileBase_2)
TiledFileBase_2.read_double = new_instancemethod(_tiled_file.TiledFileBase_2_read_double, None, TiledFileBase_2)
TiledFileBase_2.write_int = new_instancemethod(_tiled_file.TiledFileBase_2_write_int, None, TiledFileBase_2)
TiledFileBase_2.write_double = new_instancemethod(_tiled_file.TiledFileBase_2_write_double, None, TiledFileBase_2)
TiledFileBase_2_swigregister = _tiled_file.TiledFileBase_2_swigregister
TiledFileBase_2_swigregister(TiledFileBase_2)



