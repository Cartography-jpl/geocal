#! /usr/bin/env python
#
# This takes a unprojected PDS or ISIS file, imports it to VICAR, and adds a
# RSM or GLAS/GFM model

import geocal
import os
import subprocess
import shutil
import tempfile

version = "June 26, 2022"
usage='''Usage:
  pomm_generate_model [options] <pds_or_isis_image> <output_base_name>
  pomm_generate_model [options] <pds_or_isis_image> <pds_image_2> <output_base_name>
  pomm_generate_model -h | --help
  pomm_generate_model -v | --version

pomm_generate_model takes an unprojected PDS or ISIS image, imports it to
VICAR, and adds a RSM or GLAS/GFM.

A PDS image can be passed to the program, or an already process ISIS image.
The ISIS cube image can be useful if you want more control on how the data
is processed (e.g., using various options in ISIS). If you pass an ISIS
cube, the kernels should already be listed in the file (e.g., spiceinit
should be run on it). For PDS images, we just to a direct import to ISIS
followed by running spiceinit with the --web option but otherwise using
the spiceinit defaults.

The HiRISE instrument has 14 different CCDs, and each comes as 2 "channels"
which is the left and right portion of the CCD image. You should supply
both channels for a CCD image.

Some datasets have multiple bands (e.g., LRO WAC color images). You can
specify the band to use.

We do not do any radiance correction (e.g., dark current subtraction),
we just pass through the DNs unchanged. However, for CTX camera the
data is at level 0 is normally SQRT encoded. We do expand that out to 
unencoded data.

Currently the specific forms of the RSM are hard coded based on the 
instrument type.

Example:
    pomm_generate_model /raid26/tllogan/mars/mawrth_vallis/source/unmapped/P16_007388_2049_XI_24N020W.IMG ctx1
    rsm_project --grid-spacing=10 --map-info=ctx1_ref_img.xml --number-process=20 --verbose --process-number-line=1000 --process-number-sample=1000 ctx1.img ctx1_proj.img

Options:
  -h --help         
       Print this message

  --band=d
     Some datasets have multiple bands (e.g., LRO WAC color images). You can
     specify the band to use.

  --full-igc=f
       For diagnostic purposes, it can be useful to have the full IGC (i.e.,
       the one with the camera model, spice kernel, etc.). This is what we
       are approximating with the RSM and/or GLAS/GFM model.

  --rsm
       Create RSM instead of a GLAS/GFM model.

  --min-height=d
       Minimum DEM height we create RSM for. Note this doesn't need to be
       super accurate, just a reasonable value that is lower than any height
       we will encounter over the area. Not needed for
       GLAS/GFM. [default: -5000.0]

  --max-height=d
       Maximum DEM height we create RSM for. Note this doesn't need to be
       super accurate, just a reasonable value that is lower than any height
       we will encounter over the area. Not needed for GLAS/GFM
       [default: -1500.0]

  --plot-cross-section=f
       To evaluate the quality of the generated RSM, this takes a cross 
       section for all lines, and 5 equally spaced samples and plots the 
       difference between the calculated line and sample vs. what the
       full ImageGroundConnection calculation creates. Output is a PDF
       file.

  --radiance-scale=d
       Scale to apply to raw data when importing it.

  --subset=f
       Subset the image. This should be the start line, start sample, number
       line and number sample.
 
  -v --version      
       Print program version
'''
long_name_to_vicar = { "pds_or_isis_image" : "pdsimg",
                       "pds_image_2" : "pdsimg2",
                       "output_base_name" : "outbase",
                       "full_igc" : "fulligc",
                       "rsm": "rsm",
                       "band" : "band",
                       "min_height" : "minh",
                       "max_height" : "maxh",
                       "subset" : "subset",
                       "plot_cross_section" : "plot",
                       }

args = geocal.docopt_simple(usage, version=version,
                     long_name_to_vicar=long_name_to_vicar)

keywords = {}
subset = None
if args.subset:
    if(args.subset == -999):
        subset = None
    elif(isinstance(args.subset, tuple)):
        subset = args.subset
    else:        
        subset = eval(args.subset)
    keywords['subset'] = subset
band=None        
if(args.band and args.band >= 0):
    band = args.band
    keywords['band'] = band
if(args.full_igc):
    keywords['igc_out_fname'] = args.full_igc
if(args.radiance_scale):
    keywords['rad_scale'] = args.radiance_scale
    
geocal.pds_to_isis(args.pds_or_isis_image, f"{args.output_base_name}.cub",
                   pds_fname2 = args.pds_image_2)

if(args.rsm): 
    igc, rsm = geocal.isis_to_igc(f"{args.output_base_name}.cub", rsm=True,
                       min_height=args.min_height, max_height=args.max_height,
                       **keywords)
else:
    rsm = None
    igc = geocal.isis_to_igc(f"{args.output_base_name}.cub", glas_gfm=True,
                             **keywords)
    
f = geocal.VicarRasterImage(f"{args.output_base_name}.img", "HALF",
                            igc.number_line, igc.number_sample)
geocal.copy_raster(igc.image, f, True, -1, igc.number_sample)
if(rsm):
    # There are a number of size constraints here. Major pain, for
    # now skip trying to cram RSM into NITF
    #f.set_rsm(r, geocal.VicarFile.RSM_XML_FILE)
    f.set_rsm(rsm, geocal.VicarFile.RSM_XML_FILE)
else:
    f.set_igc_glas_gfm(igc)
f.close()
    
if(args.plot_cross_section):
    geocal.rsm_plot_diff(rsm, igc, args.plot_cross_section,
                         min_height=args.min_height, max_height=args.max_height)
    
