#! /usr/bin/env python

from geocal import *
from functools import partial
import subprocess
import os

version = "September 17, 2013"
usage='''Usage: 
  dem_generate [options] <igc_collection> <index_image1> 
        <index_image2> <output>
  dem_generate [options] <igc_collection> <surface_image1>
        <surface_image2> <index_image1> <index_image2> <output>
  dem_generate -h | --help
  dem_generate -v | --version

This generates a DSM from a pair of images. The output should be in the
normal "file:key" format. We generate a RasterImageMultiBand, the first band
is the DSM without any interpolation, the second band in the DSM with holes
filled in by interpolation.

The IGC collection should be specified as a "file:key" pair, and you need
to select a pair of 0-based image index to work on (e.g., 0 and 1 for the
first and second image in the collection).  You can optionally supply
a surface projected version of the images, which should have been performed
using the same IGC collection (e.g., you can run the program igc_project).
This often give better DEM coverage than directly matching the unprojected
images.

Options:
  -h --help         
       Print this message

  --airmspi-image-match
       If true, use an image matcher values more tuned for AirMSPI. This
       relaxes some of the constraints in the Least squares matcher.

  --average=d
       If this option is given, then average the ImageGroundConnections 
       images by the given factor before generating a DEM. This is useful
       for doing things like AirMPSI cloud DEM generation. Note that you 
       should make sure the resolution of the DEM makes sense with the given
       average factor. If you supply surface data, then this is also averaged
       by the same value (i.e., we assume the surface image is at full
       resolution).
     
  --boundary=d
       Number of pixels to add as a boundary when calculating the output
       image coverage. Useful to make sure we completely cover an 
       image. [default: 5]

  --buffer=d
       The buffer to use between tiles, so we have enough data to interpolate
       at the edge of a tile. [default: 5]

  --image-matcher=f
       Use the supplied image matcher.

  --interpolation-method=s
       Interpolation method to use for filling in missing data. This should
       be one of nearest, linear, cubic. [default: linear]

  --map-info=f
       Rather than generating a DEM to cover the full area, match exactly
       the supplied shelve image. This is useful to when comparing against
       an existing image/DEM.

  --map-info-cover=f
       Like --map-info, but adjust the area to cover the output data, i.e.,
       use the same projection but not the bounding box of the given 
       image/DEM

   --max-distance-good-point=f
       How far apart the intersection of the rays from the conjugate points
       can be and we still call this is a good match. [default: 0.5]

  --resolution=r
       Resolution in meters of output. [default: 1.0]

  -v --version      
       Print program version
'''
args = docopt_simple(usage, version=version)

igc_col = read_shelve(args.igc_collection)
igc1 = igc_col.image_ground_connection(args.index_image1)
igc2 = igc_col.image_ground_connection(args.index_image2)

# Determine the coverage of the DEM.

if(args.map_info):
    m = read_shelve(args.map_info)
    if(isinstance(m, MapInfo)):
        midem = m
    else:
        midem = m.map_info
elif(args.map_info_cover):
    m = read_shelve(args.map_info_cover)
    if(isinstance(m, MapInfo)):
        midem = m
    else:
        midem = m.map_info
    midem = igc1.cover(midem, args.boundary)
    midem = midem.intersection(igc2.cover(midem, args.boundary))
else:
    mibase = cib01_mapinfo()
    resbase = mibase.resolution_meter
    miscale = mibase.scale(args.resolution / resbase,
                           args.resolution / resbase)
    midem = igc1.cover(miscale, args.boundary)
    midem = midem.intersection(igc2.cover(midem, args.boundary))

# Set up to read surface data, if we have it.
surface_image1 = None
surface_image2 = None
if(args.surface_image1):
    surface_image1 = read_shelve(args.surface_image1)
    surface_image2 = read_shelve(args.surface_image2)

# Average data id requested
if(args.average):
    igc1 = AveragedImageGroundConnection(igc1, args.average, args.average, True)
    igc2 = AveragedImageGroundConnection(igc2, args.average, args.average, True)
    if(surface_image1 is not None):
        surface_image1 = RasterAveraged(surface_image1, args.average, 
                                        args.average)
    if(surface_image2 is not None):
        surface_image2 = RasterAveraged(surface_image2, args.average, 
                                        args.average)

# Set up image matcher
if(args.image_matcher):
    im = read_shelve(args.image_matcher)
elif(args.airmspi_image_match):
    im = CcorrLsmMatcher(CcorrMatcher(), LsmMatcher(11, 11, 5, 0.3, 0.5, 2.0))
else:
    im = CcorrLsmMatcher()

# Create the DEM object and save.
dem = DemGenerateMB(igc1, igc2, midem, 
                    image_matcher = im,
                    interpolate_method = args.interpolation_method,
                    buffer_size = args.buffer,
                    surface_image1 = surface_image1,
                    surface_image2 = surface_image2,
                    max_dist_good_point = args.max_distance_good_point)
write_shelve(args.output, dem)
