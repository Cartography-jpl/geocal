# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _image_ground_connection

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _image_ground_connection.SWIG_PyInstanceMethod_New
_swig_new_static_method = _image_ground_connection.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _image_ground_connection.delete_SwigPyIterator
    value = _swig_new_instance_method(_image_ground_connection.SwigPyIterator_value)
    incr = _swig_new_instance_method(_image_ground_connection.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_image_ground_connection.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_image_ground_connection.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_image_ground_connection.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_image_ground_connection.SwigPyIterator_copy)
    next = _swig_new_instance_method(_image_ground_connection.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_image_ground_connection.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_image_ground_connection.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_image_ground_connection.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_image_ground_connection.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_image_ground_connection.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_image_ground_connection.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_image_ground_connection.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_image_ground_connection.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_image_ground_connection.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _image_ground_connection:
_image_ground_connection.SwigPyIterator_swigregister(SwigPyIterator)
SWIG_MODULE_ALREADY_DONE = _image_ground_connection.SWIG_MODULE_ALREADY_DONE
SHARED_PTR_DISOWN = _image_ground_connection.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class ImageGroundConnectionFailed(geocal_swig.geocal_exception.Exception):
    r"""

    Exception thrown if ImageGroundConnection fails to calculate a image
    coordinate.

    C++ includes: image_ground_connection.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, W):
        r"""

        GeoCal::ImageGroundConnectionFailed::ImageGroundConnectionFailed(const std::string &W="ImageGroundConnectionFailed")
        GeoCal::ImageGroundConnectionFailed::ImageGroundConnectionFailed
        Default constructor.
        Can give an optional string describing the error. 
        """
        _image_ground_connection.ImageGroundConnectionFailed_swiginit(self, _image_ground_connection.new_ImageGroundConnectionFailed(W))
    __swig_destroy__ = _image_ground_connection.delete_ImageGroundConnectionFailed

# Register ImageGroundConnectionFailed in _image_ground_connection:
_image_ground_connection.ImageGroundConnectionFailed_swigregister(ImageGroundConnectionFailed)
class ImageGroundConnection(geocal_swig.with_parameter.WithParameter):
    r"""

    Depending on the the data we are using, we may connect a location in
    an image to a ground location in one of several ways.

    For example, we might have a rigorous camera model and orbit data
    allowing us to use an Ipi. Or we might have a RPC (Rational Polynomial
    Coefficients) that connect an image to the ground. Or we might be
    working with data that has already been map projected, so a MapInfo
    gives us a direct connection.

    For many purposes, we don't care exactly how the connection is done,
    we just use the fact that there is a connection.

    This class gives a generic interface that can be used for any kind of
    a connection between the ground and an image.

    An important implementation issue, because of the way the templates
    work in the boost serialization library if you derive from this class
    and want to use boost serialize on it, make sure to derive virtual,
    e.g

    class Foo : public virtual ImageGroundConnection { blah blah };

    This doesn't hurt anything, for other code and because of how boost
    deals with multiple inheritance is required.

    C++ includes: image_ground_connection.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    desc = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_desc)
    initialize = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_initialize)

    def __init__(self, *args):
        if self.__class__ == ImageGroundConnection:
            _self = None
        else:
            _self = self
        _image_ground_connection.ImageGroundConnection_swiginit(self, _image_ground_connection.new_ImageGroundConnection(_self, *args))
    __swig_destroy__ = _image_ground_connection.delete_ImageGroundConnection
    cf_look_vector_lv = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_cf_look_vector_lv)
    cf_look_vector_pos = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_cf_look_vector_pos)
    collinearity_residual = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_collinearity_residual)
    collinearity_residual_jacobian = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_collinearity_residual_jacobian)
    compare_igc = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_compare_igc)
    __ground_coordinate = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection___ground_coordinate)
    ground_coordinate_dem = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_ground_coordinate_dem)
    ground_coordinate_approx_height = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_ground_coordinate_approx_height)
    image_coordinate = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_image_coordinate)
    image_coordinate_with_status = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_image_coordinate_with_status)
    image_coordinate_extended = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_image_coordinate_extended)
    image_coordinate_jac_cf = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_image_coordinate_jac_cf)
    image_coordinate_jac_cf_fd = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_image_coordinate_jac_cf_fd)
    image_coordinate_jac_parm = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_image_coordinate_jac_parm)
    image_coordinate_jac_parm_fd = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_image_coordinate_jac_parm_fd)
    cover = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_cover)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    _v_naif_code = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection__v_naif_code)

    @property
    def naif_code(self):
        return self._v_naif_code()

    _v_cartesian_fixed = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection__v_cartesian_fixed)

    @property
    def cartesian_fixed(self):
        return self._v_cartesian_fixed()

    _v_image = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection__v_image)

    @property
    def image(self):
        return self._v_image()

    @image.setter
    def image(self, value):
      self._v_image(value)

    _v_image_multi_band = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection__v_image_multi_band)

    @property
    def image_multi_band(self):
        return self._v_image_multi_band()

    @image_multi_band.setter
    def image_multi_band(self, value):
      self._v_image_multi_band(value)

    _v_image_mask = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection__v_image_mask)

    @property
    def image_mask(self):
        return self._v_image_mask()

    @image_mask.setter
    def image_mask(self, value):
      self._v_image_mask(value)

    _v_ground_mask = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection__v_ground_mask)

    @property
    def ground_mask(self):
        return self._v_ground_mask()

    @ground_mask.setter
    def ground_mask(self, value):
      self._v_ground_mask(value)

    _v_number_line = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection__v_number_line)

    @property
    def number_line(self):
        return self._v_number_line()

    _v_number_sample = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection__v_number_sample)

    @property
    def number_sample(self):
        return self._v_number_sample()

    _v_number_band = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection__v_number_band)

    @property
    def number_band(self):
        return self._v_number_band()

    _v_title = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection__v_title)

    @property
    def title(self):
        return self._v_title()

    @title.setter
    def title(self, value):
      self._v_title(value)

    _v_has_time = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection__v_has_time)

    @property
    def has_time(self):
        return self._v_has_time()

    pixel_time = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_pixel_time)
    __str__ = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection___str__)
    resolution_meter = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_resolution_meter)
    _v_parameter = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection__v_parameter)

    @property
    def parameter(self):
        return self._v_parameter()

    @parameter.setter
    def parameter(self, value):
      self._v_parameter(value)

    _v_parameter_with_derivative = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection__v_parameter_with_derivative)

    @property
    def parameter_with_derivative(self):
        return self._v_parameter_with_derivative()

    @parameter_with_derivative.setter
    def parameter_with_derivative(self, value):
      self._v_parameter_with_derivative(value)

    _v_parameter_name = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection__v_parameter_name)

    @property
    def parameter_name(self):
        return self._v_parameter_name()

    _v_parameter_subset = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection__v_parameter_subset)

    @property
    def parameter_subset(self):
        return self._v_parameter_subset()

    @parameter_subset.setter
    def parameter_subset(self, value):
      self._v_parameter_subset(value)

    _v_parameter_with_derivative_subset = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection__v_parameter_with_derivative_subset)

    @property
    def parameter_with_derivative_subset(self):
        return self._v_parameter_with_derivative_subset()

    @parameter_with_derivative_subset.setter
    def parameter_with_derivative_subset(self, value):
      self._v_parameter_with_derivative_subset(value)

    _v_parameter_name_subset = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection__v_parameter_name_subset)

    @property
    def parameter_name_subset(self):
        return self._v_parameter_name_subset()

    _v_parameter_mask = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection__v_parameter_mask)

    @property
    def parameter_mask(self):
        return self._v_parameter_mask()

    footprint_resolution_line = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_footprint_resolution_line)
    footprint_resolution_sample = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_footprint_resolution_sample)
    cf_look_vector_arr = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection_cf_look_vector_arr)
    _v_dem = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection__v_dem)

    @property
    def dem(self):
        return self._v_dem()

    __dem = _swig_new_instance_method(_image_ground_connection.ImageGroundConnection___dem)

    @dem.setter
    def dem(self, value):  
      self.__dem(value)

    def cf_look_vector(self, ic):
      return (self.cf_look_vector_lv(ic), self.cf_look_vector_pos(ic))

    def footprint_resolution(self, line, sample):
      return (self.footprint_resolution_line(line, sample), 
    	  self.footprint_resolution_sample(line, sample))

    def ground_coordinate(self, ic, dem = None):
      '''Return ground coordinate for the given image coordinate. You can specify
       a dem to use, or we use the dem associated with the class.'''
      if(dem):
        return self.ground_coordinate_dem(ic, dem)
      else:
        return self.__ground_coordinate(ic)

    def __disown__(self):
        self.this.disown()
        _image_ground_connection.disown_ImageGroundConnection(self)
        return weakref.proxy(self)

# Register ImageGroundConnection in _image_ground_connection:
_image_ground_connection.ImageGroundConnection_swigregister(ImageGroundConnection)
class OffsetImageGroundConnection(ImageGroundConnection):
    r"""

    This class creates an ImageGroundConnection that that is an offset of
    a given one.

    This would be used for example when a image is subsetted to create a
    ImageGroundConnection to go with that subsetted image.

    C++ includes: image_ground_connection.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::OffsetImageGroundConnection::OffsetImageGroundConnection(const boost::shared_ptr< ImageGroundConnection > &Ig_original, int
        Lstart, int Sstart, int Number_line, int Number_sample)
        GeoCal::OffsetImageGroundConnection::OffsetImageGroundConnection
        Constructor that subsets an existing Igc.

        """
        _image_ground_connection.OffsetImageGroundConnection_swiginit(self, _image_ground_connection.new_OffsetImageGroundConnection(*args))
    _v_original_image_ground_connection = _swig_new_instance_method(_image_ground_connection.OffsetImageGroundConnection__v_original_image_ground_connection)

    @property
    def original_image_ground_connection(self):
        return self._v_original_image_ground_connection()

    _v_line_offset = _swig_new_instance_method(_image_ground_connection.OffsetImageGroundConnection__v_line_offset)

    @property
    def line_offset(self):
        return self._v_line_offset()

    _v_sample_offset = _swig_new_instance_method(_image_ground_connection.OffsetImageGroundConnection__v_sample_offset)

    @property
    def sample_offset(self):
        return self._v_sample_offset()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _image_ground_connection.delete_OffsetImageGroundConnection

# Register OffsetImageGroundConnection in _image_ground_connection:
_image_ground_connection.OffsetImageGroundConnection_swigregister(OffsetImageGroundConnection)
class ImageGroundConnectionCopy(ImageGroundConnection):
    r"""

    Simple ImageGroundConnection where we use the mapping from an
    underlying ImageGroundConnection, but allow the raster image, dem,
    title, image mask, or ground mask to be different.

    You can create a copy, and then modify the image etc. without changing
    the underlying ImageGroundConnection.

    C++ includes: image_ground_connection.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::ImageGroundConnectionCopy::ImageGroundConnectionCopy(const boost::shared_ptr< ImageGroundConnection > &Igc, const
        boost::shared_ptr< Dem > &d, const boost::shared_ptr< RasterImage >
        &Img, const boost::shared_ptr< RasterImageMultiBand > &Img_mb, const
        std::string &Title, const boost::shared_ptr< ImageMask > &Img_mask,
        const boost::shared_ptr< GroundMask > &Ground_mask)
        GeoCal::ImageGroundConnectionCopy::ImageGroundConnectionCopy
        """
        _image_ground_connection.ImageGroundConnectionCopy_swiginit(self, _image_ground_connection.new_ImageGroundConnectionCopy(*args))
    _v_igc_original = _swig_new_instance_method(_image_ground_connection.ImageGroundConnectionCopy__v_igc_original)

    @property
    def igc_original(self):
        return self._v_igc_original()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _image_ground_connection.delete_ImageGroundConnectionCopy

# Register ImageGroundConnectionCopy in _image_ground_connection:
_image_ground_connection.ImageGroundConnectionCopy_swigregister(ImageGroundConnectionCopy)
class Vector_ImageGroundConnection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection___nonzero__)
    __bool__ = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection___bool__)
    __len__ = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection___len__)
    __getslice__ = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection___getslice__)
    __setslice__ = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection___setslice__)
    __delslice__ = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection___delslice__)
    __delitem__ = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection___delitem__)
    __getitem__ = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection___getitem__)
    __setitem__ = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection___setitem__)
    pop = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_pop)
    append = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_append)
    empty = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_empty)
    size = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_size)
    swap = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_swap)
    begin = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_begin)
    end = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_end)
    rbegin = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_rbegin)
    rend = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_rend)
    clear = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_clear)
    get_allocator = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_get_allocator)
    pop_back = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_pop_back)
    erase = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_erase)

    def __init__(self, *args):
        _image_ground_connection.Vector_ImageGroundConnection_swiginit(self, _image_ground_connection.new_Vector_ImageGroundConnection(*args))
    push_back = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_push_back)
    front = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_front)
    back = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_back)
    assign = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_assign)
    resize = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_resize)
    insert = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_insert)
    reserve = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_reserve)
    capacity = _swig_new_instance_method(_image_ground_connection.Vector_ImageGroundConnection_capacity)
    __swig_destroy__ = _image_ground_connection.delete_Vector_ImageGroundConnection

# Register Vector_ImageGroundConnection in _image_ground_connection:
_image_ground_connection.Vector_ImageGroundConnection_swigregister(Vector_ImageGroundConnection)

__all__ = ["ImageGroundConnection","Vector_ImageGroundConnection","ImageGroundConnectionFailed","OffsetImageGroundConnection","ImageGroundConnectionCopy"]


