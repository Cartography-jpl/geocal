# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _air_mspi_l1b1.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_air_mspi_l1b1')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_air_mspi_l1b1')
    _air_mspi_l1b1 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_air_mspi_l1b1', [dirname(__file__)])
        except ImportError:
            import _air_mspi_l1b1
            return _air_mspi_l1b1
        try:
            _mod = imp.load_module('_air_mspi_l1b1', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _air_mspi_l1b1 = swig_import_helper()
    del swig_import_helper
else:
    import _air_mspi_l1b1
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _air_mspi_l1b1.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_air_mspi_l1b1.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_air_mspi_l1b1.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_air_mspi_l1b1.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_air_mspi_l1b1.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_air_mspi_l1b1.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_air_mspi_l1b1.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_air_mspi_l1b1.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_air_mspi_l1b1.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_air_mspi_l1b1.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_air_mspi_l1b1.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_air_mspi_l1b1.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_air_mspi_l1b1.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_air_mspi_l1b1.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_air_mspi_l1b1.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_air_mspi_l1b1.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_air_mspi_l1b1.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _air_mspi_l1b1.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _air_mspi_l1b1.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.raster_image_tiled_file
import geocal_swig.raster_image_variable
import geocal_swig.raster_image
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class AirMspiL1b1File(geocal_swig.generic_object.GenericObject):
    """

    This provides access to a AirMspiL1b1File.

    Note that somewhat confusingly, row index is not the same as the
    MspiCamera band index. In fact, for the current configuration the
    MspiCamera bands run in the opposite order from the row index. You
    should not assume any particular relationship between the 2, instead
    you'll want to relate the row numbers to each other, which are
    consistent. AirMspiIgc handles this correctly, but if you are directly
    working with these classes you'll need to do that yourself.

    C++ includes: air_mspi_l1b1.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        AirMspiL1b1File::AirMspiL1b1File(const std::string &Fname, const std::string &Swath_to_use="660-I",
        int Min_l1b1_line=0, int Max_l1b1_line=-1, int Tile_number_line=-1,
        int Tile_number_sample=-1, unsigned int Number_tile=4)
        Constructor. 
        """
        _air_mspi_l1b1.AirMspiL1b1File_swiginit(self, _air_mspi_l1b1.new_AirMspiL1b1File(*args))

    def _v_number_row_index(self):
        """

        int GeoCal::AirMspiL1b1File::number_row_index() const
        Number of row index.

        Note that a lot of the MSPI shared stuff is written using
        "row_number", which is an underlying CCD row I think. Row_index is
        just an index into the available rows. 
        """
        return _air_mspi_l1b1.AirMspiL1b1File__v_number_row_index(self)


    @property
    def number_row_index(self):
        return self._v_number_row_index()


    def _v_file_name(self):
        """

        const std::string& GeoCal::AirMspiL1b1File::file_name() const
        The file name we are using. 
        """
        return _air_mspi_l1b1.AirMspiL1b1File__v_file_name(self)


    @property
    def file_name(self):
        return self._v_file_name()


    def _v_swath_to_use(self):
        """

        std::string GeoCal::AirMspiL1b1File::swath_to_use() const
        Swath we are using to read data from. 
        """
        return _air_mspi_l1b1.AirMspiL1b1File__v_swath_to_use(self)


    @property
    def swath_to_use(self):
        return self._v_swath_to_use()


    def _v_row_index_to_use(self):
        """

        void GeoCal::AirMspiL1b1File::row_index_to_use(int Row_index)

        """
        return _air_mspi_l1b1.AirMspiL1b1File__v_row_index_to_use(self)


    @property
    def row_index_to_use(self):
        return self._v_row_index_to_use()


    def _v_row_number_to_use(self):
        """

        int GeoCal::AirMspiL1b1File::row_number_to_use() const
        Row number to use. 
        """
        return _air_mspi_l1b1.AirMspiL1b1File__v_row_number_to_use(self)


    @property
    def row_number_to_use(self):
        return self._v_row_number_to_use()


    def _v_granule_id(self):
        """

        std::string AirMspiL1b1File::granule_id() const
        Return the granule id. 
        """
        return _air_mspi_l1b1.AirMspiL1b1File__v_granule_id(self)


    @property
    def granule_id(self):
        return self._v_granule_id()


    def _v_time(self):
        """

        std::vector< Time > AirMspiL1b1File::time() const
        Return the time for each line. 
        """
        return _air_mspi_l1b1.AirMspiL1b1File__v_time(self)


    @property
    def time(self):
        return self._v_time()


    def field_names(self, Row_index):
        """

        std::vector< std::string > AirMspiL1b1File::field_names(int Row_index) const
        Return the field names for the given row_index. 
        """
        return _air_mspi_l1b1.AirMspiL1b1File_field_names(self, Row_index)


    def wavelength(self, Row_index):
        """

        float AirMspiL1b1File::wavelength(int Row_index) const
        Return the wavelength for the given row_index. 
        """
        return _air_mspi_l1b1.AirMspiL1b1File_wavelength(self, Row_index)


    def polarization_angle(self, Row_index):
        """

        float AirMspiL1b1File::polarization_angle(int Row_index) const
        Return the polarization angle for the given row_index. 
        """
        return _air_mspi_l1b1.AirMspiL1b1File_polarization_angle(self, Row_index)


    def swath_name(self, Row_index):
        """

        std::string AirMspiL1b1File::swath_name(int Row_index) const
        Return the swath name for the given row_index. 
        """
        return _air_mspi_l1b1.AirMspiL1b1File_swath_name(self, Row_index)


    def row_index_to_row_number(self, Row_index):
        """

        int AirMspiL1b1File::row_index_to_row_number(int Row_index) const
        Map Row index to row number. 
        """
        return _air_mspi_l1b1.AirMspiL1b1File_row_index_to_row_number(self, Row_index)


    def row_number_to_row_index(self, Row_number):
        """

        int AirMspiL1b1File::row_number_to_row_index(int Row_number) const
        Map row number to row index. 
        """
        return _air_mspi_l1b1.AirMspiL1b1File_row_number_to_row_index(self, Row_number)


    def __reduce__(self):
      return _new_from_serialization_dir, (os.getcwd(), geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _air_mspi_l1b1.delete_AirMspiL1b1File
AirMspiL1b1File._v_number_row_index = new_instancemethod(_air_mspi_l1b1.AirMspiL1b1File__v_number_row_index, None, AirMspiL1b1File)
AirMspiL1b1File._v_file_name = new_instancemethod(_air_mspi_l1b1.AirMspiL1b1File__v_file_name, None, AirMspiL1b1File)
AirMspiL1b1File._v_swath_to_use = new_instancemethod(_air_mspi_l1b1.AirMspiL1b1File__v_swath_to_use, None, AirMspiL1b1File)
AirMspiL1b1File._v_row_index_to_use = new_instancemethod(_air_mspi_l1b1.AirMspiL1b1File__v_row_index_to_use, None, AirMspiL1b1File)
AirMspiL1b1File._v_row_number_to_use = new_instancemethod(_air_mspi_l1b1.AirMspiL1b1File__v_row_number_to_use, None, AirMspiL1b1File)
AirMspiL1b1File._v_granule_id = new_instancemethod(_air_mspi_l1b1.AirMspiL1b1File__v_granule_id, None, AirMspiL1b1File)
AirMspiL1b1File._v_time = new_instancemethod(_air_mspi_l1b1.AirMspiL1b1File__v_time, None, AirMspiL1b1File)
AirMspiL1b1File.field_names = new_instancemethod(_air_mspi_l1b1.AirMspiL1b1File_field_names, None, AirMspiL1b1File)
AirMspiL1b1File.wavelength = new_instancemethod(_air_mspi_l1b1.AirMspiL1b1File_wavelength, None, AirMspiL1b1File)
AirMspiL1b1File.polarization_angle = new_instancemethod(_air_mspi_l1b1.AirMspiL1b1File_polarization_angle, None, AirMspiL1b1File)
AirMspiL1b1File.swath_name = new_instancemethod(_air_mspi_l1b1.AirMspiL1b1File_swath_name, None, AirMspiL1b1File)
AirMspiL1b1File.row_index_to_row_number = new_instancemethod(_air_mspi_l1b1.AirMspiL1b1File_row_index_to_row_number, None, AirMspiL1b1File)
AirMspiL1b1File.row_number_to_row_index = new_instancemethod(_air_mspi_l1b1.AirMspiL1b1File_row_number_to_row_index, None, AirMspiL1b1File)
AirMspiL1b1File_swigregister = _air_mspi_l1b1.AirMspiL1b1File_swigregister
AirMspiL1b1File_swigregister(AirMspiL1b1File)

class AirMspiL1b1(geocal_swig.raster_image_tiled_file.RasterImageTiledFile):
    """

    C++ includes: air_mspi_l1b1.h

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        AirMspiL1b1::AirMspiL1b1(const std::string &Fname, const std::string &Swath_to_use="660-I",
        int Tile_number_line=-1, int Tile_number_sample=-1, unsigned int
        Number_tile=4)
        Constructor. 
        """
        _air_mspi_l1b1.AirMspiL1b1_swiginit(self, _air_mspi_l1b1.new_AirMspiL1b1(*args))

    def __reduce__(self):
      return _new_from_serialization_dir, (os.getcwd(), geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _air_mspi_l1b1.delete_AirMspiL1b1
AirMspiL1b1_swigregister = _air_mspi_l1b1.AirMspiL1b1_swigregister
AirMspiL1b1_swigregister(AirMspiL1b1)


__all__ = ["AirMspiL1b1File","AirMspiL1b1"]



