# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _orbit_quaternion_list_offset

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _orbit_quaternion_list_offset.SWIG_PyInstanceMethod_New
_swig_new_static_method = _orbit_quaternion_list_offset.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _orbit_quaternion_list_offset.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _orbit_quaternion_list_offset.delete_SwigPyIterator
    value = _swig_new_instance_method(_orbit_quaternion_list_offset.SwigPyIterator_value)
    incr = _swig_new_instance_method(_orbit_quaternion_list_offset.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_orbit_quaternion_list_offset.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_orbit_quaternion_list_offset.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_orbit_quaternion_list_offset.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_orbit_quaternion_list_offset.SwigPyIterator_copy)
    next = _swig_new_instance_method(_orbit_quaternion_list_offset.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_orbit_quaternion_list_offset.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_orbit_quaternion_list_offset.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_orbit_quaternion_list_offset.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_orbit_quaternion_list_offset.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_orbit_quaternion_list_offset.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_orbit_quaternion_list_offset.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_orbit_quaternion_list_offset.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_orbit_quaternion_list_offset.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_orbit_quaternion_list_offset.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _orbit_quaternion_list_offset:
_orbit_quaternion_list_offset.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _orbit_quaternion_list_offset.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.orbit_quaternion_list
import geocal_swig.orbit
import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.with_parameter
import geocal_swig.look_vector
class OrbitQuaternionListOffset(geocal_swig.orbit_quaternion_list.OrbitQuaternionList):
    r"""

    This is an adapter to a OrbitQuaternionList where we add a fixed
    offset in spacecraft coordinates to the position.

    The original use of this is to model Ecostress, where we are far
    enough away from the center of the ISS that we need to account for the
    difference (we are about 25 meters or so away, which is a significant
    fraction of a pixel away). Note that this is similar to but distinct
    from a position offset in OrbitOffsetCorrection. There the correction
    is time dependent, and represented in whatever the native position is
    (e.g., ECI coordinates). Here, the correction is a know constant and
    is expressed in spacecraft coordinate - we have a fixed known
    orientation. Note that for most spacecraft we can ignore the position
    difference, the ISS is a special case because it is so large.

    We could have a general "Orbit" adapter, however again our use case
    is a OrbitQuaternionList (or more specifically, a HdfOrbit). We just
    use this particular case for performance reasons, overriding the
    cached orbit_data_create rather than doing the correction every time
    we create a orbit data.

    C++ includes: orbit_quaternion_list_offset.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Orbit_underlying, Position_offset_sc_coordinate):
        r"""

        GeoCal::OrbitQuaternionListOffset::OrbitQuaternionListOffset(const boost::shared_ptr< OrbitQuaternionList > &Orbit_underlying,
        const blitz::Array< double, 1 > &Position_offset_sc_coordinate)
        Constructor.

        Add a fixed offset to the position in meters, in space craft
        coordinate system. 
        """
        _orbit_quaternion_list_offset.OrbitQuaternionListOffset_swiginit(self, _orbit_quaternion_list_offset.new_OrbitQuaternionListOffset(Orbit_underlying, Position_offset_sc_coordinate))
    _v_orbit_underlying = _swig_new_instance_method(_orbit_quaternion_list_offset.OrbitQuaternionListOffset__v_orbit_underlying)

    @property
    def orbit_underlying(self):
        return self._v_orbit_underlying()

    _v_position_offset_sc_coordinate = _swig_new_instance_method(_orbit_quaternion_list_offset.OrbitQuaternionListOffset__v_position_offset_sc_coordinate)

    @property
    def position_offset_sc_coordinate(self):
        return self._v_position_offset_sc_coordinate()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _orbit_quaternion_list_offset.delete_OrbitQuaternionListOffset

# Register OrbitQuaternionListOffset in _orbit_quaternion_list_offset:
_orbit_quaternion_list_offset.OrbitQuaternionListOffset_swigregister(OrbitQuaternionListOffset)
class OrbitScCoorOffset(geocal_swig.orbit.Orbit):
    r"""

    Like OrbitQuaternionListOffset, but for a more general orbit.

    C++ includes: orbit_quaternion_list_offset.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Orbit_underlying, Position_offset_sc_coordinate):
        r"""

        GeoCal::OrbitScCoorOffset::OrbitScCoorOffset(const boost::shared_ptr< Orbit > &Orbit_underlying, const
        blitz::Array< double, 1 > &Position_offset_sc_coordinate)
        Constructor.

        Add a fixed offset to the position in meters, in space craft
        coordinate system. 
        """
        _orbit_quaternion_list_offset.OrbitScCoorOffset_swiginit(self, _orbit_quaternion_list_offset.new_OrbitScCoorOffset(Orbit_underlying, Position_offset_sc_coordinate))
    orbit_data = _swig_new_instance_method(_orbit_quaternion_list_offset.OrbitScCoorOffset_orbit_data)
    _v_orbit_underlying = _swig_new_instance_method(_orbit_quaternion_list_offset.OrbitScCoorOffset__v_orbit_underlying)

    @property
    def orbit_underlying(self):
        return self._v_orbit_underlying()

    _v_position_offset_sc_coordinate = _swig_new_instance_method(_orbit_quaternion_list_offset.OrbitScCoorOffset__v_position_offset_sc_coordinate)

    @property
    def position_offset_sc_coordinate(self):
        return self._v_position_offset_sc_coordinate()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _orbit_quaternion_list_offset.delete_OrbitScCoorOffset

# Register OrbitScCoorOffset in _orbit_quaternion_list_offset:
_orbit_quaternion_list_offset.OrbitScCoorOffset_swigregister(OrbitScCoorOffset)

__all__ = ["OrbitQuaternionListOffset","OrbitScCoorOffset"]


