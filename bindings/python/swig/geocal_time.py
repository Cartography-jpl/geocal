# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _geocal_time

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _geocal_time.SWIG_PyInstanceMethod_New
_swig_new_static_method = _geocal_time.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _geocal_time.delete_SwigPyIterator
    value = _swig_new_instance_method(_geocal_time.SwigPyIterator_value)
    incr = _swig_new_instance_method(_geocal_time.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_geocal_time.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_geocal_time.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_geocal_time.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_geocal_time.SwigPyIterator_copy)
    next = _swig_new_instance_method(_geocal_time.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_geocal_time.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_geocal_time.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_geocal_time.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_geocal_time.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_geocal_time.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_geocal_time.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_geocal_time.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_geocal_time.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_geocal_time.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _geocal_time:
_geocal_time.SwigPyIterator_swigregister(SwigPyIterator)
SWIG_MODULE_ALREADY_DONE = _geocal_time.SWIG_MODULE_ALREADY_DONE
SHARED_PTR_DISOWN = _geocal_time.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object

import datetime
import time

def _new_time(pgs):
  return Time.time_pgs(pgs)

def _new_time_with_derivative(pgs):
  return TimeWithDerivative.time_pgs(pgs)

class Time(geocal_swig.generic_object.GenericObject):
    r"""

    C++ includes: geocal_time.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    time_et = _swig_new_static_method(_geocal_time.Time_time_et)
    time_pgs = _swig_new_static_method(_geocal_time.Time_time_pgs)
    time_j2000 = _swig_new_static_method(_geocal_time.Time_time_j2000)
    time_gps = _swig_new_static_method(_geocal_time.Time_time_gps)
    time_unix = _swig_new_static_method(_geocal_time.Time_time_unix)
    time_acs = _swig_new_static_method(_geocal_time.Time_time_acs)
    time_sclk = _swig_new_static_method(_geocal_time.Time_time_sclk)
    sclk = _swig_new_instance_method(_geocal_time.Time_sclk)
    _v_acs = _swig_new_instance_method(_geocal_time.Time__v_acs)

    @property
    def acs(self):
        return self._v_acs()

    _v_pgs = _swig_new_instance_method(_geocal_time.Time__v_pgs)

    @property
    def pgs(self):
        return self._v_pgs()

    _v_gps = _swig_new_instance_method(_geocal_time.Time__v_gps)

    @property
    def gps(self):
        return self._v_gps()

    _v_gps_week = _swig_new_instance_method(_geocal_time.Time__v_gps_week)

    @property
    def gps_week(self):
        return self._v_gps_week()

    _v_gps_week_offset = _swig_new_instance_method(_geocal_time.Time__v_gps_week_offset)

    @property
    def gps_week_offset(self):
        return self._v_gps_week_offset()

    _v_j2000 = _swig_new_instance_method(_geocal_time.Time__v_j2000)

    @property
    def j2000(self):
        return self._v_j2000()

    _v_et = _swig_new_instance_method(_geocal_time.Time__v_et)

    @property
    def et(self):
        return self._v_et()

    parse_time = _swig_new_static_method(_geocal_time.Time_parse_time)
    __str__ = _swig_new_instance_method(_geocal_time.Time___str__)
    __lt__ = _swig_new_instance_method(_geocal_time.Time___lt__)
    __le__ = _swig_new_instance_method(_geocal_time.Time___le__)
    __eq__ = _swig_new_instance_method(_geocal_time.Time___eq__)
    __ne__ = _swig_new_instance_method(_geocal_time.Time___ne__)
    __gt__ = _swig_new_instance_method(_geocal_time.Time___gt__)
    __ge__ = _swig_new_instance_method(_geocal_time.Time___ge__)
    __add__ = _swig_new_instance_method(_geocal_time.Time___add__)
    __radd__ = _swig_new_instance_method(_geocal_time.Time___radd__)
    __sub__ = _swig_new_instance_method(_geocal_time.Time___sub__)
    unix_time = _swig_new_instance_method(_geocal_time.Time_unix_time)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)


    def __init__(self):
        _geocal_time.Time_swiginit(self, _geocal_time.new_Time())
    __swig_destroy__ = _geocal_time.delete_Time

# Register Time in _geocal_time:
_geocal_time.Time_swigregister(Time)
cvar = _geocal_time.cvar
Time.min_valid_time = _geocal_time.cvar.Time_min_valid_time
Time.max_valid_time = _geocal_time.cvar.Time_max_valid_time

class TimeWithDerivative(geocal_swig.generic_object.GenericObject):
    r"""

    C++ includes: geocal_time.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::TimeWithDerivative::TimeWithDerivative()

        """
        _geocal_time.TimeWithDerivative_swiginit(self, _geocal_time.new_TimeWithDerivative(*args))
    time_pgs = _swig_new_static_method(_geocal_time.TimeWithDerivative_time_pgs)
    time_j2000 = _swig_new_static_method(_geocal_time.TimeWithDerivative_time_j2000)
    time_gps = _swig_new_static_method(_geocal_time.TimeWithDerivative_time_gps)
    _v_pgs = _swig_new_instance_method(_geocal_time.TimeWithDerivative__v_pgs)

    @property
    def pgs(self):
        return self._v_pgs()

    _v_gps = _swig_new_instance_method(_geocal_time.TimeWithDerivative__v_gps)

    @property
    def gps(self):
        return self._v_gps()

    _v_gps_week = _swig_new_instance_method(_geocal_time.TimeWithDerivative__v_gps_week)

    @property
    def gps_week(self):
        return self._v_gps_week()

    _v_gps_week_offset = _swig_new_instance_method(_geocal_time.TimeWithDerivative__v_gps_week_offset)

    @property
    def gps_week_offset(self):
        return self._v_gps_week_offset()

    _v_j2000 = _swig_new_instance_method(_geocal_time.TimeWithDerivative__v_j2000)

    @property
    def j2000(self):
        return self._v_j2000()

    _v_value = _swig_new_instance_method(_geocal_time.TimeWithDerivative__v_value)

    @property
    def value(self):
        return self._v_value()

    _v_gradient = _swig_new_instance_method(_geocal_time.TimeWithDerivative__v_gradient)

    @property
    def gradient(self):
        return self._v_gradient()

    __str__ = _swig_new_instance_method(_geocal_time.TimeWithDerivative___str__)
    __cmp__ = _swig_new_instance_method(_geocal_time.TimeWithDerivative___cmp__)
    __add__ = _swig_new_instance_method(_geocal_time.TimeWithDerivative___add__)
    __radd__ = _swig_new_instance_method(_geocal_time.TimeWithDerivative___radd__)
    __sub__ = _swig_new_instance_method(_geocal_time.TimeWithDerivative___sub__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _geocal_time.delete_TimeWithDerivative

# Register TimeWithDerivative in _geocal_time:
_geocal_time.TimeWithDerivative_swigregister(TimeWithDerivative)

__all__ = ["Time","TimeWithDerivative"]


