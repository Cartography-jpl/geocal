# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rsm_low_order_polynomial.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_rsm_low_order_polynomial')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_rsm_low_order_polynomial')
    _rsm_low_order_polynomial = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rsm_low_order_polynomial', [dirname(__file__)])
        except ImportError:
            import _rsm_low_order_polynomial
            return _rsm_low_order_polynomial
        try:
            _mod = imp.load_module('_rsm_low_order_polynomial', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _rsm_low_order_polynomial = swig_import_helper()
    del swig_import_helper
else:
    import _rsm_low_order_polynomial
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rsm_low_order_polynomial.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_rsm_low_order_polynomial.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_rsm_low_order_polynomial.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_rsm_low_order_polynomial.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_rsm_low_order_polynomial.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_rsm_low_order_polynomial.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_rsm_low_order_polynomial.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_rsm_low_order_polynomial.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_rsm_low_order_polynomial.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_rsm_low_order_polynomial.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_rsm_low_order_polynomial.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_rsm_low_order_polynomial.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_rsm_low_order_polynomial.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_rsm_low_order_polynomial.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_rsm_low_order_polynomial.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_rsm_low_order_polynomial.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_rsm_low_order_polynomial.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _rsm_low_order_polynomial.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _rsm_low_order_polynomial.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class RsmLowOrderPolynomial(geocal_swig.generic_object.GenericObject):
    """

    This is the low order polynomial used to determine approximate
    row/column (line/sample, the RSM documentation calls this Row/Column)

    C++ includes: rsm_low_order_polynomial.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Nline_fit=10, Nsample_fit=10, Nheight_fit=10, Ignore_igc_error_in_fit=False):
        """

        GeoCal::RsmLowOrderPolynomial::RsmLowOrderPolynomial(int Nline_fit=10, int Nsample_fit=10, int Nheight_fit=10, bool
        Ignore_igc_error_in_fit=false)
        Constructor. 
        """
        _rsm_low_order_polynomial.RsmLowOrderPolynomial_swiginit(self, _rsm_low_order_polynomial.new_RsmLowOrderPolynomial(Nline_fit, Nsample_fit, Nheight_fit, Ignore_igc_error_in_fit))

    def image_coordinate(self, *args):
        """

        blitz::Array< double, 4 > RsmLowOrderPolynomial::image_coordinate(const blitz::Array< double, 3 > &X, const blitz::Array< double, 3 >
        &Y, const blitz::Array< double, 3 > &Z) const
        Apply the rational polynomial to the given X, Y, and Z value.

        This converts a whole array of points at once. The results have the
        first dimension of size 2, the first value is the line and the second
        the sample. 
        """
        return _rsm_low_order_polynomial.RsmLowOrderPolynomial_image_coordinate(self, *args)


    def fit_data(self, Line, Sample, X, Y, Z):
        """

        void RsmLowOrderPolynomial::fit_data(const std::vector< double > &Line, const std::vector< double >
        &Sample, const std::vector< double > &X, const std::vector< double >
        &Y, const std::vector< double > &Z)
        Adjust the parameters of line and sample numerator and denominator to
        fit the given data.

        Note that this uses the existing scale and offset values, so you
        should make sure to set that first (e.g., call fit_offset_and_scale).

        """
        return _rsm_low_order_polynomial.RsmLowOrderPolynomial_fit_data(self, Line, Sample, X, Y, Z)


    def fit(self, Igc, Cconv, Min_height, Max_height, Min_line, Max_line, Min_sample, Max_sample):
        """

        void RsmLowOrderPolynomial::fit(const ImageGroundConnection &Igc, const CoordinateConverter &Cconv,
        double Min_height, double Max_height, int Min_line, int Max_line, int
        Min_sample, int Max_sample)
        Generate a RsmLowOrderPolynomial that approximates the calculation
        done by a ImageGroundConnection.

        To support sections, you can pass in a restricted number of
        line/samples to fit over. 
        """
        return _rsm_low_order_polynomial.RsmLowOrderPolynomial_fit(self, Igc, Cconv, Min_height, Max_height, Min_line, Max_line, Min_sample, Max_sample)


    def _v_min_line(self, *args):
        """

        void GeoCal::RsmLowOrderPolynomial::min_line(int V)

        """
        return _rsm_low_order_polynomial.RsmLowOrderPolynomial__v_min_line(self, *args)


    @property
    def min_line(self):
        return self._v_min_line()

    @min_line.setter
    def min_line(self, value):
      self._v_min_line(value)


    def _v_max_line(self, *args):
        """

        void GeoCal::RsmLowOrderPolynomial::max_line(int V)

        """
        return _rsm_low_order_polynomial.RsmLowOrderPolynomial__v_max_line(self, *args)


    @property
    def max_line(self):
        return self._v_max_line()

    @max_line.setter
    def max_line(self, value):
      self._v_max_line(value)


    def _v_min_sample(self, *args):
        """

        void GeoCal::RsmLowOrderPolynomial::min_sample(int V)

        """
        return _rsm_low_order_polynomial.RsmLowOrderPolynomial__v_min_sample(self, *args)


    @property
    def min_sample(self):
        return self._v_min_sample()

    @min_sample.setter
    def min_sample(self, value):
      self._v_min_sample(value)


    def _v_max_sample(self, *args):
        """

        void GeoCal::RsmLowOrderPolynomial::max_sample(int V)

        """
        return _rsm_low_order_polynomial.RsmLowOrderPolynomial__v_max_sample(self, *args)


    @property
    def max_sample(self):
        return self._v_max_sample()

    @max_sample.setter
    def max_sample(self, value):
      self._v_max_sample(value)


    def _v_number_line_fit(self, *args):
        """

        void GeoCal::RsmLowOrderPolynomial::number_line_fit(int V)
        Number of lines in the grid we fit for. 
        """
        return _rsm_low_order_polynomial.RsmLowOrderPolynomial__v_number_line_fit(self, *args)


    @property
    def number_line_fit(self):
        return self._v_number_line_fit()

    @number_line_fit.setter
    def number_line_fit(self, value):
      self._v_number_line_fit(value)


    def _v_number_sample_fit(self, *args):
        """

        void GeoCal::RsmLowOrderPolynomial::number_sample_fit(int V)
        Number of samples in the grid we fit for. 
        """
        return _rsm_low_order_polynomial.RsmLowOrderPolynomial__v_number_sample_fit(self, *args)


    @property
    def number_sample_fit(self):
        return self._v_number_sample_fit()

    @number_sample_fit.setter
    def number_sample_fit(self, value):
      self._v_number_sample_fit(value)


    def _v_number_height_fit(self, *args):
        """

        void GeoCal::RsmLowOrderPolynomial::number_height_fit(int V)
        Number of heights in the grid we fit for. 
        """
        return _rsm_low_order_polynomial.RsmLowOrderPolynomial__v_number_height_fit(self, *args)


    @property
    def number_height_fit(self):
        return self._v_number_height_fit()

    @number_height_fit.setter
    def number_height_fit(self, value):
      self._v_number_height_fit(value)


    def _v_ignore_igc_error_in_fit(self, *args):
        """

        void GeoCal::RsmLowOrderPolynomial::ignore_igc_error_in_fit(bool V)
        If true, ignore igc errors in fit. 
        """
        return _rsm_low_order_polynomial.RsmLowOrderPolynomial__v_ignore_igc_error_in_fit(self, *args)


    @property
    def ignore_igc_error_in_fit(self):
        return self._v_ignore_igc_error_in_fit()

    @ignore_igc_error_in_fit.setter
    def ignore_igc_error_in_fit(self, value):
      self._v_ignore_igc_error_in_fit(value)


    def _v_parameter_line(self):
        """

        blitz::Array<double, 1> GeoCal::RsmLowOrderPolynomial::parameter_line() const

        """
        return _rsm_low_order_polynomial.RsmLowOrderPolynomial__v_parameter_line(self)


    @property
    def parameter_line(self):
        return self._v_parameter_line()


    def _v_parameter_sample(self):
        """

        blitz::Array<double, 1> GeoCal::RsmLowOrderPolynomial::parameter_sample() const

        """
        return _rsm_low_order_polynomial.RsmLowOrderPolynomial__v_parameter_sample(self)


    @property
    def parameter_sample(self):
        return self._v_parameter_sample()


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _rsm_low_order_polynomial.delete_RsmLowOrderPolynomial
RsmLowOrderPolynomial.__str__ = new_instancemethod(_rsm_low_order_polynomial.RsmLowOrderPolynomial___str__, None, RsmLowOrderPolynomial)
RsmLowOrderPolynomial.image_coordinate = new_instancemethod(_rsm_low_order_polynomial.RsmLowOrderPolynomial_image_coordinate, None, RsmLowOrderPolynomial)
RsmLowOrderPolynomial.fit_data = new_instancemethod(_rsm_low_order_polynomial.RsmLowOrderPolynomial_fit_data, None, RsmLowOrderPolynomial)
RsmLowOrderPolynomial.fit = new_instancemethod(_rsm_low_order_polynomial.RsmLowOrderPolynomial_fit, None, RsmLowOrderPolynomial)
RsmLowOrderPolynomial._v_min_line = new_instancemethod(_rsm_low_order_polynomial.RsmLowOrderPolynomial__v_min_line, None, RsmLowOrderPolynomial)
RsmLowOrderPolynomial._v_max_line = new_instancemethod(_rsm_low_order_polynomial.RsmLowOrderPolynomial__v_max_line, None, RsmLowOrderPolynomial)
RsmLowOrderPolynomial._v_min_sample = new_instancemethod(_rsm_low_order_polynomial.RsmLowOrderPolynomial__v_min_sample, None, RsmLowOrderPolynomial)
RsmLowOrderPolynomial._v_max_sample = new_instancemethod(_rsm_low_order_polynomial.RsmLowOrderPolynomial__v_max_sample, None, RsmLowOrderPolynomial)
RsmLowOrderPolynomial._v_number_line_fit = new_instancemethod(_rsm_low_order_polynomial.RsmLowOrderPolynomial__v_number_line_fit, None, RsmLowOrderPolynomial)
RsmLowOrderPolynomial._v_number_sample_fit = new_instancemethod(_rsm_low_order_polynomial.RsmLowOrderPolynomial__v_number_sample_fit, None, RsmLowOrderPolynomial)
RsmLowOrderPolynomial._v_number_height_fit = new_instancemethod(_rsm_low_order_polynomial.RsmLowOrderPolynomial__v_number_height_fit, None, RsmLowOrderPolynomial)
RsmLowOrderPolynomial._v_ignore_igc_error_in_fit = new_instancemethod(_rsm_low_order_polynomial.RsmLowOrderPolynomial__v_ignore_igc_error_in_fit, None, RsmLowOrderPolynomial)
RsmLowOrderPolynomial._v_parameter_line = new_instancemethod(_rsm_low_order_polynomial.RsmLowOrderPolynomial__v_parameter_line, None, RsmLowOrderPolynomial)
RsmLowOrderPolynomial._v_parameter_sample = new_instancemethod(_rsm_low_order_polynomial.RsmLowOrderPolynomial__v_parameter_sample, None, RsmLowOrderPolynomial)
RsmLowOrderPolynomial_swigregister = _rsm_low_order_polynomial.RsmLowOrderPolynomial_swigregister
RsmLowOrderPolynomial_swigregister(RsmLowOrderPolynomial)



