# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _gdal_dem

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _gdal_dem.SWIG_PyInstanceMethod_New
_swig_new_static_method = _gdal_dem.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _gdal_dem.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gdal_dem.delete_SwigPyIterator
    value = _swig_new_instance_method(_gdal_dem.SwigPyIterator_value)
    incr = _swig_new_instance_method(_gdal_dem.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_gdal_dem.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_gdal_dem.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_gdal_dem.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_gdal_dem.SwigPyIterator_copy)
    next = _swig_new_instance_method(_gdal_dem.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_gdal_dem.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_gdal_dem.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_gdal_dem.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_gdal_dem.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_gdal_dem.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_gdal_dem.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_gdal_dem.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_gdal_dem.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_gdal_dem.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _gdal_dem:
_gdal_dem.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _gdal_dem.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.dem_tiled_file
import geocal_swig.dem_map_info
import geocal_swig.dem
import geocal_swig.generic_object
class GdalDem(geocal_swig.dem_tiled_file.DemTiledFile):
    r"""

    This uses a Gdal<T> as a DEM.

    The type of T should be one we can convert to a double, and should
    give the height in meters above sea level. We do a bilinear
    interpolation to get values between points, and we optionally return a
    height of 0 outside of the range of where we have data (or
    alternatively, throw an exception).

    Right now, the datum needs to be passed in. I don't believe there is
    any information available in the files to let us know which datum to
    use.

    C++ includes: gdal_dem.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GdalDem::GdalDem(const std::string &Fname, const boost::shared_ptr< Datum >
        &D=boost::shared_ptr< Datum >(new NoDatum()), int Band_id=1, bool
        Outside_dem_is_error=false, int Number_tile=4, int
        Tile_number_line=-1, int Tile_number_sample=-1)
        GeoCal::GdalDem::GdalDem
        Constructor that reads an existing file to get the Dem data.
        The default Datum used if none is supplied is DidDatum, which is
        relative to WGS-84. If Outside_dem_is_error is false, we return a
        height of 0 outside of the range of the data, otherwise an exception
        is thrown when an attempt is made to retrieve an height outside of the
        range.

        You can optionally pass the desired tile size. If you don't pass this
        in, we use the blocking size of the underlying dataset. 
        """
        _gdal_dem.GdalDem_swiginit(self, _gdal_dem.new_GdalDem(*args))
    elevation = _swig_new_instance_method(_gdal_dem.GdalDem_elevation)
    _v_file_name = _swig_new_instance_method(_gdal_dem.GdalDem__v_file_name)

    @property
    def file_name(self):
        return self._v_file_name()

    _v_band_id = _swig_new_instance_method(_gdal_dem.GdalDem__v_band_id)

    @property
    def band_id(self):
        return self._v_band_id()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _gdal_dem.delete_GdalDem

# Register GdalDem in _gdal_dem:
_gdal_dem.GdalDem_swigregister(GdalDem)

__all__ = ["GdalDem"]


