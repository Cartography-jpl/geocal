# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rsm.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_rsm')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_rsm')
    _rsm = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rsm', [dirname(__file__)])
        except ImportError:
            import _rsm
            return _rsm
        try:
            _mod = imp.load_module('_rsm', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _rsm = swig_import_helper()
    del swig_import_helper
else:
    import _rsm
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rsm.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_rsm.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_rsm.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_rsm.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_rsm.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_rsm.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_rsm.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_rsm.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_rsm.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_rsm.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_rsm.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_rsm.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_rsm.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_rsm.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_rsm.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_rsm.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_rsm.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _rsm.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _rsm.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class Rsm(geocal_swig.with_parameter.WithParameterNested):
    """

    This class is a Replacement Sensor Model (see Dolloff, J.T., M.M.

    Iiyama, and C.R. Taylor, 2008. The Replacement Sensor Model (RSM):
    Overview, Status, and Performance Summary, ASPRS 2008 Annual
    Conference, April 28 - May 2, 2008)

    This is the top level class which provides access to mapping from
    GroundCoordinate to ImageCoordinate and vice versa.

    Note that the same ambiguity mentioned in the Rpc comments exist here,
    it isn't clear the exact definition of row/sample in the standard. For
    the Rpc, I'm fairly sure that it matches our ImageCoordinate
    convention - (0,0) is the center of the upper left corner pixel.

    C++ includes: rsm.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Rsm::Rsm(const boost::shared_ptr< RsmBase > &Rp, const boost::shared_ptr<
        CoordinateConverter > &Cconv)
        Constructor. 
        """
        _rsm.Rsm_swiginit(self, _rsm.new_Rsm(*args))

    def ground_coordinate(self, Ic, D):
        """

        boost::shared_ptr< GroundCoordinate > Rsm::ground_coordinate(const ImageCoordinate &Ic, const Dem &D) const
        Invert the image_coordinate function to find the ground coordinate
        that maps to a given ImageCoordinate.

        This routine may fail to find a solution, in which case a
        ConvergenceFailure exception will be thrown. 
        """
        return _rsm.Rsm_ground_coordinate(self, Ic, D)


    def polish_intersection(self, Ic, D, Surfp, Z_accuracy=1e-2):
        """

        boost::shared_ptr< GroundCoordinate > Rsm::polish_intersection(const ImageCoordinate &Ic, const Dem &D, const GroundCoordinate
        &Surfp, double Z_accuracy=1e-2) const
        The look vectors in a RSM projection are not strictly lines.

        Once we have a solution for the intersection with a DEM, we can
        "polish" this to account for the small nonlinearities in the RSM.
        The surface point should be pretty close to the intersection, we don't
        account for obscuration in this function. 
        """
        return _rsm.Rsm_polish_intersection(self, Ic, D, Surfp, Z_accuracy)


    def ground_coordinate_z(self, Ic, Z):
        """

        boost::shared_ptr< GroundCoordinate > Rsm::ground_coordinate_z(const ImageCoordinate &Ic, double Z) const
        Invert the image_coordinate function to find the ground coordinates at
        a particular Z value.

        For the special case that the coordinate converter is a
        GeodeticConverter or PlanetocentricConverter Z corresponds to height.

        This routine may fail to find a solution, in which case a
        ConvergenceFailure exception will be thrown. 
        """
        return _rsm.Rsm_ground_coordinate_z(self, Ic, Z)


    def ground_coordinate_approx_height(self, Ic, H):
        """

        boost::shared_ptr< GroundCoordinate > Rsm::ground_coordinate_approx_height(const ImageCoordinate &Ic, double H) const
        Return ground coordinate at the height above the reference ellipsoid.

        """
        return _rsm.Rsm_ground_coordinate_approx_height(self, Ic, H)


    def image_coordinate(self, *args):
        """

        ImageCoordinate Rsm::image_coordinate(double X, double Y, double Z) const
        Variation where the Gc is already in our native coordinate system. 
        """
        return _rsm.Rsm_image_coordinate(self, *args)


    def image_coordinate_jacobian(self, X, Y, Z):
        """

        blitz::Array< double, 2 > Rsm::image_coordinate_jacobian(double X, double Y, double Z) const
        This the jacobian of the line, sample with respect to X, Y, Z.

        This is a 2x3 matrix. 
        """
        return _rsm.Rsm_image_coordinate_jacobian(self, X, Y, Z)


    def image_coordinate_jac_parm(self, Gc):
        """

        blitz::Array< double, 2 > Rsm::image_coordinate_jac_parm(const GroundCoordinate &Gc) const
        Return the Jacobian of the image coordinates with respect to the
        parameters (what we have is RsmAdjustableParameter object) 
        """
        return _rsm.Rsm_image_coordinate_jac_parm(self, Gc)


    def fit(self, Igc, Min_height, Max_height):
        """

        void Rsm::fit(const ImageGroundConnection &Igc, double Min_height, double
        Max_height)
        Generate a Rsm that approximates the calculation done by a
        ImageGroundConnection. 
        """
        return _rsm.Rsm_fit(self, Igc, Min_height, Max_height)


    def fill_in_ground_domain_vertex(self, Min_height, Max_height):
        """

        void Rsm::fill_in_ground_domain_vertex(double Min_height, double Max_height)
        Fill in the ground domain vertex information.

        Note that you don't normally need to call this directly, the "fit"
        function already does this. But it can be useful in unit testing and
        perhaps other contexts to directly calculate this.

        There is specific requirements about the ordering the vertices (see
        the RSM documentation). We make sure the data is given in this order.

        """
        return _rsm.Rsm_fill_in_ground_domain_vertex(self, Min_height, Max_height)


    def compare_igc(self, Igc, Number_line_spacing, Number_sample_spacing, Height):
        """

        void Rsm::compare_igc(const ImageGroundConnection &Igc, int Number_line_spacing, int
        Number_sample_spacing, double Height, blitz::Array< double, 2 >
        &True_line, blitz::Array< double, 2 > &True_sample, blitz::Array<
        double, 2 > &Calc_line, blitz::Array< double, 2 > &Calc_sample) const
        After fitting an Igc, it is good to see how accurate the Rsm captures
        the Igc.

        This function take an Igc, and fixed height, and generates a regular
        grid of the "True" line and sample. We then project this to the
        surface using the Igc, and then use the Rsm to calculate the line
        sample. If the Rsm is perfect, it would give the same values as
        "True".

        This returns Nan where we can't calculate this (e.g., Igc fails, or
        outside of our RsmGrid).

        This function could just be done in python, but we have it in C++ for
        performance. We may want to adjust what we calculate as we get a
        better feel for how to characterize a Rsm. But this is our initial
        version of this. 
        """
        return _rsm.Rsm_compare_igc(self, Igc, Number_line_spacing, Number_sample_spacing, Height)


    def _v_rsm_id(self):
        """

        const boost::shared_ptr<RsmId>& GeoCal::Rsm::rsm_id() const

        """
        return _rsm.Rsm__v_rsm_id(self)


    @property
    def rsm_id(self):
        return self._v_rsm_id()


    def _v_rsm_direct_covariance(self, *args):
        """

        void GeoCal::Rsm::rsm_direct_covariance(const boost::shared_ptr< RsmDirectCovariance > &V)

        """
        return _rsm.Rsm__v_rsm_direct_covariance(self, *args)


    @property
    def rsm_direct_covariance(self):
        return self._v_rsm_direct_covariance()

    @rsm_direct_covariance.setter
    def rsm_direct_covariance(self, value):
      self._v_rsm_direct_covariance(value)


    def _v_rsm_indirect_covariance(self, *args):
        """

        void GeoCal::Rsm::rsm_indirect_covariance(const boost::shared_ptr< RsmIndirectCovariance > &V)

        """
        return _rsm.Rsm__v_rsm_indirect_covariance(self, *args)


    @property
    def rsm_indirect_covariance(self):
        return self._v_rsm_indirect_covariance()

    @rsm_indirect_covariance.setter
    def rsm_indirect_covariance(self, value):
      self._v_rsm_indirect_covariance(value)


    def _v_rsm_adjustable_parameter(self, *args):
        """

        void GeoCal::Rsm::rsm_adjustable_parameter(const boost::shared_ptr< RsmAdjustableParameter > &V)

        """
        return _rsm.Rsm__v_rsm_adjustable_parameter(self, *args)


    @property
    def rsm_adjustable_parameter(self):
        return self._v_rsm_adjustable_parameter()

    @rsm_adjustable_parameter.setter
    def rsm_adjustable_parameter(self, value):
      self._v_rsm_adjustable_parameter(value)


    def _v_rsm_base(self, *args):
        """

        void GeoCal::Rsm::rsm_base(const boost::shared_ptr< RsmBase > &V)

        """
        return _rsm.Rsm__v_rsm_base(self, *args)


    @property
    def rsm_base(self):
        return self._v_rsm_base()

    @rsm_base.setter
    def rsm_base(self, value):
      self._v_rsm_base(value)


    def _v_coordinate_converter(self, *args):
        """

        void GeoCal::Rsm::coordinate_converter(const boost::shared_ptr< CoordinateConverter > &V)

        """
        return _rsm.Rsm__v_coordinate_converter(self, *args)


    @property
    def coordinate_converter(self):
        return self._v_coordinate_converter()

    @coordinate_converter.setter
    def coordinate_converter(self, value):
      self._v_coordinate_converter(value)


    def _v_image_identifier(self, *args):
        """

        virtual void GeoCal::Rsm::image_identifier(const std::string &V)

        """
        return _rsm.Rsm__v_image_identifier(self, *args)


    @property
    def image_identifier(self):
        return self._v_image_identifier()

    @image_identifier.setter
    def image_identifier(self, value):
      self._v_image_identifier(value)


    def _v_rsm_suport_data_edition(self, *args):
        """

        virtual void GeoCal::Rsm::rsm_suport_data_edition(const std::string &V)

        """
        return _rsm.Rsm__v_rsm_suport_data_edition(self, *args)


    @property
    def rsm_suport_data_edition(self):
        return self._v_rsm_suport_data_edition()

    @rsm_suport_data_edition.setter
    def rsm_suport_data_edition(self, value):
      self._v_rsm_suport_data_edition(value)


    def _v_naif_code(self, *args):
        """

        void GeoCal::Rsm::naif_code(int Naif_code)
        Set the NAIF code for the planet/body we are working with.

        Note that the NITF TRE structure does not have a place to store the
        NAIF code, it implicitly assumes earth. So when we read a TRE, even
        for something like Mars, we have the NAIF code set to earth. We need
        to update this with other metadata (e.g. TARGET_NAME in PDS label).

        This is not a problem for boost serialization (which keeps the NAIF
        code), just for NITF TRE. 
        """
        return _rsm.Rsm__v_naif_code(self, *args)


    @property
    def naif_code(self):
        return self._v_naif_code()

    @naif_code.setter
    def naif_code(self, value):
      self._v_naif_code(value)


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _rsm.delete_Rsm
Rsm.__str__ = new_instancemethod(_rsm.Rsm___str__, None, Rsm)
Rsm.ground_coordinate = new_instancemethod(_rsm.Rsm_ground_coordinate, None, Rsm)
Rsm.polish_intersection = new_instancemethod(_rsm.Rsm_polish_intersection, None, Rsm)
Rsm.ground_coordinate_z = new_instancemethod(_rsm.Rsm_ground_coordinate_z, None, Rsm)
Rsm.ground_coordinate_approx_height = new_instancemethod(_rsm.Rsm_ground_coordinate_approx_height, None, Rsm)
Rsm.image_coordinate = new_instancemethod(_rsm.Rsm_image_coordinate, None, Rsm)
Rsm.image_coordinate_jacobian = new_instancemethod(_rsm.Rsm_image_coordinate_jacobian, None, Rsm)
Rsm.image_coordinate_jac_parm = new_instancemethod(_rsm.Rsm_image_coordinate_jac_parm, None, Rsm)
Rsm.fit = new_instancemethod(_rsm.Rsm_fit, None, Rsm)
Rsm.fill_in_ground_domain_vertex = new_instancemethod(_rsm.Rsm_fill_in_ground_domain_vertex, None, Rsm)
Rsm.compare_igc = new_instancemethod(_rsm.Rsm_compare_igc, None, Rsm)
Rsm._v_rsm_id = new_instancemethod(_rsm.Rsm__v_rsm_id, None, Rsm)
Rsm._v_rsm_direct_covariance = new_instancemethod(_rsm.Rsm__v_rsm_direct_covariance, None, Rsm)
Rsm._v_rsm_indirect_covariance = new_instancemethod(_rsm.Rsm__v_rsm_indirect_covariance, None, Rsm)
Rsm._v_rsm_adjustable_parameter = new_instancemethod(_rsm.Rsm__v_rsm_adjustable_parameter, None, Rsm)
Rsm._v_rsm_base = new_instancemethod(_rsm.Rsm__v_rsm_base, None, Rsm)
Rsm._v_coordinate_converter = new_instancemethod(_rsm.Rsm__v_coordinate_converter, None, Rsm)
Rsm._v_image_identifier = new_instancemethod(_rsm.Rsm__v_image_identifier, None, Rsm)
Rsm._v_rsm_suport_data_edition = new_instancemethod(_rsm.Rsm__v_rsm_suport_data_edition, None, Rsm)
Rsm._v_naif_code = new_instancemethod(_rsm.Rsm__v_naif_code, None, Rsm)
Rsm_swigregister = _rsm.Rsm_swigregister
Rsm_swigregister(Rsm)


__all__ = ["Rsm"]



