# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _rsm_indirect_covariance_b

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rsm_indirect_covariance_b.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rsm_indirect_covariance_b.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _rsm_indirect_covariance_b.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rsm_indirect_covariance_b.delete_SwigPyIterator
    value = _swig_new_instance_method(_rsm_indirect_covariance_b.SwigPyIterator_value)
    incr = _swig_new_instance_method(_rsm_indirect_covariance_b.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_rsm_indirect_covariance_b.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_rsm_indirect_covariance_b.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_rsm_indirect_covariance_b.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_rsm_indirect_covariance_b.SwigPyIterator_copy)
    next = _swig_new_instance_method(_rsm_indirect_covariance_b.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_rsm_indirect_covariance_b.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_rsm_indirect_covariance_b.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_rsm_indirect_covariance_b.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_rsm_indirect_covariance_b.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_rsm_indirect_covariance_b.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_rsm_indirect_covariance_b.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_rsm_indirect_covariance_b.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_rsm_indirect_covariance_b.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_rsm_indirect_covariance_b.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _rsm_indirect_covariance_b:
_rsm_indirect_covariance_b.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _rsm_indirect_covariance_b.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.rsm_indirect_covariance
import geocal_swig.generic_object
import geocal_swig.rsm_adjustable_parameter_b
import geocal_swig.rsm_adjustable_parameter
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class RsmBSubgroup(geocal_swig.generic_object.GenericObject):
    r"""

    This handles a single "independent subgroup", basically a set of
    original parameters that has a given covariance and time behavior.

    C++ includes: rsm_indirect_covariance_b.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::RsmBSubgroup::RsmBSubgroup(const RsmBSubgroup &V)
        GeoCal::RsmBSubgroup::RsmBSubgroup
        """
        _rsm_indirect_covariance_b.RsmBSubgroup_swiginit(self, _rsm_indirect_covariance_b.new_RsmBSubgroup(*args))
    _v_number_parameter = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmBSubgroup__v_number_parameter)

    @property
    def number_parameter(self):
        return self._v_number_parameter()

    _v_is_csm_correlation = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmBSubgroup__v_is_csm_correlation)

    @property
    def is_csm_correlation(self):
        return self._v_is_csm_correlation()

    _v_covariance = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmBSubgroup__v_covariance)

    @property
    def covariance(self):
        return self._v_covariance()

    _v_time_correlation = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmBSubgroup__v_time_correlation)

    @property
    def time_correlation(self):
        return self._v_time_correlation()

    _v_time_correlation_domain_flag = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmBSubgroup__v_time_correlation_domain_flag)

    @property
    def time_correlation_domain_flag(self):
        return self._v_time_correlation_domain_flag()

    __str__ = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmBSubgroup___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _rsm_indirect_covariance_b.delete_RsmBSubgroup

# Register RsmBSubgroup in _rsm_indirect_covariance_b:
_rsm_indirect_covariance_b.RsmBSubgroup_swigregister(RsmBSubgroup)
class RsmBUnmodeledCovariance(geocal_swig.generic_object.GenericObject):
    r"""

    This handles the unmodeled covariance, this is just complicated enough
    to be worth pulling out.

    C++ includes: rsm_indirect_covariance_b.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::RsmBUnmodeledCovariance::RsmBUnmodeledCovariance(const RsmBUnmodeledCovariance &V)
        GeoCal::RsmBUnmodeledCovariance::RsmBUnmodeledCovariance
        """
        _rsm_indirect_covariance_b.RsmBUnmodeledCovariance_swiginit(self, _rsm_indirect_covariance_b.new_RsmBUnmodeledCovariance(*args))
    _v_is_csm_correlation = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmBUnmodeledCovariance__v_is_csm_correlation)

    @property
    def is_csm_correlation(self):
        return self._v_is_csm_correlation()

    _v_covariance = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmBUnmodeledCovariance__v_covariance)

    @property
    def covariance(self):
        return self._v_covariance()

    _v_row_time_correlation = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmBUnmodeledCovariance__v_row_time_correlation)

    @property
    def row_time_correlation(self):
        return self._v_row_time_correlation()

    _v_col_time_correlation = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmBUnmodeledCovariance__v_col_time_correlation)

    @property
    def col_time_correlation(self):
        return self._v_col_time_correlation()

    __str__ = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmBUnmodeledCovariance___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _rsm_indirect_covariance_b.delete_RsmBUnmodeledCovariance

# Register RsmBUnmodeledCovariance in _rsm_indirect_covariance_b:
_rsm_indirect_covariance_b.RsmBUnmodeledCovariance_swigregister(RsmBUnmodeledCovariance)
class RsmIndirectCovarianceB(geocal_swig.rsm_indirect_covariance.RsmIndirectCovariance, geocal_swig.rsm_adjustable_parameter_b.RsmBParameterDesc):
    r"""

    This is used to handle the RSM indirect covariance.

    This supports RSMECB.

    C++ includes: rsm_indirect_covariance_b.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::RsmIndirectCovarianceB::RsmIndirectCovarianceB(const std::string &Image_identifier="", const std::string
        &Rsm_support_data_edition="fake-1", const std::string
        &Triangulation_id="")
        GeoCal::RsmIndirectCovarianceB::RsmIndirectCovarianceB
        """
        _rsm_indirect_covariance_b.RsmIndirectCovarianceB_swiginit(self, _rsm_indirect_covariance_b.new_RsmIndirectCovarianceB(*args))
    tre_string = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmIndirectCovarianceB_tre_string)
    read_tre_string = _swig_new_static_method(_rsm_indirect_covariance_b.RsmIndirectCovarianceB_read_tre_string)
    _v_covariance_version_date = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmIndirectCovarianceB__v_covariance_version_date)

    @property
    def covariance_version_date(self):
        return self._v_covariance_version_date()

    @covariance_version_date.setter
    def covariance_version_date(self, value):
      self._v_covariance_version_date(value)

    _v_has_indirect_error_covariance = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmIndirectCovarianceB__v_has_indirect_error_covariance)

    @property
    def has_indirect_error_covariance(self):
        return self._v_has_indirect_error_covariance()

    _v_has_unmodeled_error_covariance = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmIndirectCovarianceB__v_has_unmodeled_error_covariance)

    @property
    def has_unmodeled_error_covariance(self):
        return self._v_has_unmodeled_error_covariance()

    _v_number_original_parameter = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmIndirectCovarianceB__v_number_original_parameter)

    @property
    def number_original_parameter(self):
        return self._v_number_original_parameter()

    _v_subgroup = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmIndirectCovarianceB__v_subgroup)

    @property
    def subgroup(self):
        return self._v_subgroup()

    @subgroup.setter
    def subgroup(self, value):
      self._v_subgroup(value)

    _v_mapping_matrix = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmIndirectCovarianceB__v_mapping_matrix)

    @property
    def mapping_matrix(self):
        return self._v_mapping_matrix()

    @mapping_matrix.setter
    def mapping_matrix(self, value):
      self._v_mapping_matrix(value)

    _v_unmodeled_covariance = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmIndirectCovarianceB__v_unmodeled_covariance)

    @property
    def unmodeled_covariance(self):
        return self._v_unmodeled_covariance()

    @unmodeled_covariance.setter
    def unmodeled_covariance(self, value):
      self._v_unmodeled_covariance(value)

    subgroup_i = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmIndirectCovarianceB_subgroup_i)
    add_subgroup = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmIndirectCovarianceB_add_subgroup)
    check_consistent = _swig_new_instance_method(_rsm_indirect_covariance_b.RsmIndirectCovarianceB_check_consistent)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _rsm_indirect_covariance_b.delete_RsmIndirectCovarianceB

# Register RsmIndirectCovarianceB in _rsm_indirect_covariance_b:
_rsm_indirect_covariance_b.RsmIndirectCovarianceB_swigregister(RsmIndirectCovarianceB)
class Vector_RsmBSubgroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup___nonzero__)
    __bool__ = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup___bool__)
    __len__ = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup___len__)
    __getslice__ = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup___getslice__)
    __setslice__ = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup___setslice__)
    __delslice__ = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup___delslice__)
    __delitem__ = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup___delitem__)
    __getitem__ = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup___getitem__)
    __setitem__ = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup___setitem__)
    pop = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_pop)
    append = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_append)
    empty = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_empty)
    size = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_size)
    swap = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_swap)
    begin = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_begin)
    end = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_end)
    rbegin = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_rbegin)
    rend = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_rend)
    clear = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_clear)
    get_allocator = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_get_allocator)
    pop_back = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_pop_back)
    erase = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_erase)

    def __init__(self, *args):
        _rsm_indirect_covariance_b.Vector_RsmBSubgroup_swiginit(self, _rsm_indirect_covariance_b.new_Vector_RsmBSubgroup(*args))
    push_back = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_push_back)
    front = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_front)
    back = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_back)
    assign = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_assign)
    resize = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_resize)
    insert = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_insert)
    reserve = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_reserve)
    capacity = _swig_new_instance_method(_rsm_indirect_covariance_b.Vector_RsmBSubgroup_capacity)
    __swig_destroy__ = _rsm_indirect_covariance_b.delete_Vector_RsmBSubgroup

# Register Vector_RsmBSubgroup in _rsm_indirect_covariance_b:
_rsm_indirect_covariance_b.Vector_RsmBSubgroup_swigregister(Vector_RsmBSubgroup)

__all__ = ["RsmIndirectCovarianceB","RsmBSubgroup","Vector_RsmBSubgroup","RsmBUnmodeledCovariance"]


