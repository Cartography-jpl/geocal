# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _orbit_offset_correction

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _orbit_offset_correction.SWIG_PyInstanceMethod_New
_swig_new_static_method = _orbit_offset_correction.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _orbit_offset_correction.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _orbit_offset_correction.delete_SwigPyIterator
    value = _swig_new_instance_method(_orbit_offset_correction.SwigPyIterator_value)
    incr = _swig_new_instance_method(_orbit_offset_correction.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_orbit_offset_correction.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_orbit_offset_correction.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_orbit_offset_correction.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_orbit_offset_correction.SwigPyIterator_copy)
    next = _swig_new_instance_method(_orbit_offset_correction.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_orbit_offset_correction.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_orbit_offset_correction.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_orbit_offset_correction.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_orbit_offset_correction.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_orbit_offset_correction.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_orbit_offset_correction.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_orbit_offset_correction.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_orbit_offset_correction.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_orbit_offset_correction.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _orbit_offset_correction:
_orbit_offset_correction.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _orbit_offset_correction.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.orbit_correction
import geocal_swig.orbit
import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.with_parameter
import geocal_swig.look_vector
class OrbitOffsetCorrection(geocal_swig.orbit_correction.OrbitCorrection):
    r"""

    This class gives an orbit that tries to correct errors in another
    underlying orbit.

    This uses a simple error model which captures a common set of orbit
    errors.

    A time dependent correction is added to the position of the orbit.
    This correction supplies a correction at fixed time values. For times
    in between, we interpolate the position correction.

    A time dependent correction is added to the spacecraft to Cartesian
    inertial system. This correction supplies a yaw, pitch, and roll
    correction at fixed time values. For times in between we interpolate
    the quaternion correction. Note that in general the time points used
    in the attitude correction do not match the time points used in the
    position correction.

    The position offset is in meters. Right now, the attitude correction
    is in arcseconds. We may change that.

    The velocity is left unchanged.

    The underlying orbit should return a QuaternionOrbitData orbit data,
    since this is currently the only type supported.

    C++ includes: orbit_offset_correction.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Orb_uncorr, Outside_is_error=False, Use_local_north_coordinate=False, Fit_position_x=True, Fit_position_y=True, Fit_position_z=True, Fit_yaw=True, Fit_pitch=True, Fit_roll=True):
        r"""

        OrbitOffsetCorrection::OrbitOffsetCorrection(const boost::shared_ptr< Orbit > Orb_uncorr, bool
        Outside_is_error=false, bool Use_local_north_coordinate=false, bool
        Fit_position_x=true, bool Fit_position_y=true, bool
        Fit_position_z=true, bool Fit_yaw=true, bool Fit_pitch=true, bool
        Fit_roll=true)
        Constructor.

        This has no time points for doing corrections, but you can add those
        using insert_time_point. 
        """
        _orbit_offset_correction.OrbitOffsetCorrection_swiginit(self, _orbit_offset_correction.new_OrbitOffsetCorrection(Orb_uncorr, Outside_is_error, Use_local_north_coordinate, Fit_position_x, Fit_position_y, Fit_position_z, Fit_yaw, Fit_pitch, Fit_roll))
    _v_outside_is_error = _swig_new_instance_method(_orbit_offset_correction.OrbitOffsetCorrection__v_outside_is_error)

    @property
    def outside_is_error(self):
        return self._v_outside_is_error()

    @outside_is_error.setter
    def outside_is_error(self, value):
      self._v_outside_is_error(value)

    _v_fit_position_x = _swig_new_instance_method(_orbit_offset_correction.OrbitOffsetCorrection__v_fit_position_x)

    @property
    def fit_position_x(self):
        return self._v_fit_position_x()

    @fit_position_x.setter
    def fit_position_x(self, value):
      self._v_fit_position_x(value)

    _v_fit_position_y = _swig_new_instance_method(_orbit_offset_correction.OrbitOffsetCorrection__v_fit_position_y)

    @property
    def fit_position_y(self):
        return self._v_fit_position_y()

    @fit_position_y.setter
    def fit_position_y(self, value):
      self._v_fit_position_y(value)

    _v_fit_position_z = _swig_new_instance_method(_orbit_offset_correction.OrbitOffsetCorrection__v_fit_position_z)

    @property
    def fit_position_z(self):
        return self._v_fit_position_z()

    @fit_position_z.setter
    def fit_position_z(self, value):
      self._v_fit_position_z(value)

    _v_fit_position_e = _swig_new_instance_method(_orbit_offset_correction.OrbitOffsetCorrection__v_fit_position_e)

    @property
    def fit_position_e(self):
        return self._v_fit_position_e()

    @fit_position_e.setter
    def fit_position_e(self, value):
      self._v_fit_position_e(value)

    _v_fit_position_n = _swig_new_instance_method(_orbit_offset_correction.OrbitOffsetCorrection__v_fit_position_n)

    @property
    def fit_position_n(self):
        return self._v_fit_position_n()

    @fit_position_n.setter
    def fit_position_n(self, value):
      self._v_fit_position_n(value)

    _v_fit_position_u = _swig_new_instance_method(_orbit_offset_correction.OrbitOffsetCorrection__v_fit_position_u)

    @property
    def fit_position_u(self):
        return self._v_fit_position_u()

    @fit_position_u.setter
    def fit_position_u(self, value):
      self._v_fit_position_u(value)

    _v_use_local_north_coordinate = _swig_new_instance_method(_orbit_offset_correction.OrbitOffsetCorrection__v_use_local_north_coordinate)

    @property
    def use_local_north_coordinate(self):
        return self._v_use_local_north_coordinate()

    @use_local_north_coordinate.setter
    def use_local_north_coordinate(self, value):
      self._v_use_local_north_coordinate(value)

    _v_fit_yaw = _swig_new_instance_method(_orbit_offset_correction.OrbitOffsetCorrection__v_fit_yaw)

    @property
    def fit_yaw(self):
        return self._v_fit_yaw()

    @fit_yaw.setter
    def fit_yaw(self, value):
      self._v_fit_yaw(value)

    _v_fit_pitch = _swig_new_instance_method(_orbit_offset_correction.OrbitOffsetCorrection__v_fit_pitch)

    @property
    def fit_pitch(self):
        return self._v_fit_pitch()

    @fit_pitch.setter
    def fit_pitch(self, value):
      self._v_fit_pitch(value)

    _v_fit_roll = _swig_new_instance_method(_orbit_offset_correction.OrbitOffsetCorrection__v_fit_roll)

    @property
    def fit_roll(self):
        return self._v_fit_roll()

    @fit_roll.setter
    def fit_roll(self, value):
      self._v_fit_roll(value)

    update_quaterion = _swig_new_instance_method(_orbit_offset_correction.OrbitOffsetCorrection_update_quaterion)
    insert_attitude_time_point = _swig_new_instance_method(_orbit_offset_correction.OrbitOffsetCorrection_insert_attitude_time_point)
    insert_position_time_point = _swig_new_instance_method(_orbit_offset_correction.OrbitOffsetCorrection_insert_position_time_point)
    orbit_correction_parameter = _swig_new_instance_method(_orbit_offset_correction.OrbitOffsetCorrection_orbit_correction_parameter)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _orbit_offset_correction.delete_OrbitOffsetCorrection

# Register OrbitOffsetCorrection in _orbit_offset_correction:
_orbit_offset_correction.OrbitOffsetCorrection_swigregister(OrbitOffsetCorrection)

__all__ = ["OrbitOffsetCorrection"]


