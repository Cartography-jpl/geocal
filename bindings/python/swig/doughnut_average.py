# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _doughnut_average

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _doughnut_average.SWIG_PyInstanceMethod_New
_swig_new_static_method = _doughnut_average.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _doughnut_average.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _doughnut_average.delete_SwigPyIterator
    value = _swig_new_instance_method(_doughnut_average.SwigPyIterator_value)
    incr = _swig_new_instance_method(_doughnut_average.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_doughnut_average.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_doughnut_average.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_doughnut_average.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_doughnut_average.SwigPyIterator_copy)
    next = _swig_new_instance_method(_doughnut_average.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_doughnut_average.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_doughnut_average.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_doughnut_average.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_doughnut_average.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_doughnut_average.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_doughnut_average.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_doughnut_average.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_doughnut_average.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_doughnut_average.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _doughnut_average:
_doughnut_average.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _doughnut_average.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.calc_raster_multi_band
import geocal_swig.raster_image_multi_band_variable
import geocal_swig.raster_image_multi_band
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
import geocal_swig.calc_raster
import geocal_swig.raster_image_variable
class DoughnutAverage(geocal_swig.calc_raster_multi_band.CalcRasterMultiBand):
    r"""

    This class does a "doughnut average" of an underlying RasterImage.

    This produces the average value of all the pixels in a given window
    size, excluding a smaller doughnut. We exclude all points that a value
    of 0 in the average (e.g., the normal gore used in VICAR images), as
    well as all points that are beyond the edge of the image. We also
    preserve gore, so if a point has a value of 0 in any of the bands then
    we set the doughnut average to 0 for that point.

    Depending on the application, you may or may not want to include
    points that have gore within the doughnut window. You can specify this
    in the constructor. If "Allow_gore" is true, then any point other
    than the center can be gore and we just exclude it from the average.
    If "Allow_gore" is false, we set a value to 0 if any value in the
    window is 0. In all cases, we set a value to 0 if the center is 0.

    This is one of the building block used to do the "cvdnorm", you can
    consult that program for details. But basically this is used to
    examine small features (smaller than the doughnut whole) that are
    significantly different than the nearby background.

    C++ includes: doughnut_average.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Rimg, Window_size=11, Doughnut_size=5, Allow_gore=True, Tile_number_line=-1, Tile_number_sample=-1):
        r"""

        DoughnutAverage::DoughnutAverage(const boost::shared_ptr< RasterImageMultiBand > &Rimg, int
        Window_size=11, int Doughnut_size=5, bool Allow_gore=true, int
        Number_tile_line=-1, int Number_tile_sample=-1, int Number_tile=4)
        Constructor.

        Parameters:
        -----------

        Rimg:  The underlying image we are producing the average for.

        Window_size:  The window size we are averaging. Should be odd number.

        Doughnut_size:  The doughnut we are excluding in the average. Should
        be odd, and < Window_size.

        Allow_gore:  If "Allow_gore" is true, then any point other than the
        center can be gore and we just exclude it from the average. If
        "Allow_gore" is false, we set a value to 0 if any value in the
        window is 0. In all cases, we set a value to 0 if the center

        Number_tile_line:  Number of lines in each tile

        Number_tile_sample:  Number of samples in each tile

        Number_tile:  Number of tiles to use 
        """
        _doughnut_average.DoughnutAverage_swiginit(self, _doughnut_average.new_DoughnutAverage(Rimg, Window_size, Doughnut_size, Allow_gore, Tile_number_line, Tile_number_sample))
    cvdnorm = _swig_new_instance_method(_doughnut_average.DoughnutAverage_cvdnorm)
    pandif = _swig_new_instance_method(_doughnut_average.DoughnutAverage_pandif)
    _v_window_size = _swig_new_instance_method(_doughnut_average.DoughnutAverage__v_window_size)

    @property
    def window_size(self):
        return self._v_window_size()

    _v_doughnut_size = _swig_new_instance_method(_doughnut_average.DoughnutAverage__v_doughnut_size)

    @property
    def doughnut_size(self):
        return self._v_doughnut_size()

    _v_allow_gore = _swig_new_instance_method(_doughnut_average.DoughnutAverage__v_allow_gore)

    @property
    def allow_gore(self):
        return self._v_allow_gore()

    _v_underlying_image = _swig_new_instance_method(_doughnut_average.DoughnutAverage__v_underlying_image)

    @property
    def underlying_image(self):
        return self._v_underlying_image()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _doughnut_average.delete_DoughnutAverage

# Register DoughnutAverage in _doughnut_average:
_doughnut_average.DoughnutAverage_swigregister(DoughnutAverage)
class RasterImageWrapCvdNorm(geocal_swig.calc_raster.CalcRaster):
    r"""

    C++ includes: doughnut_average.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Davg, Band):
        r"""

        GeoCal::RasterImageWrapCvdNorm::RasterImageWrapCvdNorm(const boost::shared_ptr< DoughnutAverage > &Davg, int Band)

        """
        _doughnut_average.RasterImageWrapCvdNorm_swiginit(self, _doughnut_average.new_RasterImageWrapCvdNorm(Davg, Band))
    _v_band = _swig_new_instance_method(_doughnut_average.RasterImageWrapCvdNorm__v_band)

    @property
    def band(self):
        return self._v_band()

    _v_davg = _swig_new_instance_method(_doughnut_average.RasterImageWrapCvdNorm__v_davg)

    @property
    def davg(self):
        return self._v_davg()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _doughnut_average.delete_RasterImageWrapCvdNorm

# Register RasterImageWrapCvdNorm in _doughnut_average:
_doughnut_average.RasterImageWrapCvdNorm_swigregister(RasterImageWrapCvdNorm)
class RasterImageWrapPandif(geocal_swig.calc_raster.CalcRaster):
    r"""

    C++ includes: doughnut_average.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Davg):
        r"""

        GeoCal::RasterImageWrapPandif::RasterImageWrapPandif(const boost::shared_ptr< DoughnutAverage > &Davg)

        """
        _doughnut_average.RasterImageWrapPandif_swiginit(self, _doughnut_average.new_RasterImageWrapPandif(Davg))
    _v_davg = _swig_new_instance_method(_doughnut_average.RasterImageWrapPandif__v_davg)

    @property
    def davg(self):
        return self._v_davg()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _doughnut_average.delete_RasterImageWrapPandif

# Register RasterImageWrapPandif in _doughnut_average:
_doughnut_average.RasterImageWrapPandif_swigregister(RasterImageWrapPandif)

__all__ = ["DoughnutAverage","RasterImageWrapPandif","RasterImageWrapCvdNorm"]


