# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _orbit_array

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _orbit_array.SWIG_PyInstanceMethod_New
_swig_new_static_method = _orbit_array.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _orbit_array.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _orbit_array.delete_SwigPyIterator
    value = _swig_new_instance_method(_orbit_array.SwigPyIterator_value)
    incr = _swig_new_instance_method(_orbit_array.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_orbit_array.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_orbit_array.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_orbit_array.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_orbit_array.SwigPyIterator_copy)
    next = _swig_new_instance_method(_orbit_array.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_orbit_array.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_orbit_array.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_orbit_array.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_orbit_array.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_orbit_array.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_orbit_array.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_orbit_array.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_orbit_array.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_orbit_array.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _orbit_array:
_orbit_array.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _orbit_array.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.orbit_quaternion_list
import geocal_swig.orbit
import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.with_parameter
import geocal_swig.look_vector
class OrbitArray_EciTod_TimeAcs(geocal_swig.orbit_quaternion_list.OrbitQuaternionList):
    r"""

    This is an implementation of an Orbit that is directly given an arrays
    with time, position, velocity:

    Attitude_time - natt in size, time of attitude measurement as doubles.
    Attitude_quaternion - natt x 4 in size, quaternion to take same
    coordinate system as Position (e.g., ECI) Ephemeris_time - neph in
    size, time of ephemeris measurement as doubles Ephemeris_position -
    neph x 3 in size, position measurement as doubles in meters
    Ephemeris_velocity - neph x 3 in size, velocity measurement as doubles
    in meter/second Because it is useful, we allow the type of position
    measurement and time to be changed. The measurement class is passed
    in, e.g., Eci, as is a small wrapper to give the conversion to Time.

    The Attitude is always assumed to have the real part first, like boost
    library uses. We could probably add an option to change this if
    needed, but for now this is always the case.

    By default, the reported attitude goes from the spacecraft to the
    reference frame (e.g., ECI). However, you can optionally specify that
    the attitude goes in the other direction.

    Derived classes may have a way to populate the data (e.g. HdfOrbit),
    so an additional field indicates if the class should serialize this
    data itself or let the derived object handle this (e.g. HdfOrbit
    stores a file name, and gets the data from that file).

    C++ includes: orbit_array.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Eph_time, Eph_pos, Eph_vel, Att_time, Att_quat, Att_from_sc_to_ref_frame=True, Serialize_data=True):
        r"""

        GeoCal::OrbitArray< PositionType, TimeCreatorType >::OrbitArray(const blitz::Array< double, 1 > &Eph_time, const blitz::Array<
        double, 2 > &Eph_pos, const blitz::Array< double, 2 > &Eph_vel, const
        blitz::Array< double, 1 > &Att_time, const blitz::Array< double, 2 >
        &Att_quat, bool Att_from_sc_to_ref_frame=true, bool
        Serialize_data=true)

        """
        _orbit_array.OrbitArray_EciTod_TimeAcs_swiginit(self, _orbit_array.new_OrbitArray_EciTod_TimeAcs(Eph_time, Eph_pos, Eph_vel, Att_time, Att_quat, Att_from_sc_to_ref_frame, Serialize_data))

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _orbit_array.delete_OrbitArray_EciTod_TimeAcs

# Register OrbitArray_EciTod_TimeAcs in _orbit_array:
_orbit_array.OrbitArray_EciTod_TimeAcs_swigregister(OrbitArray_EciTod_TimeAcs)
class OrbitArray_Eci_TimePgs(geocal_swig.orbit_quaternion_list.OrbitQuaternionList):
    r"""

    This is an implementation of an Orbit that is directly given an arrays
    with time, position, velocity:

    Attitude_time - natt in size, time of attitude measurement as doubles.
    Attitude_quaternion - natt x 4 in size, quaternion to take same
    coordinate system as Position (e.g., ECI) Ephemeris_time - neph in
    size, time of ephemeris measurement as doubles Ephemeris_position -
    neph x 3 in size, position measurement as doubles in meters
    Ephemeris_velocity - neph x 3 in size, velocity measurement as doubles
    in meter/second Because it is useful, we allow the type of position
    measurement and time to be changed. The measurement class is passed
    in, e.g., Eci, as is a small wrapper to give the conversion to Time.

    The Attitude is always assumed to have the real part first, like boost
    library uses. We could probably add an option to change this if
    needed, but for now this is always the case.

    By default, the reported attitude goes from the spacecraft to the
    reference frame (e.g., ECI). However, you can optionally specify that
    the attitude goes in the other direction.

    Derived classes may have a way to populate the data (e.g. HdfOrbit),
    so an additional field indicates if the class should serialize this
    data itself or let the derived object handle this (e.g. HdfOrbit
    stores a file name, and gets the data from that file).

    C++ includes: orbit_array.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Eph_time, Eph_pos, Eph_vel, Att_time, Att_quat, Att_from_sc_to_ref_frame=True, Serialize_data=True):
        r"""

        GeoCal::OrbitArray< PositionType, TimeCreatorType >::OrbitArray(const blitz::Array< double, 1 > &Eph_time, const blitz::Array<
        double, 2 > &Eph_pos, const blitz::Array< double, 2 > &Eph_vel, const
        blitz::Array< double, 1 > &Att_time, const blitz::Array< double, 2 >
        &Att_quat, bool Att_from_sc_to_ref_frame=true, bool
        Serialize_data=true)

        """
        _orbit_array.OrbitArray_Eci_TimePgs_swiginit(self, _orbit_array.new_OrbitArray_Eci_TimePgs(Eph_time, Eph_pos, Eph_vel, Att_time, Att_quat, Att_from_sc_to_ref_frame, Serialize_data))

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _orbit_array.delete_OrbitArray_Eci_TimePgs

# Register OrbitArray_Eci_TimePgs in _orbit_array:
_orbit_array.OrbitArray_Eci_TimePgs_swigregister(OrbitArray_Eci_TimePgs)
class OrbitArray_Eci_TimeJ2000(geocal_swig.orbit_quaternion_list.OrbitQuaternionList):
    r"""

    This is an implementation of an Orbit that is directly given an arrays
    with time, position, velocity:

    Attitude_time - natt in size, time of attitude measurement as doubles.
    Attitude_quaternion - natt x 4 in size, quaternion to take same
    coordinate system as Position (e.g., ECI) Ephemeris_time - neph in
    size, time of ephemeris measurement as doubles Ephemeris_position -
    neph x 3 in size, position measurement as doubles in meters
    Ephemeris_velocity - neph x 3 in size, velocity measurement as doubles
    in meter/second Because it is useful, we allow the type of position
    measurement and time to be changed. The measurement class is passed
    in, e.g., Eci, as is a small wrapper to give the conversion to Time.

    The Attitude is always assumed to have the real part first, like boost
    library uses. We could probably add an option to change this if
    needed, but for now this is always the case.

    By default, the reported attitude goes from the spacecraft to the
    reference frame (e.g., ECI). However, you can optionally specify that
    the attitude goes in the other direction.

    Derived classes may have a way to populate the data (e.g. HdfOrbit),
    so an additional field indicates if the class should serialize this
    data itself or let the derived object handle this (e.g. HdfOrbit
    stores a file name, and gets the data from that file).

    C++ includes: orbit_array.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Eph_time, Eph_pos, Eph_vel, Att_time, Att_quat, Att_from_sc_to_ref_frame=True, Serialize_data=True):
        r"""

        GeoCal::OrbitArray< PositionType, TimeCreatorType >::OrbitArray(const blitz::Array< double, 1 > &Eph_time, const blitz::Array<
        double, 2 > &Eph_pos, const blitz::Array< double, 2 > &Eph_vel, const
        blitz::Array< double, 1 > &Att_time, const blitz::Array< double, 2 >
        &Att_quat, bool Att_from_sc_to_ref_frame=true, bool
        Serialize_data=true)

        """
        _orbit_array.OrbitArray_Eci_TimeJ2000_swiginit(self, _orbit_array.new_OrbitArray_Eci_TimeJ2000(Eph_time, Eph_pos, Eph_vel, Att_time, Att_quat, Att_from_sc_to_ref_frame, Serialize_data))

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _orbit_array.delete_OrbitArray_Eci_TimeJ2000

# Register OrbitArray_Eci_TimeJ2000 in _orbit_array:
_orbit_array.OrbitArray_Eci_TimeJ2000_swigregister(OrbitArray_Eci_TimeJ2000)
class OrbitArray_EciTod_TimeJ2000(geocal_swig.orbit_quaternion_list.OrbitQuaternionList):
    r"""

    This is an implementation of an Orbit that is directly given an arrays
    with time, position, velocity:

    Attitude_time - natt in size, time of attitude measurement as doubles.
    Attitude_quaternion - natt x 4 in size, quaternion to take same
    coordinate system as Position (e.g., ECI) Ephemeris_time - neph in
    size, time of ephemeris measurement as doubles Ephemeris_position -
    neph x 3 in size, position measurement as doubles in meters
    Ephemeris_velocity - neph x 3 in size, velocity measurement as doubles
    in meter/second Because it is useful, we allow the type of position
    measurement and time to be changed. The measurement class is passed
    in, e.g., Eci, as is a small wrapper to give the conversion to Time.

    The Attitude is always assumed to have the real part first, like boost
    library uses. We could probably add an option to change this if
    needed, but for now this is always the case.

    By default, the reported attitude goes from the spacecraft to the
    reference frame (e.g., ECI). However, you can optionally specify that
    the attitude goes in the other direction.

    Derived classes may have a way to populate the data (e.g. HdfOrbit),
    so an additional field indicates if the class should serialize this
    data itself or let the derived object handle this (e.g. HdfOrbit
    stores a file name, and gets the data from that file).

    C++ includes: orbit_array.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Eph_time, Eph_pos, Eph_vel, Att_time, Att_quat, Att_from_sc_to_ref_frame=True, Serialize_data=True):
        r"""

        GeoCal::OrbitArray< PositionType, TimeCreatorType >::OrbitArray(const blitz::Array< double, 1 > &Eph_time, const blitz::Array<
        double, 2 > &Eph_pos, const blitz::Array< double, 2 > &Eph_vel, const
        blitz::Array< double, 1 > &Att_time, const blitz::Array< double, 2 >
        &Att_quat, bool Att_from_sc_to_ref_frame=true, bool
        Serialize_data=true)

        """
        _orbit_array.OrbitArray_EciTod_TimeJ2000_swiginit(self, _orbit_array.new_OrbitArray_EciTod_TimeJ2000(Eph_time, Eph_pos, Eph_vel, Att_time, Att_quat, Att_from_sc_to_ref_frame, Serialize_data))

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _orbit_array.delete_OrbitArray_EciTod_TimeJ2000

# Register OrbitArray_EciTod_TimeJ2000 in _orbit_array:
_orbit_array.OrbitArray_EciTod_TimeJ2000_swigregister(OrbitArray_EciTod_TimeJ2000)

__all__ = ["OrbitArray_EciTod_TimeAcs","OrbitArray_Eci_TimePgs","OrbitArray_Eci_TimeJ2000","OrbitArray_EciTod_TimeJ2000"]


