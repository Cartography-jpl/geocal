#! /usr/bin/env python
#
# This sets up a RasterImage into a shelve.

import geocal

version = "October 29, 2013"
usage='''Usage: 
  shelve_image [options] <image> <output>
  shelve_image [options] --subset <start_line> <start_sample>
      <number_line> <number_sample> <image> <output>
  shelve_image -h | --help
  shelve_image -v | --version

This program is used to setup a image as a sqlite shelve object. The
output should be in the "file:key" format, e.g., "my_data.db:image".

Options:
  -h --help         
       Print this message

  -b --band=b
       Band of file to use (1 based). [default: 1]

  --average=n
       Average nxn to get a single pixel - useful for taking high resolution
       data to lower resolution.

  --from-shelve
       Instead of getting image from a file, get it from a shelve object.
       This should be in a "file:key" format. This might be useful if
       you use further options such as --subset.

  --force-map-info=f
        Force the given mapinfo to be applied to the image. Only works
        for VICAR files.

  --multi-band
        Specify this is the image is actually multiple bands.  

  --scale=f
        Scale the data by the given factor.

  --subset  start_line start_sample number_line number_sample
       Subset the image.

  -v --version      
       Print program version
'''

args = geocal.docopt_simple(usage, version=version)

if(args.from_shelve):
    img = geocal.read_shelve(args.image)
elif(args.multi_band):
    # Leverage off of VicarImageGroundConnection, even though we don't care
    # about the rpc.
    if(geocal.VicarImageGroundConnection.is_vicar_file(args.image)):
        img = geocal.VicarImageGroundConnection(args.image, geocal.SimpleDem()).image_multi_band
        if(not img):
            img = geocal.RasterImageMultiBandVariable()
            img.add_raster_image(geocal.VicarLiteRasterImage(args.image))
    else:
        img = geocal.GdalMultiBand(args.image)
elif geocal.VicarLiteFile.is_vicar_file(args.image):
    if(args.force_map_info):
        mi = geocal.read_shelve(args.force_map_info)
        img = geocal.VicarLiteRasterImage(args.image, mi, args.band)
    else:
        img = geocal.VicarLiteRasterImage(args.image, args.band)
else:
    img = geocal.GdalRasterImage(args.image, args.band)
if(args.start_line):
    if(isinstance(img, geocal.RasterImageMultiBand)):
        img = geocal.SubRasterImageMultiBand(img, args.start_line, args.start_sample,
                                      args.number_line, args.number_sample)
    else:
        img = geocal.SubRasterImage(img, args.start_line, args.start_sample,
                             args.number_line, args.number_sample)

if(args.average):
    if(isinstance(img, geocal.RasterImageMultiBand)):
        raise RuntimeError("We don't support averaging yet for RasterImageMultiBand")
    else:
        img = geocal.RasterAveraged(img, args.average, args.average)
if(args.scale):
    if(isinstance(img, geocal.RasterImageMultiBand)):
        img = geocal.ScaleImageMultiBand(img, args.scale)
    else:
        img = geocal.ScaleImage(img, args.scale)

geocal.write_shelve(args.output, img)



