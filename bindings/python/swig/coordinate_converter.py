# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _coordinate_converter.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_coordinate_converter')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_coordinate_converter')
    _coordinate_converter = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_coordinate_converter', [dirname(__file__)])
        except ImportError:
            import _coordinate_converter
            return _coordinate_converter
        try:
            _mod = imp.load_module('_coordinate_converter', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _coordinate_converter = swig_import_helper()
    del swig_import_helper
else:
    import _coordinate_converter
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coordinate_converter.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_coordinate_converter.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_coordinate_converter.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_coordinate_converter.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_coordinate_converter.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_coordinate_converter.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_coordinate_converter.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_coordinate_converter.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_coordinate_converter.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_coordinate_converter.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_coordinate_converter.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_coordinate_converter.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_coordinate_converter.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_coordinate_converter.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_coordinate_converter.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_coordinate_converter.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_coordinate_converter.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _coordinate_converter.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _coordinate_converter.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
class CoordinateConverter(geocal_swig.generic_object.GenericObject):
    """

    This class is used to convert from and to a particular coordinate
    system.

    There are some functions that can work equal well with any map
    coordinate system, and where we want the decision of what coordinate
    system to be made outside of the function (e.g., the program
    map_project, where the user selects the coordinate system to map
    project to).

    The solution we use here is to make use of the Strategy pattern (see
    "Design Patterns" by Erich Gamma et. al.). This class is the base
    class defining the interface to a general coordinate convertor.

    This class allows conversion to and from whatever coordinate system
    has been selected. The meaning of the X, Y, and Z value passed in and
    out of the functions depends on what concrete specialization of this
    class is used. For uses where the ambiguity isn't acceptable, it is
    not appropriate to use this class (i.e., the various Strategies of
    coordinate conversions aren't really exchangeable then).

    C++ includes: coordinate_converter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    EARTH_NAIF_CODE = _coordinate_converter.CoordinateConverter_EARTH_NAIF_CODE

    def convert_from_coordinate(self, X, Y, Z=0):
        """

        virtual boost::shared_ptr<GroundCoordinate> GeoCal::CoordinateConverter::convert_from_coordinate(double X, double Y, double Z=0) const =0
        This converts from a particular coordinate system, returning a ground
        coordinate for the given coordinates.

        The specific meaning and units of X, Y, and Z depend on which
        coordinates system is used by a specialization of this class. 
        """
        return _coordinate_converter.CoordinateConverter_convert_from_coordinate(self, X, Y, Z)


    def convert_to_coordinate(self, Gc):
        """

        virtual void GeoCal::CoordinateConverter::convert_to_coordinate(const Geodetic &Gc, double &X, double &Y, double &Z) const =0
        Specialization that converts from Geodetic.

        Because much of our data is in Geodetic coordinates this is an
        important performance specialization. 
        """
        return _coordinate_converter.CoordinateConverter_convert_to_coordinate(self, Gc)


    def _v_naif_code(self):
        """

        virtual int GeoCal::CoordinateConverter::naif_code() const
        Naif code for planet. 
        """
        return _coordinate_converter.CoordinateConverter__v_naif_code(self)


    @property
    def naif_code(self):
        return self._v_naif_code()


    def create(self, Gc):
        """

        virtual boost::shared_ptr<GroundCoordinate> GeoCal::CoordinateConverter::create(const GroundCoordinate &Gc) const
        Convert and create a coordinate. 
        """
        return _coordinate_converter.CoordinateConverter_create(self, Gc)


    def is_same(self, Conv):
        """

        virtual bool GeoCal::CoordinateConverter::is_same(const CoordinateConverter &Conv) const =0
        Test if two CoordinateConverters are the same coordinate system. 
        """
        return _coordinate_converter.CoordinateConverter_is_same(self, Conv)

    __swig_destroy__ = _coordinate_converter.delete_CoordinateConverter
CoordinateConverter.convert_from_coordinate = new_instancemethod(_coordinate_converter.CoordinateConverter_convert_from_coordinate, None, CoordinateConverter)
CoordinateConverter.convert_to_coordinate = new_instancemethod(_coordinate_converter.CoordinateConverter_convert_to_coordinate, None, CoordinateConverter)
CoordinateConverter._v_naif_code = new_instancemethod(_coordinate_converter.CoordinateConverter__v_naif_code, None, CoordinateConverter)
CoordinateConverter.create = new_instancemethod(_coordinate_converter.CoordinateConverter_create, None, CoordinateConverter)
CoordinateConverter.is_same = new_instancemethod(_coordinate_converter.CoordinateConverter_is_same, None, CoordinateConverter)
CoordinateConverter.__str__ = new_instancemethod(_coordinate_converter.CoordinateConverter___str__, None, CoordinateConverter)
CoordinateConverter_swigregister = _coordinate_converter.CoordinateConverter_swigregister
CoordinateConverter_swigregister(CoordinateConverter)

class GeodeticConverter(CoordinateConverter):
    """

    CoordinateConverter that goes to and from Geodetic coordinates.

    C++ includes: coordinate_converter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def convert_from_coordinate(self, X, Y, Z=0):
        """

        virtual boost::shared_ptr<GroundCoordinate> GeoCal::GeodeticConverter::convert_from_coordinate(double X, double Y, double Z=0) const
        Convert to geodetic.

        X and Y are longitude and latitude in degrees, and Z is height is in
        meters. 
        """
        return _coordinate_converter.GeodeticConverter_convert_from_coordinate(self, X, Y, Z)


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)


    def __init__(self):
        _coordinate_converter.GeodeticConverter_swiginit(self, _coordinate_converter.new_GeodeticConverter())
    __swig_destroy__ = _coordinate_converter.delete_GeodeticConverter
GeodeticConverter.convert_from_coordinate = new_instancemethod(_coordinate_converter.GeodeticConverter_convert_from_coordinate, None, GeodeticConverter)
GeodeticConverter_swigregister = _coordinate_converter.GeodeticConverter_swigregister
GeodeticConverter_swigregister(GeodeticConverter)

class GeodeticRadianConverter(CoordinateConverter):
    """

    CoordinateConverter that goes to and from Geodetic coordinates.

    This variations uses radians instead

    C++ includes: coordinate_converter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def convert_from_coordinate(self, X, Y, Z=0):
        """

        virtual boost::shared_ptr<GroundCoordinate> GeoCal::GeodeticRadianConverter::convert_from_coordinate(double X, double Y, double Z=0) const
        Convert to geodetic.

        X and Y are longitude and latitude in degrees, and Z is height is in
        meters. 
        """
        return _coordinate_converter.GeodeticRadianConverter_convert_from_coordinate(self, X, Y, Z)


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)


    def __init__(self):
        _coordinate_converter.GeodeticRadianConverter_swiginit(self, _coordinate_converter.new_GeodeticRadianConverter())
    __swig_destroy__ = _coordinate_converter.delete_GeodeticRadianConverter
GeodeticRadianConverter.convert_from_coordinate = new_instancemethod(_coordinate_converter.GeodeticRadianConverter_convert_from_coordinate, None, GeodeticRadianConverter)
GeodeticRadianConverter_swigregister = _coordinate_converter.GeodeticRadianConverter_swigregister
GeodeticRadianConverter_swigregister(GeodeticRadianConverter)

class GeodeticRadian2piConverter(CoordinateConverter):
    """

    CoordinateConverter that goes to and from Geodetic coordinates.

    This variations uses radians instead. This version has longitude
    between 0 and 360 degrees instead of -180 to 180

    C++ includes: coordinate_converter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def convert_from_coordinate(self, X, Y, Z=0):
        """

        virtual boost::shared_ptr<GroundCoordinate> GeoCal::GeodeticRadian2piConverter::convert_from_coordinate(double X, double Y, double Z=0) const
        Convert to geodetic.

        X and Y are longitude and latitude in degrees, and Z is height is in
        meters. 
        """
        return _coordinate_converter.GeodeticRadian2piConverter_convert_from_coordinate(self, X, Y, Z)


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)


    def __init__(self):
        _coordinate_converter.GeodeticRadian2piConverter_swiginit(self, _coordinate_converter.new_GeodeticRadian2piConverter())
    __swig_destroy__ = _coordinate_converter.delete_GeodeticRadian2piConverter
GeodeticRadian2piConverter.convert_from_coordinate = new_instancemethod(_coordinate_converter.GeodeticRadian2piConverter_convert_from_coordinate, None, GeodeticRadian2piConverter)
GeodeticRadian2piConverter_swigregister = _coordinate_converter.GeodeticRadian2piConverter_swigregister
GeodeticRadian2piConverter_swigregister(GeodeticRadian2piConverter)


__all__ = ["CoordinateConverter","GeodeticConverter","GeodeticRadianConverter","GeodeticRadian2piConverter"]



