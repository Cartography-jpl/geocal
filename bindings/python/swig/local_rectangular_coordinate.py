# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _local_rectangular_coordinate

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _local_rectangular_coordinate.SWIG_PyInstanceMethod_New
_swig_new_static_method = _local_rectangular_coordinate.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _local_rectangular_coordinate.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _local_rectangular_coordinate.delete_SwigPyIterator
    value = _swig_new_instance_method(_local_rectangular_coordinate.SwigPyIterator_value)
    incr = _swig_new_instance_method(_local_rectangular_coordinate.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_local_rectangular_coordinate.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_local_rectangular_coordinate.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_local_rectangular_coordinate.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_local_rectangular_coordinate.SwigPyIterator_copy)
    next = _swig_new_instance_method(_local_rectangular_coordinate.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_local_rectangular_coordinate.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_local_rectangular_coordinate.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_local_rectangular_coordinate.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_local_rectangular_coordinate.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_local_rectangular_coordinate.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_local_rectangular_coordinate.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_local_rectangular_coordinate.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_local_rectangular_coordinate.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_local_rectangular_coordinate.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _local_rectangular_coordinate:
_local_rectangular_coordinate.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _local_rectangular_coordinate.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.ground_coordinate
import geocal_swig.look_vector
import geocal_swig.coordinate_converter
import geocal_swig.dem
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class LocalRcParameter(geocal_swig.generic_object.GenericObject):
    r"""

    This is a support class for LocalRectangularCoordinate.

    C++ includes: local_rectangular_coordinate.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FOLLOW_SAMPLE_LOCAL = _local_rectangular_coordinate.LocalRcParameter_FOLLOW_SAMPLE_LOCAL
    FOLLOW_LINE_LOCAL = _local_rectangular_coordinate.LocalRcParameter_FOLLOW_LINE_LOCAL
    FOLLOW_SAMPLE_FULL = _local_rectangular_coordinate.LocalRcParameter_FOLLOW_SAMPLE_FULL
    FOLLOW_LINE_FULL = _local_rectangular_coordinate.LocalRcParameter_FOLLOW_LINE_FULL

    def __init__(self, *args):
        r"""

        LocalRcParameter::LocalRcParameter(const ImageGroundConnection &Igc, double Height=0, double Line=-1,
        double Sample=-1, CoordinateCreation C=FOLLOW_SAMPLE_LOCAL)
        GeoCal::LocalRcParameter::LocalRcParameter
        Constructor.
        This sets up coordinates so the origin is at the given height on the
        surface for the center pixel of the Igc.

        You can optionally override the line/sample used for the origin. Most
        of the time you don't want to do this, but this can be useful when
        generating testing data.

        There are a couple of reasonable ways to create this. The default is
        to set Z in the look direction, X mostly in the image sample/scan
        direction, and Y completing the right hand coordinate system. An
        alternative is to have Y set to be in the image coordinate line/push
        direction, and X completing the RHCS. Often these are similar, but we
        may have difference if the image scan line isn't perpendicular to the
        push direction. There is also a variation where we look local (+- 1
        pixel) or over the whole image (+- number_line/number_sample). 
        """
        _local_rectangular_coordinate.LocalRcParameter_swiginit(self, _local_rectangular_coordinate.new_LocalRcParameter(*args))
    check_rc_assumption = _swig_new_static_method(_local_rectangular_coordinate.LocalRcParameter_check_rc_assumption)
    __str__ = _swig_new_instance_method(_local_rectangular_coordinate.LocalRcParameter___str__)
    cf_to_rc = property(_local_rectangular_coordinate.LocalRcParameter_cf_to_rc_get, _local_rectangular_coordinate.LocalRcParameter_cf_to_rc_set)
    cf_offset = property(_local_rectangular_coordinate.LocalRcParameter_cf_offset_get, _local_rectangular_coordinate.LocalRcParameter_cf_offset_set)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _local_rectangular_coordinate.delete_LocalRcParameter

# Register LocalRcParameter in _local_rectangular_coordinate:
_local_rectangular_coordinate.LocalRcParameter_swigregister(LocalRcParameter)
class LocalRectangularCoordinate(geocal_swig.ground_coordinate.GroundCoordinate):
    r"""

    This is a local rectangular coordinate system.

    This is used by Rsm as one of its coordinates choices, this is a
    rotation and offset of a standard CartesianFixed coordinate system
    such that the origin is the at the center of a ImageGroundConnection
    projection to the surface, oriented to Z in in the look direction, X
    is mostly in the scan direction (orthogonal to Z), and Y completes the
    right handed coordinate system.

    C++ includes: local_rectangular_coordinate.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::LocalRectangularCoordinate::LocalRectangularCoordinate(const boost::shared_ptr< LocalRcParameter > &P, double X, double Y,
        double Z)
        GeoCal::LocalRectangularCoordinate::LocalRectangularCoordinate
        """
        _local_rectangular_coordinate.LocalRectangularCoordinate_swiginit(self, _local_rectangular_coordinate.new_LocalRectangularCoordinate(*args))
    parameter = property(_local_rectangular_coordinate.LocalRectangularCoordinate_parameter_get, _local_rectangular_coordinate.LocalRectangularCoordinate_parameter_set)
    position = property(_local_rectangular_coordinate.LocalRectangularCoordinate_position_get, _local_rectangular_coordinate.LocalRectangularCoordinate_position_set)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _local_rectangular_coordinate.delete_LocalRectangularCoordinate

# Register LocalRectangularCoordinate in _local_rectangular_coordinate:
_local_rectangular_coordinate.LocalRectangularCoordinate_swigregister(LocalRectangularCoordinate)
class LocalRcConverter(geocal_swig.coordinate_converter.CoordinateConverter):
    r"""

    C++ includes: local_rectangular_coordinate.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, P):
        r"""

        GeoCal::LocalRcConverter::LocalRcConverter(const boost::shared_ptr< LocalRcParameter > &P)
        GeoCal::LocalRcConverter::LocalRcConverter
        """
        _local_rectangular_coordinate.LocalRcConverter_swiginit(self, _local_rectangular_coordinate.new_LocalRcConverter(P))
    convert_from_coordinate = _swig_new_instance_method(_local_rectangular_coordinate.LocalRcConverter_convert_from_coordinate)
    convert_to_cf = _swig_new_instance_method(_local_rectangular_coordinate.LocalRcConverter_convert_to_cf)
    _v_parameter = _swig_new_instance_method(_local_rectangular_coordinate.LocalRcConverter__v_parameter)

    @property
    def parameter(self):
        return self._v_parameter()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _local_rectangular_coordinate.delete_LocalRcConverter

# Register LocalRcConverter in _local_rectangular_coordinate:
_local_rectangular_coordinate.LocalRcConverter_swigregister(LocalRcConverter)
class LocalZDem(geocal_swig.dem.Dem):
    r"""

    This is a Dem that is at a constant Z in a LocalRcConverter coordinate
    system.

    C++ includes: local_rectangular_coordinate.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Cconv, Z):
        r"""

        GeoCal::LocalZDem::LocalZDem(const boost::shared_ptr< LocalRcConverter > &Cconv, int Z)
        GeoCal::LocalZDem::LocalZDem
        Constructor.

        """
        _local_rectangular_coordinate.LocalZDem_swiginit(self, _local_rectangular_coordinate.new_LocalZDem(Cconv, Z))
    _v_z = _swig_new_instance_method(_local_rectangular_coordinate.LocalZDem__v_z)

    @property
    def z(self):
        return self._v_z()

    _v_coordinate_converter = _swig_new_instance_method(_local_rectangular_coordinate.LocalZDem__v_coordinate_converter)

    @property
    def coordinate_converter(self):
        return self._v_coordinate_converter()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _local_rectangular_coordinate.delete_LocalZDem

# Register LocalZDem in _local_rectangular_coordinate:
_local_rectangular_coordinate.LocalZDem_swigregister(LocalZDem)

__all__ = ["LocalRcParameter","LocalRectangularCoordinate","LocalRcConverter","LocalZDem"]


