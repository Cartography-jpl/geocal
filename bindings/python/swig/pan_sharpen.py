# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _pan_sharpen.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pan_sharpen', [dirname(__file__)])
        except ImportError:
            import _pan_sharpen
            return _pan_sharpen
        if fp is not None:
            try:
                _mod = imp.load_module('_pan_sharpen', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pan_sharpen = swig_import_helper()
    del swig_import_helper
else:
    import _pan_sharpen
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _pan_sharpen.SHARED_PTR_DISOWN
def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal.calc_raster_multi_band
import geocal.raster_image_multi_band_variable
import geocal.raster_image_multi_band
import geocal.generic_object
class PanSharpen(geocal.calc_raster_multi_band.CalcRasterMultiBand):
    """
    This create a set of pan sharpened images from a pan band and a set of
    multispectral bands (at lower resolution).

    This uses the pan sharpening algorithm described in "WorldView-2 Pan-
    Sharpening" by Chris Padwick et. al. (ASPRS 2010 Annual Conference).

    Because of the way this is calculated, it is most efficient to
    calculate all bands for a given tile at one time. So you should access
    all bands for a particular tile before going to the next tile for this
    object. Nothing bad happens if you don't, it is just slower to access.

    C++ includes: pan_sharpen.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        PanSharpen::PanSharpen(const boost::shared_ptr< RasterImage > &Pan, const boost::shared_ptr<
        RasterImageMultiBand > &Mul, bool Force_rpc=false, bool
        Log_progress=true)
        Constructor.

        This takes in a pan image and a multi spectral image. We subset to the
        area we can calculate PanSharpen over.

        Parameters:
        -----------

        Pan:  The panchromatic image to use

        Mul:  The multispectral images to use

        Force_rpc:  Sometimes an image will have both map information and an
        RPC. In this case, we use the map information by preference, unless
        directed by Force_rpc being true.

        Log_progress:  If true, write progress message to std::cout as we work
        through the data. 
        """
        _pan_sharpen.PanSharpen_swiginit(self,_pan_sharpen.new_PanSharpen(*args))
    __swig_destroy__ = _pan_sharpen.delete_PanSharpen
PanSharpen_swigregister = _pan_sharpen.PanSharpen_swigregister
PanSharpen_swigregister(PanSharpen)



