# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _calc_raster_multi_band

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _calc_raster_multi_band.SWIG_PyInstanceMethod_New
_swig_new_static_method = _calc_raster_multi_band.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _calc_raster_multi_band.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _calc_raster_multi_band.delete_SwigPyIterator
    value = _swig_new_instance_method(_calc_raster_multi_band.SwigPyIterator_value)
    incr = _swig_new_instance_method(_calc_raster_multi_band.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_calc_raster_multi_band.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_calc_raster_multi_band.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_calc_raster_multi_band.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_calc_raster_multi_band.SwigPyIterator_copy)
    next = _swig_new_instance_method(_calc_raster_multi_band.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_calc_raster_multi_band.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_calc_raster_multi_band.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_calc_raster_multi_band.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_calc_raster_multi_band.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_calc_raster_multi_band.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_calc_raster_multi_band.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_calc_raster_multi_band.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_calc_raster_multi_band.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_calc_raster_multi_band.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _calc_raster_multi_band:
_calc_raster_multi_band.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _calc_raster_multi_band.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.raster_image_multi_band_variable
import geocal_swig.raster_image_multi_band
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class CalcRasterMultiBand(geocal_swig.raster_image_multi_band_variable.RasterImageMultiBandVariable):
    r"""

    Some classes most naturally generate a RasterImageMultiBand by
    calculating a results for an array of data (e.g., a tile).

    This class handles the common behavior for these classes.

    This is very similar to RasterImageMultiBand made upf of CalcRaster,
    the difference is that for this class it makes sense to calculate all
    the bands at once.

    C++ includes: calc_raster_multi_band.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    raster_image = _swig_new_instance_method(_calc_raster_multi_band.CalcRasterMultiBand_raster_image)
    _v_data = _swig_new_instance_method(_calc_raster_multi_band.CalcRasterMultiBand__v_data)

    @property
    def data(self):
        return self._v_data()

    desc = _swig_new_instance_method(_calc_raster_multi_band.CalcRasterMultiBand_desc)
    calc = _swig_new_instance_method(_calc_raster_multi_band.CalcRasterMultiBand_calc)

    def __init__(self, *args):
        if self.__class__ == CalcRasterMultiBand:
            _self = None
        else:
            _self = self
        _calc_raster_multi_band.CalcRasterMultiBand_swiginit(self, _calc_raster_multi_band.new_CalcRasterMultiBand(_self, *args))
    initialize = _swig_new_instance_method(_calc_raster_multi_band.CalcRasterMultiBand_initialize)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _calc_raster_multi_band.delete_CalcRasterMultiBand
    def __disown__(self):
        self.this.disown()
        _calc_raster_multi_band.disown_CalcRasterMultiBand(self)
        return weakref.proxy(self)

# Register CalcRasterMultiBand in _calc_raster_multi_band:
_calc_raster_multi_band.CalcRasterMultiBand_swigregister(CalcRasterMultiBand)

__all__ = ["CalcRasterMultiBand"]


