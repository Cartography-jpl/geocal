# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rsm.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rsm', [dirname(__file__)])
        except ImportError:
            import _rsm
            return _rsm
        if fp is not None:
            try:
                _mod = imp.load_module('_rsm', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rsm = swig_import_helper()
    del swig_import_helper
else:
    import _rsm
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rsm.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_rsm.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_rsm.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_rsm.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_rsm.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_rsm.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_rsm.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_rsm.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_rsm.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_rsm.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_rsm.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_rsm.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_rsm.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_rsm.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_rsm.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_rsm.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_rsm.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _rsm.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_rsm.SHARED_PTR_DISOWN_swigconstant(_rsm)
SHARED_PTR_DISOWN = _rsm.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class Rsm(geocal_swig.generic_object.GenericObject):
    """

    This class is a Replacement Sensor Model (see Dolloff, J.T., M.M.

    Iiyama, and C.R. Taylor, 2008. The Replacement Sensor Model (RSM):
    Overview, Status, and Performance Summary, ASPRS 2008 Annual
    Conference, April 28 - May 2, 2008)

    This is the top level class which provides access to mapping from
    GroundCoordinate to ImageCoordinate and vice versa.

    Note that this class will likely be changed/updated in the future,
    this is mostly a placeholder for now.

    C++ includes: rsm.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Rp, Cconv):
        """

        Rsm::Rsm(const boost::shared_ptr< RsmBase > &Rp, const boost::shared_ptr<
        CoordinateConverter > &Cconv)
        Constructor. 
        """
        _rsm.Rsm_swiginit(self, _rsm.new_Rsm(Rp, Cconv))

    def ground_coordinate(self, *args):
        """

        boost::shared_ptr< GroundCoordinate > Rsm::ground_coordinate(const ImageCoordinate &Ic, double Z) const
        Invert the image_coordinate function to find the ground coordinates at
        a particular Z value.

        For the special case that the cconv is a GeodeticConverter or
        PlanetocentricConverter Z corresponds to height.

        This routine may fail to find a solution, in which case a
        ConvergenceFailure exception will be thrown. 
        """
        return _rsm.Rsm_ground_coordinate(self, *args)


    def ground_coordinate_approx_height(self, Ic, H):
        """

        boost::shared_ptr< GroundCoordinate > Rsm::ground_coordinate_approx_height(const ImageCoordinate &Ic, double H) const
        Return ground coordinate at the height above the reference ellipsoid.

        """
        return _rsm.Rsm_ground_coordinate_approx_height(self, Ic, H)


    def image_coordinate(self, *args):
        """

        ImageCoordinate Rsm::image_coordinate(double X, double Y, double Z) const
        Variation where the Gc is already in our native coordinate system. 
        """
        return _rsm.Rsm_image_coordinate(self, *args)


    def image_coordinate_jacobian(self, X, Y, Z):
        """

        blitz::Array< double, 2 > Rsm::image_coordinate_jacobian(double X, double Y, double Z) const
        This the jacobian of the line, sample with respect to X, Y, Z.

        This is a 2x3 matrix. 
        """
        return _rsm.Rsm_image_coordinate_jacobian(self, X, Y, Z)


    def fit(self, Igc, Min_height, Max_height, Nline=20, Nsample=20, Nheight=20, Skip_masked_point=False, Ignore_error=False):
        """

        void Rsm::fit(const ImageGroundConnection &Igc, double Min_height, double
        Max_height, int Nline=20, int Nsample=20, int Nheight=20, bool
        Skip_masked_point=false, bool Ignore_error=false)
        Generate a Rsm that approximates the calculation done by a
        ImageGroundConnection.

        This routine always ignores ImageGroundConnectionFailed exceptions,
        and just skips to the next point. But if we are using python code for
        the ImageGroundConnection we can't translate errors to
        ImageGroundConnectionFailed (this is a limitation of SWIG). So you can
        optionally specify Ignore_error as true, in which case we ignore all
        exceptions and just skip to the next point.

        We normally look at all image points when generating the Rsm. You can
        optionally specify Skip_masked_point to skip all image points that are
        masked.

        The Nline, Nsample, Nheight is used for any RsmRationalPolynomial we
        fit. A RsmGrid uses the size of the grid to determine how many points
        it needs to calculate. 
        """
        return _rsm.Rsm_fit(self, Igc, Min_height, Max_height, Nline, Nsample, Nheight, Skip_masked_point, Ignore_error)


    def _v_rsm_base(self):
        """

        const boost::shared_ptr<RsmBase>& GeoCal::Rsm::rsm_base() const

        """
        return _rsm.Rsm__v_rsm_base(self)


    @property
    def rsm_base(self):
        return self._v_rsm_base()


    def _v_coordinate_converter(self):
        """

        const boost::shared_ptr<CoordinateConverter> GeoCal::Rsm::coordinate_converter() const

        """
        return _rsm.Rsm__v_coordinate_converter(self)


    @property
    def coordinate_converter(self):
        return self._v_coordinate_converter()


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _rsm.delete_Rsm
Rsm.__str__ = new_instancemethod(_rsm.Rsm___str__, None, Rsm)
Rsm.ground_coordinate = new_instancemethod(_rsm.Rsm_ground_coordinate, None, Rsm)
Rsm.ground_coordinate_approx_height = new_instancemethod(_rsm.Rsm_ground_coordinate_approx_height, None, Rsm)
Rsm.image_coordinate = new_instancemethod(_rsm.Rsm_image_coordinate, None, Rsm)
Rsm.image_coordinate_jacobian = new_instancemethod(_rsm.Rsm_image_coordinate_jacobian, None, Rsm)
Rsm.fit = new_instancemethod(_rsm.Rsm_fit, None, Rsm)
Rsm._v_rsm_base = new_instancemethod(_rsm.Rsm__v_rsm_base, None, Rsm)
Rsm._v_coordinate_converter = new_instancemethod(_rsm.Rsm__v_coordinate_converter, None, Rsm)
Rsm_swigregister = _rsm.Rsm_swigregister
Rsm_swigregister(Rsm)



