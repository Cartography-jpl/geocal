# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _image_mask

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _image_mask.SWIG_PyInstanceMethod_New
_swig_new_static_method = _image_mask.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _image_mask.delete_SwigPyIterator
    value = _swig_new_instance_method(_image_mask.SwigPyIterator_value)
    incr = _swig_new_instance_method(_image_mask.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_image_mask.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_image_mask.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_image_mask.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_image_mask.SwigPyIterator_copy)
    next = _swig_new_instance_method(_image_mask.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_image_mask.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_image_mask.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_image_mask.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_image_mask.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_image_mask.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_image_mask.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_image_mask.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_image_mask.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_image_mask.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _image_mask:
_image_mask.SwigPyIterator_swigregister(SwigPyIterator)
SWIG_MODULE_ALREADY_DONE = _image_mask.SWIG_MODULE_ALREADY_DONE
SHARED_PTR_DISOWN = _image_mask.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
class ImageMask(geocal_swig.generic_object.GenericObject):
    r"""

    This provides a ImageMask, which can be used to prevent doing some
    kind of processing.

    An example is a using a Cloud mask to restrict image matching to cloud
    free areas.

    The mask can look at specific ImageCoordinate points indicating if the
    that point is masked or not. You can also look at a Image area to see
    if any of the area is masked (e.g., avoid image matching on this area
    because it is masked).

    This mask works in ImageCoordinates, cf. GroundMask.

    C++ includes: image_mask.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    mask = _swig_new_instance_method(_image_mask.ImageMask_mask)
    mask_ic = _swig_new_instance_method(_image_mask.ImageMask_mask_ic)
    area_any_masked = _swig_new_instance_method(_image_mask.ImageMask_area_any_masked)
    __str__ = _swig_new_instance_method(_image_mask.ImageMask___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _image_mask.delete_ImageMask

# Register ImageMask in _image_mask:
_image_mask.ImageMask_swigregister(ImageMask)
class OffsetImageMask(ImageMask):
    r"""

    This gives an ImageMask that is an offset of a given one.

    This would be used for example when an image is subsetted.

    C++ includes: image_mask.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    _v_original_image_mask = _swig_new_instance_method(_image_mask.OffsetImageMask__v_original_image_mask)

    @property
    def original_image_mask(self):
        return self._v_original_image_mask()

    _v_line_offset = _swig_new_instance_method(_image_mask.OffsetImageMask__v_line_offset)

    @property
    def line_offset(self):
        return self._v_line_offset()

    _v_sample_offset = _swig_new_instance_method(_image_mask.OffsetImageMask__v_sample_offset)

    @property
    def sample_offset(self):
        return self._v_sample_offset()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _image_mask.delete_OffsetImageMask

# Register OffsetImageMask in _image_mask:
_image_mask.OffsetImageMask_swigregister(OffsetImageMask)
class CombinedImageMask(ImageMask):
    r"""

    This is combines a set of masks into a single one.

    The combination just check each mask in turn, and if any of them
    indicates a point or a area is masked, then we return true.

    Note that this class handles the degenerate case of no masked. This is
    particular useful in handling situations where you might or might not
    have mask, e.g. a general routine that can take a mask but where you
    don't happen to have any masks in a particular case.

    When there are no masks, we return true.

    C++ includes: image_mask.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        GeoCal::CombinedImageMask::CombinedImageMask(It First, It Last)
        GeoCal::CombinedImageMask::CombinedImageMask
        Create a CombinedImageMask using the given set of masks, where we get this from a general
        InputIterator.

        """
        _image_mask.CombinedImageMask_swiginit(self, _image_mask.new_CombinedImageMask(*args))
    mask_list = property(_image_mask.CombinedImageMask_mask_list_get, _image_mask.CombinedImageMask_mask_list_set)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _image_mask.delete_CombinedImageMask

# Register CombinedImageMask in _image_mask:
_image_mask.CombinedImageMask_swigregister(CombinedImageMask)
class Vector_ImageMask(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_image_mask.Vector_ImageMask_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_image_mask.Vector_ImageMask___nonzero__)
    __bool__ = _swig_new_instance_method(_image_mask.Vector_ImageMask___bool__)
    __len__ = _swig_new_instance_method(_image_mask.Vector_ImageMask___len__)
    __getslice__ = _swig_new_instance_method(_image_mask.Vector_ImageMask___getslice__)
    __setslice__ = _swig_new_instance_method(_image_mask.Vector_ImageMask___setslice__)
    __delslice__ = _swig_new_instance_method(_image_mask.Vector_ImageMask___delslice__)
    __delitem__ = _swig_new_instance_method(_image_mask.Vector_ImageMask___delitem__)
    __getitem__ = _swig_new_instance_method(_image_mask.Vector_ImageMask___getitem__)
    __setitem__ = _swig_new_instance_method(_image_mask.Vector_ImageMask___setitem__)
    pop = _swig_new_instance_method(_image_mask.Vector_ImageMask_pop)
    append = _swig_new_instance_method(_image_mask.Vector_ImageMask_append)
    empty = _swig_new_instance_method(_image_mask.Vector_ImageMask_empty)
    size = _swig_new_instance_method(_image_mask.Vector_ImageMask_size)
    swap = _swig_new_instance_method(_image_mask.Vector_ImageMask_swap)
    begin = _swig_new_instance_method(_image_mask.Vector_ImageMask_begin)
    end = _swig_new_instance_method(_image_mask.Vector_ImageMask_end)
    rbegin = _swig_new_instance_method(_image_mask.Vector_ImageMask_rbegin)
    rend = _swig_new_instance_method(_image_mask.Vector_ImageMask_rend)
    clear = _swig_new_instance_method(_image_mask.Vector_ImageMask_clear)
    get_allocator = _swig_new_instance_method(_image_mask.Vector_ImageMask_get_allocator)
    pop_back = _swig_new_instance_method(_image_mask.Vector_ImageMask_pop_back)
    erase = _swig_new_instance_method(_image_mask.Vector_ImageMask_erase)

    def __init__(self, *args):
        _image_mask.Vector_ImageMask_swiginit(self, _image_mask.new_Vector_ImageMask(*args))
    push_back = _swig_new_instance_method(_image_mask.Vector_ImageMask_push_back)
    front = _swig_new_instance_method(_image_mask.Vector_ImageMask_front)
    back = _swig_new_instance_method(_image_mask.Vector_ImageMask_back)
    assign = _swig_new_instance_method(_image_mask.Vector_ImageMask_assign)
    resize = _swig_new_instance_method(_image_mask.Vector_ImageMask_resize)
    insert = _swig_new_instance_method(_image_mask.Vector_ImageMask_insert)
    reserve = _swig_new_instance_method(_image_mask.Vector_ImageMask_reserve)
    capacity = _swig_new_instance_method(_image_mask.Vector_ImageMask_capacity)
    __swig_destroy__ = _image_mask.delete_Vector_ImageMask

# Register Vector_ImageMask in _image_mask:
_image_mask.Vector_ImageMask_swigregister(Vector_ImageMask)

__all__ = ["ImageMask","OffsetImageMask","CombinedImageMask","Vector_ImageMask"]


