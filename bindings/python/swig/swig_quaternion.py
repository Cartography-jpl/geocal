# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _swig_quaternion

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _swig_quaternion.SWIG_PyInstanceMethod_New
_swig_new_static_method = _swig_quaternion.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref


import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return SWIG_MODULE.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return SWIG_MODULE.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

class Quaternion_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a, b, c, d):
        _swig_quaternion.Quaternion_double_swiginit(self, _swig_quaternion.new_Quaternion_double(a, b, c, d))
    _v_R_component_1 = _swig_new_instance_method(_swig_quaternion.Quaternion_double__v_R_component_1)

    @property
    def R_component_1(self):
        return self._v_R_component_1()

    _v_R_component_2 = _swig_new_instance_method(_swig_quaternion.Quaternion_double__v_R_component_2)

    @property
    def R_component_2(self):
        return self._v_R_component_2()

    _v_R_component_3 = _swig_new_instance_method(_swig_quaternion.Quaternion_double__v_R_component_3)

    @property
    def R_component_3(self):
        return self._v_R_component_3()

    _v_R_component_4 = _swig_new_instance_method(_swig_quaternion.Quaternion_double__v_R_component_4)

    @property
    def R_component_4(self):
        return self._v_R_component_4()

    __add__ = _swig_new_instance_method(_swig_quaternion.Quaternion_double___add__)
    __sub__ = _swig_new_instance_method(_swig_quaternion.Quaternion_double___sub__)
    __mul__ = _swig_new_instance_method(_swig_quaternion.Quaternion_double___mul__)
    __div__ = _swig_new_instance_method(_swig_quaternion.Quaternion_double___div__)
    conj = _swig_new_instance_method(_swig_quaternion.Quaternion_double_conj)
    to_matrix = _swig_new_instance_method(_swig_quaternion.Quaternion_double_to_matrix)
    from_matrix = _swig_new_static_method(_swig_quaternion.Quaternion_double_from_matrix)
    print_to_string = _swig_new_instance_method(_swig_quaternion.Quaternion_double_print_to_string)

    @classmethod
    def pickle_format_version(cls):
      return 1

    def __reduce__(self):
      return _new_from_init, (self.__class__, 1, self.R_component_1,self.R_component_2,self.R_component_3,self.R_component_4)


    def __str__(self):
        return "Quaternion (" + str(self.R_component_1) + ", " + str(self.R_component_2) + ", " + str(self.R_component_3) + ", " + str(self.R_component_4) + ")"

    __swig_destroy__ = _swig_quaternion.delete_Quaternion_double

# Register Quaternion_double in _swig_quaternion:
_swig_quaternion.Quaternion_double_swigregister(Quaternion_double)
Quaternion_double_abs = _swig_quaternion.Quaternion_double_abs

