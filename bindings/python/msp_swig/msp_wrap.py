# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if getattr(globals().get("__spec__"), "parent", None) or globals().get("__package__") or "." in __name__:
    from . import _msp_wrap
else:
    import _msp_wrap

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _msp_wrap.SWIG_PyInstanceMethod_New
_swig_new_static_method = _msp_wrap.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _msp_wrap.delete_SwigPyIterator
    value = _swig_new_instance_method(_msp_wrap.SwigPyIterator_value)
    incr = _swig_new_instance_method(_msp_wrap.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_msp_wrap.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_msp_wrap.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_msp_wrap.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_msp_wrap.SwigPyIterator_copy)
    next = _swig_new_instance_method(_msp_wrap.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_msp_wrap.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_msp_wrap.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_msp_wrap.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_msp_wrap.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_msp_wrap.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_msp_wrap.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_msp_wrap.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_msp_wrap.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_msp_wrap.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _msp_wrap:
_msp_wrap.SwigPyIterator_swigregister(SwigPyIterator)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_msp_wrap.StringVector_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_msp_wrap.StringVector___nonzero__)
    __bool__ = _swig_new_instance_method(_msp_wrap.StringVector___bool__)
    __len__ = _swig_new_instance_method(_msp_wrap.StringVector___len__)
    __getslice__ = _swig_new_instance_method(_msp_wrap.StringVector___getslice__)
    __setslice__ = _swig_new_instance_method(_msp_wrap.StringVector___setslice__)
    __delslice__ = _swig_new_instance_method(_msp_wrap.StringVector___delslice__)
    __delitem__ = _swig_new_instance_method(_msp_wrap.StringVector___delitem__)
    __getitem__ = _swig_new_instance_method(_msp_wrap.StringVector___getitem__)
    __setitem__ = _swig_new_instance_method(_msp_wrap.StringVector___setitem__)
    pop = _swig_new_instance_method(_msp_wrap.StringVector_pop)
    append = _swig_new_instance_method(_msp_wrap.StringVector_append)
    empty = _swig_new_instance_method(_msp_wrap.StringVector_empty)
    size = _swig_new_instance_method(_msp_wrap.StringVector_size)
    swap = _swig_new_instance_method(_msp_wrap.StringVector_swap)
    begin = _swig_new_instance_method(_msp_wrap.StringVector_begin)
    end = _swig_new_instance_method(_msp_wrap.StringVector_end)
    rbegin = _swig_new_instance_method(_msp_wrap.StringVector_rbegin)
    rend = _swig_new_instance_method(_msp_wrap.StringVector_rend)
    clear = _swig_new_instance_method(_msp_wrap.StringVector_clear)
    get_allocator = _swig_new_instance_method(_msp_wrap.StringVector_get_allocator)
    pop_back = _swig_new_instance_method(_msp_wrap.StringVector_pop_back)
    erase = _swig_new_instance_method(_msp_wrap.StringVector_erase)

    def __init__(self, *args):
        _msp_wrap.StringVector_swiginit(self, _msp_wrap.new_StringVector(*args))
    push_back = _swig_new_instance_method(_msp_wrap.StringVector_push_back)
    front = _swig_new_instance_method(_msp_wrap.StringVector_front)
    back = _swig_new_instance_method(_msp_wrap.StringVector_back)
    assign = _swig_new_instance_method(_msp_wrap.StringVector_assign)
    resize = _swig_new_instance_method(_msp_wrap.StringVector_resize)
    insert = _swig_new_instance_method(_msp_wrap.StringVector_insert)
    reserve = _swig_new_instance_method(_msp_wrap.StringVector_reserve)
    capacity = _swig_new_instance_method(_msp_wrap.StringVector_capacity)
    __swig_destroy__ = _msp_wrap.delete_StringVector

# Register StringVector in _msp_wrap:
_msp_wrap.StringVector_swigregister(StringVector)
class Msp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _msp_wrap.Msp_swiginit(self, _msp_wrap.new_Msp())
    msp_register_plugin = _swig_new_instance_method(_msp_wrap.Msp_msp_register_plugin)
    msp_plugin_list = _swig_new_instance_method(_msp_wrap.Msp_msp_plugin_list)
    msp_print_plugin_list = _swig_new_instance_method(_msp_wrap.Msp_msp_print_plugin_list)
    __swig_destroy__ = _msp_wrap.delete_Msp

# Register Msp in _msp_wrap:
_msp_wrap.Msp_swigregister(Msp)

