# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _with_parameter.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_with_parameter', [dirname(__file__)])
        except ImportError:
            import _with_parameter
            return _with_parameter
        if fp is not None:
            try:
                _mod = imp.load_module('_with_parameter', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _with_parameter = swig_import_helper()
    del swig_import_helper
else:
    import _with_parameter
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _with_parameter.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_with_parameter.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_with_parameter.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_with_parameter.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_with_parameter.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_with_parameter.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_with_parameter.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_with_parameter.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_with_parameter.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_with_parameter.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_with_parameter.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_with_parameter.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_with_parameter.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_with_parameter.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_with_parameter.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_with_parameter.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_with_parameter.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _with_parameter.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _with_parameter.SHARED_PTR_DISOWN
def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst
 
def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
class WithParameter(geocal_swig.generic_object.GenericObject):
    """
    It is common for a class to have some set of parameters that control
    behavior, which we may then fit with something like the SBA.

    It can also be useful for only a subset of those parameter to be
    active. This mixin class supplies this functionality.

    C++ includes: with_parameter.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def _v_parameter(self, *args):
        """
        virtual void GeoCal::WithParameter::parameter(const blitz::Array< double, 1 > &Parm)
        Set the value of the parameters. 
        """
        return _with_parameter.WithParameter__v_parameter(self, *args)

    @property
    def parameter(self):
        return self._v_parameter()

    @parameter.setter
    def parameter(self, value):
      self._v_parameter(value)

    def _v_parameter_with_derivative(self, *args):
        """
        virtual void GeoCal::WithParameter::parameter_with_derivative(const ArrayAd< double, 1 > &Parm)
        Set the value of the parameters, including derivatives of the
        parameter.

        Useful for doing Jacobian calculations. 
        """
        return _with_parameter.WithParameter__v_parameter_with_derivative(self, *args)

    @property
    def parameter_with_derivative(self):
        return self._v_parameter_with_derivative()

    @parameter_with_derivative.setter
    def parameter_with_derivative(self, value):
      self._v_parameter_with_derivative(value)

    def _v_parameter_name(self):
        """
        virtual std::vector<std::string> GeoCal::WithParameter::parameter_name() const
        Descriptive name of each parameter. 
        """
        return _with_parameter.WithParameter__v_parameter_name(self)

    @property
    def parameter_name(self):
        return self._v_parameter_name()

    def _v_parameter_subset(self, *args):
        """
        void WithParameter::parameter_subset(const blitz::Array< double, 1 > &P)
        Set the part of the parameter set that passes the mask. 
        """
        return _with_parameter.WithParameter__v_parameter_subset(self, *args)

    @property
    def parameter_subset(self):
        return self._v_parameter_subset()

    @parameter_subset.setter
    def parameter_subset(self, value):
      self._v_parameter_subset(value)

    def _v_parameter_with_derivative_subset(self, *args):
        """
        void WithParameter::parameter_with_derivative_subset(const ArrayAd< double, 1 > &P)
        Set the part of the parameter set that passes the mask. 
        """
        return _with_parameter.WithParameter__v_parameter_with_derivative_subset(self, *args)

    @property
    def parameter_with_derivative_subset(self):
        return self._v_parameter_with_derivative_subset()

    @parameter_with_derivative_subset.setter
    def parameter_with_derivative_subset(self, value):
      self._v_parameter_with_derivative_subset(value)

    def _v_parameter_name_subset(self):
        """
        std::vector< std::string > WithParameter::parameter_name_subset() const
        Return the part of the parameter name that passes the mask. 
        """
        return _with_parameter.WithParameter__v_parameter_name_subset(self)

    @property
    def parameter_name_subset(self):
        return self._v_parameter_name_subset()

    def _v_parameter_mask(self):
        """
        virtual blitz::Array<bool, 1> GeoCal::WithParameter::parameter_mask() const
        Return the parameter subset mask, where "true" means include the
        parameter and "false" means don't. 
        """
        return _with_parameter.WithParameter__v_parameter_mask(self)

    @property
    def parameter_mask(self):
        return self._v_parameter_mask()

    def add_identity_gradient(self):
        """
        void WithParameter::add_identity_gradient()
        A very common thing is to want the gradient each of the active
        parameters (those returned by parameter_subset) to be the parameters
        the gradient is relative to, i.e.

        the first parameter has gradient of [1,0,0...], the second [0,1,0...]
        etc. This utility routine sets that up. 
        """
        return _with_parameter.WithParameter_add_identity_gradient(self)

    def __init__(self): 
        if self.__class__ == WithParameter:
            _self = None
        else:
            _self = self
        _with_parameter.WithParameter_swiginit(self,_with_parameter.new_WithParameter(_self, ))
    __swig_destroy__ = _with_parameter.delete_WithParameter
    def __disown__(self):
        self.this.disown()
        _with_parameter.disown_WithParameter(self)
        return weakref_proxy(self)
WithParameter._v_parameter = new_instancemethod(_with_parameter.WithParameter__v_parameter,None,WithParameter)
WithParameter._v_parameter_with_derivative = new_instancemethod(_with_parameter.WithParameter__v_parameter_with_derivative,None,WithParameter)
WithParameter._v_parameter_name = new_instancemethod(_with_parameter.WithParameter__v_parameter_name,None,WithParameter)
WithParameter._v_parameter_subset = new_instancemethod(_with_parameter.WithParameter__v_parameter_subset,None,WithParameter)
WithParameter._v_parameter_with_derivative_subset = new_instancemethod(_with_parameter.WithParameter__v_parameter_with_derivative_subset,None,WithParameter)
WithParameter._v_parameter_name_subset = new_instancemethod(_with_parameter.WithParameter__v_parameter_name_subset,None,WithParameter)
WithParameter._v_parameter_mask = new_instancemethod(_with_parameter.WithParameter__v_parameter_mask,None,WithParameter)
WithParameter.add_identity_gradient = new_instancemethod(_with_parameter.WithParameter_add_identity_gradient,None,WithParameter)
WithParameter_swigregister = _with_parameter.WithParameter_swigregister
WithParameter_swigregister(WithParameter)

class WithParameterNested(WithParameter):
    """
    It is common for a class WithParameter to be made up of subobjects an
    just string them together (e.g., a OrbitDataImageGroundConnection
    where the orbit and camera each have parameters).

    This handles this simple case.

    C++ includes: with_parameter.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """
        GeoCal::WithParameterNested::WithParameterNested()

        """
        _with_parameter.WithParameterNested_swiginit(self,_with_parameter.new_WithParameterNested())
    def add_object(self, *args):
        """
        void GeoCal::WithParameterNested::add_object(const boost::shared_ptr< WithParameter > &Obj)

        """
        return _with_parameter.WithParameterNested_add_object(self, *args)

    __swig_destroy__ = _with_parameter.delete_WithParameterNested
WithParameterNested.add_object = new_instancemethod(_with_parameter.WithParameterNested_add_object,None,WithParameterNested)
WithParameterNested_swigregister = _with_parameter.WithParameterNested_swigregister
WithParameterNested_swigregister(WithParameterNested)



