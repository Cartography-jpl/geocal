# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _mask.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mask', [dirname(__file__)])
        except ImportError:
            import _mask
            return _mask
        if fp is not None:
            try:
                _mod = imp.load_module('_mask', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mask = swig_import_helper()
    del swig_import_helper
else:
    import _mask
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mask.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_mask.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_mask.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_mask.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_mask.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_mask.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_mask.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_mask.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_mask.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_mask.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_mask.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_mask.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_mask.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_mask.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_mask.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_mask.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_mask.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _mask.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _mask.SHARED_PTR_DISOWN
def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal.generic_object
class Mask(geocal.generic_object.GenericObject):
    """
    This provides a Mask, which can be used to prevent doing some kind of
    processing.

    An example is a using a Land/Water mask to restrict image matching to
    land, or a cloud mask to restrict image matching to cloud free areas.

    The mask can look at specific GroundCoordinate points indicating if
    the that point is masked or not. You can also look at a region to see
    if the entire area is masked (e.g., avoid processing on this area
    because it is masked).

    The region search is a bit loose, you give the corners of the area to
    search. The region selected depends on the underlying map projection
    used by the mask data - it might be a region in latitude/longitude, a
    region in UTM, or something else. The region search is useful only for
    small areas where these difference aren't very important. If you need
    detailed, accurate information about a region in a specific map
    projection then you should simply look at each individual point. The
    region is useful for the "don't bother looking here for tie points,
    look somewhere else" sorts of uses.

    If the region search returns true, then all of the region is masked.
    If this is false, then some of the region might be unmasked. Note that
    this is conservative in the true direction - a value of false doesn't
    promise that there is an unmasked pixel, just that we are pretty sure
    that there is one. Edge cases where a false value clips the corner of
    a region might have region search return false, while when you look at
    it pixel by pixel every point ends up being masked.

    Typically a Mask has an underlying RasterImage or something similar. A
    particular GroundCoordinate probably doesn't fall exactly on a pixel
    of the Mask. How we interpolate is defined by the particular derived
    class uses - a common approach is to mask if any of the 4 neighboring
    pixels are masked (but check the derived class for details).

    C++ includes: mask.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def mask(self, *args):
        """
        virtual bool GeoCal::Mask::mask(const GroundCoordinate &Gc) const =0
        Indicate if a particular point is masked.

        If true, the point is masked and should not be used in processing
        (e.g., don't do image matching) 
        """
        return _mask.Mask_mask(self, *args)

    def region_masked(self, *args):
        """
        virtual bool GeoCal::Mask::region_masked(const GroundCoordinate &Ulc, const GroundCoordinate &Lrc) const =0
        Indicated if a region is all masked or not.

        See the discussion in the comments of Mask for detailed discussion of
        the check. 
        """
        return _mask.Mask_region_masked(self, *args)

    __swig_destroy__ = _mask.delete_Mask
Mask.mask = new_instancemethod(_mask.Mask_mask,None,Mask)
Mask.region_masked = new_instancemethod(_mask.Mask_region_masked,None,Mask)
Mask.__str__ = new_instancemethod(_mask.Mask___str__,None,Mask)
Mask_swigregister = _mask.Mask_swigregister
Mask_swigregister(Mask)

class CombinedMask(Mask):
    """
    This is combines a set of masks into a single one.

    The combination just check each mask in turn, and if any of them
    indicates a point or a region is masked, then we return true.

    Note that this class handles the degenerate case of no masked. This is
    particular useful in handling situations where you might or might not
    have mask, e.g. a general routine that can take a mask but where you
    don't happen to have any masks in a particular case.

    When there are no masks, we return true.

    C++ includes: mask.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        GeoCal::CombinedMask::CombinedMask(It First, It Last)
        Create a CombinedMask using the given set of masks, where we get this
        from a general InputIterator. 
        """
        _mask.CombinedMask_swiginit(self,_mask.new_CombinedMask(*args))
    mask_list = _swig_property(_mask.CombinedMask_mask_list_get, _mask.CombinedMask_mask_list_set)
    @classmethod
    def pickle_format_version(cls):
      return 1

    def __reduce__(self):
      return _new_from_init, (self.__class__, 1, self.mask_list)

    __swig_destroy__ = _mask.delete_CombinedMask
CombinedMask_swigregister = _mask.CombinedMask_swigregister
CombinedMask_swigregister(CombinedMask)

class Vector_Mask(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _mask.Vector_Mask_swiginit(self,_mask.new_Vector_Mask(*args))
    __swig_destroy__ = _mask.delete_Vector_Mask
Vector_Mask.iterator = new_instancemethod(_mask.Vector_Mask_iterator,None,Vector_Mask)
Vector_Mask.__nonzero__ = new_instancemethod(_mask.Vector_Mask___nonzero__,None,Vector_Mask)
Vector_Mask.__bool__ = new_instancemethod(_mask.Vector_Mask___bool__,None,Vector_Mask)
Vector_Mask.__len__ = new_instancemethod(_mask.Vector_Mask___len__,None,Vector_Mask)
Vector_Mask.pop = new_instancemethod(_mask.Vector_Mask_pop,None,Vector_Mask)
Vector_Mask.__getslice__ = new_instancemethod(_mask.Vector_Mask___getslice__,None,Vector_Mask)
Vector_Mask.__setslice__ = new_instancemethod(_mask.Vector_Mask___setslice__,None,Vector_Mask)
Vector_Mask.__delslice__ = new_instancemethod(_mask.Vector_Mask___delslice__,None,Vector_Mask)
Vector_Mask.__delitem__ = new_instancemethod(_mask.Vector_Mask___delitem__,None,Vector_Mask)
Vector_Mask.__getitem__ = new_instancemethod(_mask.Vector_Mask___getitem__,None,Vector_Mask)
Vector_Mask.__setitem__ = new_instancemethod(_mask.Vector_Mask___setitem__,None,Vector_Mask)
Vector_Mask.append = new_instancemethod(_mask.Vector_Mask_append,None,Vector_Mask)
Vector_Mask.empty = new_instancemethod(_mask.Vector_Mask_empty,None,Vector_Mask)
Vector_Mask.size = new_instancemethod(_mask.Vector_Mask_size,None,Vector_Mask)
Vector_Mask.clear = new_instancemethod(_mask.Vector_Mask_clear,None,Vector_Mask)
Vector_Mask.swap = new_instancemethod(_mask.Vector_Mask_swap,None,Vector_Mask)
Vector_Mask.get_allocator = new_instancemethod(_mask.Vector_Mask_get_allocator,None,Vector_Mask)
Vector_Mask.begin = new_instancemethod(_mask.Vector_Mask_begin,None,Vector_Mask)
Vector_Mask.end = new_instancemethod(_mask.Vector_Mask_end,None,Vector_Mask)
Vector_Mask.rbegin = new_instancemethod(_mask.Vector_Mask_rbegin,None,Vector_Mask)
Vector_Mask.rend = new_instancemethod(_mask.Vector_Mask_rend,None,Vector_Mask)
Vector_Mask.pop_back = new_instancemethod(_mask.Vector_Mask_pop_back,None,Vector_Mask)
Vector_Mask.erase = new_instancemethod(_mask.Vector_Mask_erase,None,Vector_Mask)
Vector_Mask.push_back = new_instancemethod(_mask.Vector_Mask_push_back,None,Vector_Mask)
Vector_Mask.front = new_instancemethod(_mask.Vector_Mask_front,None,Vector_Mask)
Vector_Mask.back = new_instancemethod(_mask.Vector_Mask_back,None,Vector_Mask)
Vector_Mask.assign = new_instancemethod(_mask.Vector_Mask_assign,None,Vector_Mask)
Vector_Mask.resize = new_instancemethod(_mask.Vector_Mask_resize,None,Vector_Mask)
Vector_Mask.insert = new_instancemethod(_mask.Vector_Mask_insert,None,Vector_Mask)
Vector_Mask.reserve = new_instancemethod(_mask.Vector_Mask_reserve,None,Vector_Mask)
Vector_Mask.capacity = new_instancemethod(_mask.Vector_Mask_capacity,None,Vector_Mask)
Vector_Mask_swigregister = _mask.Vector_Mask_swigregister
Vector_Mask_swigregister(Vector_Mask)



