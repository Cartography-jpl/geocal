# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _piecewise_linear

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _piecewise_linear.SWIG_PyInstanceMethod_New
_swig_new_static_method = _piecewise_linear.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _piecewise_linear.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _piecewise_linear.delete_SwigPyIterator
    value = _swig_new_instance_method(_piecewise_linear.SwigPyIterator_value)
    incr = _swig_new_instance_method(_piecewise_linear.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_piecewise_linear.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_piecewise_linear.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_piecewise_linear.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_piecewise_linear.SwigPyIterator_copy)
    next = _swig_new_instance_method(_piecewise_linear.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_piecewise_linear.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_piecewise_linear.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_piecewise_linear.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_piecewise_linear.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_piecewise_linear.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_piecewise_linear.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_piecewise_linear.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_piecewise_linear.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_piecewise_linear.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _piecewise_linear:
_piecewise_linear.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _piecewise_linear.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.with_parameter
import geocal_swig.generic_object
class Vector_Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_piecewise_linear.Vector_Time_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_piecewise_linear.Vector_Time___nonzero__)
    __bool__ = _swig_new_instance_method(_piecewise_linear.Vector_Time___bool__)
    __len__ = _swig_new_instance_method(_piecewise_linear.Vector_Time___len__)
    __getslice__ = _swig_new_instance_method(_piecewise_linear.Vector_Time___getslice__)
    __setslice__ = _swig_new_instance_method(_piecewise_linear.Vector_Time___setslice__)
    __delslice__ = _swig_new_instance_method(_piecewise_linear.Vector_Time___delslice__)
    __delitem__ = _swig_new_instance_method(_piecewise_linear.Vector_Time___delitem__)
    __getitem__ = _swig_new_instance_method(_piecewise_linear.Vector_Time___getitem__)
    __setitem__ = _swig_new_instance_method(_piecewise_linear.Vector_Time___setitem__)
    pop = _swig_new_instance_method(_piecewise_linear.Vector_Time_pop)
    append = _swig_new_instance_method(_piecewise_linear.Vector_Time_append)
    empty = _swig_new_instance_method(_piecewise_linear.Vector_Time_empty)
    size = _swig_new_instance_method(_piecewise_linear.Vector_Time_size)
    swap = _swig_new_instance_method(_piecewise_linear.Vector_Time_swap)
    begin = _swig_new_instance_method(_piecewise_linear.Vector_Time_begin)
    end = _swig_new_instance_method(_piecewise_linear.Vector_Time_end)
    rbegin = _swig_new_instance_method(_piecewise_linear.Vector_Time_rbegin)
    rend = _swig_new_instance_method(_piecewise_linear.Vector_Time_rend)
    clear = _swig_new_instance_method(_piecewise_linear.Vector_Time_clear)
    get_allocator = _swig_new_instance_method(_piecewise_linear.Vector_Time_get_allocator)
    pop_back = _swig_new_instance_method(_piecewise_linear.Vector_Time_pop_back)
    erase = _swig_new_instance_method(_piecewise_linear.Vector_Time_erase)

    def __init__(self, *args):
        _piecewise_linear.Vector_Time_swiginit(self, _piecewise_linear.new_Vector_Time(*args))
    push_back = _swig_new_instance_method(_piecewise_linear.Vector_Time_push_back)
    front = _swig_new_instance_method(_piecewise_linear.Vector_Time_front)
    back = _swig_new_instance_method(_piecewise_linear.Vector_Time_back)
    assign = _swig_new_instance_method(_piecewise_linear.Vector_Time_assign)
    resize = _swig_new_instance_method(_piecewise_linear.Vector_Time_resize)
    insert = _swig_new_instance_method(_piecewise_linear.Vector_Time_insert)
    reserve = _swig_new_instance_method(_piecewise_linear.Vector_Time_reserve)
    capacity = _swig_new_instance_method(_piecewise_linear.Vector_Time_capacity)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _piecewise_linear.delete_Vector_Time

# Register Vector_Time in _piecewise_linear:
_piecewise_linear.Vector_Time_swigregister(Vector_Time)
class Vector_Time2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_piecewise_linear.Vector_Time2_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_piecewise_linear.Vector_Time2___nonzero__)
    __bool__ = _swig_new_instance_method(_piecewise_linear.Vector_Time2___bool__)
    __len__ = _swig_new_instance_method(_piecewise_linear.Vector_Time2___len__)
    __getslice__ = _swig_new_instance_method(_piecewise_linear.Vector_Time2___getslice__)
    __setslice__ = _swig_new_instance_method(_piecewise_linear.Vector_Time2___setslice__)
    __delslice__ = _swig_new_instance_method(_piecewise_linear.Vector_Time2___delslice__)
    __delitem__ = _swig_new_instance_method(_piecewise_linear.Vector_Time2___delitem__)
    __getitem__ = _swig_new_instance_method(_piecewise_linear.Vector_Time2___getitem__)
    __setitem__ = _swig_new_instance_method(_piecewise_linear.Vector_Time2___setitem__)
    pop = _swig_new_instance_method(_piecewise_linear.Vector_Time2_pop)
    append = _swig_new_instance_method(_piecewise_linear.Vector_Time2_append)
    empty = _swig_new_instance_method(_piecewise_linear.Vector_Time2_empty)
    size = _swig_new_instance_method(_piecewise_linear.Vector_Time2_size)
    swap = _swig_new_instance_method(_piecewise_linear.Vector_Time2_swap)
    begin = _swig_new_instance_method(_piecewise_linear.Vector_Time2_begin)
    end = _swig_new_instance_method(_piecewise_linear.Vector_Time2_end)
    rbegin = _swig_new_instance_method(_piecewise_linear.Vector_Time2_rbegin)
    rend = _swig_new_instance_method(_piecewise_linear.Vector_Time2_rend)
    clear = _swig_new_instance_method(_piecewise_linear.Vector_Time2_clear)
    get_allocator = _swig_new_instance_method(_piecewise_linear.Vector_Time2_get_allocator)
    pop_back = _swig_new_instance_method(_piecewise_linear.Vector_Time2_pop_back)
    erase = _swig_new_instance_method(_piecewise_linear.Vector_Time2_erase)

    def __init__(self, *args):
        _piecewise_linear.Vector_Time2_swiginit(self, _piecewise_linear.new_Vector_Time2(*args))
    push_back = _swig_new_instance_method(_piecewise_linear.Vector_Time2_push_back)
    front = _swig_new_instance_method(_piecewise_linear.Vector_Time2_front)
    back = _swig_new_instance_method(_piecewise_linear.Vector_Time2_back)
    assign = _swig_new_instance_method(_piecewise_linear.Vector_Time2_assign)
    resize = _swig_new_instance_method(_piecewise_linear.Vector_Time2_resize)
    insert = _swig_new_instance_method(_piecewise_linear.Vector_Time2_insert)
    reserve = _swig_new_instance_method(_piecewise_linear.Vector_Time2_reserve)
    capacity = _swig_new_instance_method(_piecewise_linear.Vector_Time2_capacity)
    __swig_destroy__ = _piecewise_linear.delete_Vector_Time2

# Register Vector_Time2 in _piecewise_linear:
_piecewise_linear.Vector_Time2_swigregister(Vector_Time2)
class PiecewiseLinear(geocal_swig.with_parameter.WithParameter):
    r"""

    This is a piecewise linear/constant function.

    C++ includes: piecewise_linear.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LINEAR = _piecewise_linear.PiecewiseLinear_LINEAR
    CONSTANT = _piecewise_linear.PiecewiseLinear_CONSTANT
    LINEAR_TO_ZERO = _piecewise_linear.PiecewiseLinear_LINEAR_TO_ZERO
    FunctionType = property(_piecewise_linear.PiecewiseLinear_FunctionType_get, _piecewise_linear.PiecewiseLinear_FunctionType_set)

    def __init__(self, X, T):
        r"""

        PiecewiseLinear::PiecewiseLinear(const std::vector< Time > &X, const blitz::Array< int, 1 > &T)
        GeoCal::PiecewiseLinear::PiecewiseLinear
        """
        _piecewise_linear.PiecewiseLinear_swiginit(self, _piecewise_linear.new_PiecewiseLinear(X, T))
    _v_parameter_mask = _swig_new_instance_method(_piecewise_linear.PiecewiseLinear__v_parameter_mask)

    @property
    def parameter_mask(self):
        return self._v_parameter_mask()

    @parameter_mask.setter
    def parameter_mask(self, value):
      self._v_parameter_mask(value)

    value = _swig_new_instance_method(_piecewise_linear.PiecewiseLinear_value)
    __str__ = _swig_new_instance_method(_piecewise_linear.PiecewiseLinear___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _piecewise_linear.delete_PiecewiseLinear

# Register PiecewiseLinear in _piecewise_linear:
_piecewise_linear.PiecewiseLinear_swigregister(PiecewiseLinear)

__all__ = ["PiecewiseLinear"]


