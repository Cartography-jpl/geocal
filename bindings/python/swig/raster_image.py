# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _raster_image

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _raster_image.SWIG_PyInstanceMethod_New
_swig_new_static_method = _raster_image.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _raster_image.delete_SwigPyIterator
    value = _swig_new_instance_method(_raster_image.SwigPyIterator_value)
    incr = _swig_new_instance_method(_raster_image.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_raster_image.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_raster_image.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_raster_image.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_raster_image.SwigPyIterator_copy)
    next = _swig_new_instance_method(_raster_image.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_raster_image.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_raster_image.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_raster_image.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_raster_image.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_raster_image.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_raster_image.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_raster_image.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_raster_image.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_raster_image.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _raster_image:
_raster_image.SwigPyIterator_swigregister(SwigPyIterator)
SWIG_MODULE_ALREADY_DONE = _raster_image.SWIG_MODULE_ALREADY_DONE
SHARED_PTR_DISOWN = _raster_image.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class RasterImageTileIterator(geocal_swig.generic_object.GenericObject):
    r"""

    It can be useful to step through a Raster Image in tiles.

    This is a helper class for RasterImage to do this.

    C++ includes: raster_image.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Ri):
        r"""

        RasterImageTileIterator::RasterImageTileIterator(const RasterImage &Ri, int Number_tile_line, int Number_tile_sample)
        GeoCal::RasterImageTileIterator::RasterImageTileIterator
        Constructor, where we supply a tile size to use (which may be
        different than Ri's tile size).

        """
        _raster_image.RasterImageTileIterator_swiginit(self, _raster_image.new_RasterImageTileIterator(Ri))
    _v_istart = _swig_new_instance_method(_raster_image.RasterImageTileIterator__v_istart)

    @property
    def istart(self):
        return self._v_istart()

    _v_jstart = _swig_new_instance_method(_raster_image.RasterImageTileIterator__v_jstart)

    @property
    def jstart(self):
        return self._v_jstart()

    _v_iend = _swig_new_instance_method(_raster_image.RasterImageTileIterator__v_iend)

    @property
    def iend(self):
        return self._v_iend()

    _v_jend = _swig_new_instance_method(_raster_image.RasterImageTileIterator__v_jend)

    @property
    def jend(self):
        return self._v_jend()

    _v_number_line = _swig_new_instance_method(_raster_image.RasterImageTileIterator__v_number_line)

    @property
    def number_line(self):
        return self._v_number_line()

    _v_number_sample = _swig_new_instance_method(_raster_image.RasterImageTileIterator__v_number_sample)

    @property
    def number_sample(self):
        return self._v_number_sample()

    _v_end = _swig_new_instance_method(_raster_image.RasterImageTileIterator__v_end)

    @property
    def end(self):
        return self._v_end()

    next = _swig_new_instance_method(_raster_image.RasterImageTileIterator_next)
    __str__ = _swig_new_instance_method(_raster_image.RasterImageTileIterator___str__)
    __swig_destroy__ = _raster_image.delete_RasterImageTileIterator

# Register RasterImageTileIterator in _raster_image:
_raster_image.RasterImageTileIterator_swigregister(RasterImageTileIterator)
class RasterImage(geocal_swig.generic_object.GenericObject):
    r"""

    This is a general image class.

    Conceptually, an image is just a two dimensional array of integers,
    although it is not necessarily implemented this way. This is an
    abstract class, containing behavior common to all images. It handles
    keeping track of the size of the image, but all other behaviour needs
    to be defined by subclasses.

    It is common for Raster data to be stored on disk as a series of
    tiles. It can be significantly more efficient to access and write the
    data in tiles. To support this, we provide a "preferred" tile size
    given by number_tile_line() and number_tile_sample(). Classes using a
    RasterImage are free to ignore this tiling - data can be read and
    written in any order desired, and the only impact of tiles is in the
    performance.

    It is very common to want to step through a file "efficiently".
    There is a macro "RASTER_FOREACH(Img, IND1, IND2)" that steps
    through a given raster image, setting the index variable IND1 and IND2
    to the line and samples. This steps through by tiles, so it avoids
    reading the same tile multiple times. If you need to step through by
    tiles (rather than looping through all line and samples), the class
    RasterImageTileIterator can be used.

    The default tile size is the entire image, derived classes can supply
    other values if desired.

    A RasterImage may or may not have a Rpc, Rsm, or MapInfo associated
    with it. You can query has_rpc(), has_rsm(), and has_mapinfo() to find
    out if it has this metadata, and if it does you can access this by
    rpc(), rsm() and map_info().

    C++ includes: raster_image.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    overview = _swig_new_instance_method(_raster_image.RasterImage_overview)
    interpolate = _swig_new_instance_method(_raster_image.RasterImage_interpolate)
    _v_copy_needs_double = _swig_new_instance_method(_raster_image.RasterImage__v_copy_needs_double)

    @property
    def copy_needs_double(self):
        return self._v_copy_needs_double()

    _v_number_line = _swig_new_instance_method(_raster_image.RasterImage__v_number_line)

    @property
    def number_line(self):
        return self._v_number_line()

    _v_number_sample = _swig_new_instance_method(_raster_image.RasterImage__v_number_sample)

    @property
    def number_sample(self):
        return self._v_number_sample()

    _v_number_tile_line = _swig_new_instance_method(_raster_image.RasterImage__v_number_tile_line)

    @property
    def number_tile_line(self):
        return self._v_number_tile_line()

    _v_number_tile_sample = _swig_new_instance_method(_raster_image.RasterImage__v_number_tile_sample)

    @property
    def number_tile_sample(self):
        return self._v_number_tile_sample()

    unchecked_read_double = _swig_new_instance_method(_raster_image.RasterImage_unchecked_read_double)
    read_with_pad = _swig_new_instance_method(_raster_image.RasterImage_read_with_pad)
    read_double = _swig_new_instance_method(_raster_image.RasterImage_read_double)
    read_double_with_pad = _swig_new_instance_method(_raster_image.RasterImage_read_double_with_pad)
    read = _swig_new_instance_method(_raster_image.RasterImage_read)
    write = _swig_new_instance_method(_raster_image.RasterImage_write)
    __str__ = _swig_new_instance_method(_raster_image.RasterImage___str__)
    _v_has_map_info = _swig_new_instance_method(_raster_image.RasterImage__v_has_map_info)

    @property
    def has_map_info(self):
        return self._v_has_map_info()

    _v_map_info = _swig_new_instance_method(_raster_image.RasterImage__v_map_info)

    @property
    def map_info(self):
        return self._v_map_info()

    ground_coordinate = _swig_new_instance_method(_raster_image.RasterImage_ground_coordinate)
    coordinate = _swig_new_instance_method(_raster_image.RasterImage_coordinate)
    _v_grid_center_line_resolution = _swig_new_instance_method(_raster_image.RasterImage__v_grid_center_line_resolution)

    @property
    def grid_center_line_resolution(self):
        return self._v_grid_center_line_resolution()

    _v_grid_center_sample_resolution = _swig_new_instance_method(_raster_image.RasterImage__v_grid_center_sample_resolution)

    @property
    def grid_center_sample_resolution(self):
        return self._v_grid_center_sample_resolution()

    _v_has_rpc = _swig_new_instance_method(_raster_image.RasterImage__v_has_rpc)

    @property
    def has_rpc(self):
        return self._v_has_rpc()

    _v_rpc = _swig_new_instance_method(_raster_image.RasterImage__v_rpc)

    @property
    def rpc(self):
        return self._v_rpc()

    _v_has_rsm = _swig_new_instance_method(_raster_image.RasterImage__v_has_rsm)

    @property
    def has_rsm(self):
        return self._v_has_rsm()

    _v_rsm = _swig_new_instance_method(_raster_image.RasterImage__v_rsm)

    @property
    def rsm(self):
        return self._v_rsm()

    __swig_destroy__ = _raster_image.delete_RasterImage

# Register RasterImage in _raster_image:
_raster_image.RasterImage_swigregister(RasterImage)
class ArrayRasterImage(geocal_swig.generic_object.GenericObject):
    r"""

    This is a array of Raster Image.

    This isn't much more than a std::vector, but we do have added support
    in python of being able to serialize this.

    C++ includes: raster_image.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""

        GeoCal::ArrayRasterImage::ArrayRasterImage()
        GeoCal::ArrayRasterImage::ArrayRasterImage
        Create an empty array.

        """
        _raster_image.ArrayRasterImage_swiginit(self, _raster_image.new_ArrayRasterImage())
    append = _swig_new_instance_method(_raster_image.ArrayRasterImage_append)
    size = _swig_new_instance_method(_raster_image.ArrayRasterImage_size)
    get = _swig_new_instance_method(_raster_image.ArrayRasterImage_get)
    set = _swig_new_instance_method(_raster_image.ArrayRasterImage_set)

    def __getitem__(self, index):
      return self.get(index)

    def __setitem__(self, index, val):
      self.set(index, val)

    def __len__(self):
      return self.size()

    __str__ = _swig_new_instance_method(_raster_image.ArrayRasterImage___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _raster_image.delete_ArrayRasterImage

# Register ArrayRasterImage in _raster_image:
_raster_image.ArrayRasterImage_swigregister(ArrayRasterImage)
copy_no_fill = _raster_image.copy_no_fill
fill_image = _raster_image.fill_image
class Vector_RasterImage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_raster_image.Vector_RasterImage_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_raster_image.Vector_RasterImage___nonzero__)
    __bool__ = _swig_new_instance_method(_raster_image.Vector_RasterImage___bool__)
    __len__ = _swig_new_instance_method(_raster_image.Vector_RasterImage___len__)
    __getslice__ = _swig_new_instance_method(_raster_image.Vector_RasterImage___getslice__)
    __setslice__ = _swig_new_instance_method(_raster_image.Vector_RasterImage___setslice__)
    __delslice__ = _swig_new_instance_method(_raster_image.Vector_RasterImage___delslice__)
    __delitem__ = _swig_new_instance_method(_raster_image.Vector_RasterImage___delitem__)
    __getitem__ = _swig_new_instance_method(_raster_image.Vector_RasterImage___getitem__)
    __setitem__ = _swig_new_instance_method(_raster_image.Vector_RasterImage___setitem__)
    pop = _swig_new_instance_method(_raster_image.Vector_RasterImage_pop)
    append = _swig_new_instance_method(_raster_image.Vector_RasterImage_append)
    empty = _swig_new_instance_method(_raster_image.Vector_RasterImage_empty)
    size = _swig_new_instance_method(_raster_image.Vector_RasterImage_size)
    swap = _swig_new_instance_method(_raster_image.Vector_RasterImage_swap)
    begin = _swig_new_instance_method(_raster_image.Vector_RasterImage_begin)
    end = _swig_new_instance_method(_raster_image.Vector_RasterImage_end)
    rbegin = _swig_new_instance_method(_raster_image.Vector_RasterImage_rbegin)
    rend = _swig_new_instance_method(_raster_image.Vector_RasterImage_rend)
    clear = _swig_new_instance_method(_raster_image.Vector_RasterImage_clear)
    get_allocator = _swig_new_instance_method(_raster_image.Vector_RasterImage_get_allocator)
    pop_back = _swig_new_instance_method(_raster_image.Vector_RasterImage_pop_back)
    erase = _swig_new_instance_method(_raster_image.Vector_RasterImage_erase)

    def __init__(self, *args):
        _raster_image.Vector_RasterImage_swiginit(self, _raster_image.new_Vector_RasterImage(*args))
    push_back = _swig_new_instance_method(_raster_image.Vector_RasterImage_push_back)
    front = _swig_new_instance_method(_raster_image.Vector_RasterImage_front)
    back = _swig_new_instance_method(_raster_image.Vector_RasterImage_back)
    assign = _swig_new_instance_method(_raster_image.Vector_RasterImage_assign)
    resize = _swig_new_instance_method(_raster_image.Vector_RasterImage_resize)
    insert = _swig_new_instance_method(_raster_image.Vector_RasterImage_insert)
    reserve = _swig_new_instance_method(_raster_image.Vector_RasterImage_reserve)
    capacity = _swig_new_instance_method(_raster_image.Vector_RasterImage_capacity)
    __swig_destroy__ = _raster_image.delete_Vector_RasterImage

# Register Vector_RasterImage in _raster_image:
_raster_image.Vector_RasterImage_swigregister(Vector_RasterImage)

__all__ = ["copy_no_fill","Vector_RasterImage","RasterImage","ArrayRasterImage","RasterImageTileIterator"]


