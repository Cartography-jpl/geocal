# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _gdal_raster_image

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _gdal_raster_image.SWIG_PyInstanceMethod_New
_swig_new_static_method = _gdal_raster_image.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _gdal_raster_image.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gdal_raster_image.delete_SwigPyIterator
    value = _swig_new_instance_method(_gdal_raster_image.SwigPyIterator_value)
    incr = _swig_new_instance_method(_gdal_raster_image.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_gdal_raster_image.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_gdal_raster_image.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_gdal_raster_image.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_gdal_raster_image.SwigPyIterator_copy)
    next = _swig_new_instance_method(_gdal_raster_image.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_gdal_raster_image.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_gdal_raster_image.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_gdal_raster_image.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_gdal_raster_image.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_gdal_raster_image.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_gdal_raster_image.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_gdal_raster_image.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_gdal_raster_image.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_gdal_raster_image.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _gdal_raster_image:
_gdal_raster_image.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _gdal_raster_image.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.raster_image_tiled_file
import geocal_swig.raster_image_variable
import geocal_swig.raster_image
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class GdalRasterImage(geocal_swig.raster_image_tiled_file.RasterImageTiledFile):
    r"""

    This wraps a Gdal<T> to make a RasterImage.

    The type of T should be one we can convert to and from a int, since
    this is what a RasterImage works in.

    C++ includes: gdal_raster_image.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Byte = _gdal_raster_image.GdalRasterImage_Byte
    UInt16 = _gdal_raster_image.GdalRasterImage_UInt16
    Int16 = _gdal_raster_image.GdalRasterImage_Int16
    UInt32 = _gdal_raster_image.GdalRasterImage_UInt32
    Int32 = _gdal_raster_image.GdalRasterImage_Int32
    Float32 = _gdal_raster_image.GdalRasterImage_Float32
    Float64 = _gdal_raster_image.GdalRasterImage_Float64

    def __init__(self, *args):
        r"""

        GeoCal::GdalRasterImage::GdalRasterImage(const boost::shared_ptr< Gdal< T > > &Data)
        Constructor. 
        """
        _gdal_raster_image.GdalRasterImage_swiginit(self, _gdal_raster_image.new_GdalRasterImage(*args))
    read_all_bands = _swig_new_static_method(_gdal_raster_image.GdalRasterImage_read_all_bands)
    _v_gdal_data_base = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage__v_gdal_data_base)

    @property
    def gdal_data_base(self):
        return self._v_gdal_data_base()

    flush = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage_flush)
    close = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage_close)
    _v_is_closed = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage__v_is_closed)

    @property
    def is_closed(self):
        return self._v_is_closed()

    set_map_info = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage_set_map_info)
    set_rpc = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage_set_rpc)
    metadata_list = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage_metadata_list)
    has_metadata = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage_has_metadata)
    set_metadata = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage_set_metadata)
    _v_file_names = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage__v_file_names)

    @property
    def file_names(self):
        return self._v_file_names()

    map_info_from_nitf_corner = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage_map_info_from_nitf_corner)
    set_fill_value = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage_set_fill_value)
    set_scale = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage_set_scale)
    set_offset = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage_set_offset)
    write_gdal = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage_write_gdal)
    _v_band_id = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage__v_band_id)

    @property
    def band_id(self):
        return self._v_band_id()

    _v_offset = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage__v_offset)

    @property
    def offset(self):
        return self._v_offset()

    _v_scale = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage__v_scale)

    @property
    def scale(self):
        return self._v_scale()

    _v_unit_type = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage__v_unit_type)

    @property
    def unit_type(self):
        return self._v_unit_type()

    _v_raster_data_type = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage__v_raster_data_type)

    @property
    def raster_data_type(self):
        return self._v_raster_data_type()

    _v_update = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage__v_update)

    @property
    def update(self):
        return self._v_update()

    _v_rpc = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage__v_rpc)

    @property
    def rpc(self):
        return self._v_rpc()

    _v_map_info = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage__v_map_info)

    @property
    def map_info(self):
        return self._v_map_info()

    _v_has_gcps = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage__v_has_gcps)

    @property
    def has_gcps(self):
        return self._v_has_gcps()

    _v_gcps = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage__v_gcps)

    @property
    def gcps(self):
        return self._v_gcps()


    @rpc.setter
    def rpc(self, val):
       self.set_rpc(val)

    @map_info.setter
    def map_info(self, val):
       self.set_map_info(val)

    def __getitem__(self, key):
        if(isinstance(key, list) or isinstance(key, tuple)):
          domain, ky = key
          return self.metadata(ky, domain)
        else:
          return self.metadata(key)

    def __setitem__(self, key, v):
        if(isinstance(key, list) or isinstance(key, tuple)):
          domain, ky = key
          self.set_metadata(ky, v, domain)
        else:
          self.set_metadata(key, v)

    def __contains__(self, key):
        if(isinstance(key, list) or isinstance(key, tuple)):
          domain, ky = key
          return self.has_metadata(ky, domain)
        else:
          return self.has_metadata(key)


    metadata = _swig_new_instance_method(_gdal_raster_image.GdalRasterImage_metadata)
    save_to_file = _swig_new_static_method(_gdal_raster_image.GdalRasterImage_save_to_file)
    save_to_erdas = _swig_new_static_method(_gdal_raster_image.GdalRasterImage_save_to_erdas)
    save = _swig_new_static_method(_gdal_raster_image.GdalRasterImage_save)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _gdal_raster_image.delete_GdalRasterImage

# Register GdalRasterImage in _gdal_raster_image:
_gdal_raster_image.GdalRasterImage_swigregister(GdalRasterImage)

__all__ = ["GdalRasterImage"]


