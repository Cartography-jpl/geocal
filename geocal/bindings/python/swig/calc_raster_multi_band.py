# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _calc_raster_multi_band.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_calc_raster_multi_band', [dirname(__file__)])
        except ImportError:
            import _calc_raster_multi_band
            return _calc_raster_multi_band
        if fp is not None:
            try:
                _mod = imp.load_module('_calc_raster_multi_band', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _calc_raster_multi_band = swig_import_helper()
    del swig_import_helper
else:
    import _calc_raster_multi_band
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _calc_raster_multi_band.SHARED_PTR_DISOWN
def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal.raster_image_multi_band_variable
import geocal.raster_image_multi_band
import geocal.generic_object
class CalcRasterMultiBand(geocal.raster_image_multi_band_variable.RasterImageMultiBandVariable):
    """
    Some classes most naturally generate a RasterImageMultiBand by
    calculating a results for an array of data (e.g., a tile).

    This class handles the common behavior for these classes.

    This is very similar to RasterImageMultiBand made upf of CalcRaster,
    the difference is that for this class it makes sense to calculate all
    the bands at once.

    C++ includes: calc_raster_multi_band.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def read_double(self, *args):
        """
        Array< double, 3 > CalcRasterMultiBand::read_double(int Lstart, int Sstart, int Nline, int Nsamp) const

        """
        return _calc_raster_multi_band.CalcRasterMultiBand_read_double(self, *args)

    @property
    def number_band(self):
        return self._v_number_band()

    @property
    def data(self):
        return self._v_data()

    def __init__(self, *args): 
        if self.__class__ == CalcRasterMultiBand:
            _self = None
        else:
            _self = self
        _calc_raster_multi_band.CalcRasterMultiBand_swiginit(self,_calc_raster_multi_band.new_CalcRasterMultiBand(_self, *args))
    __swig_destroy__ = _calc_raster_multi_band.delete_CalcRasterMultiBand
    def __disown__(self):
        self.this.disown()
        _calc_raster_multi_band.disown_CalcRasterMultiBand(self)
        return weakref_proxy(self)
CalcRasterMultiBand.read_double = new_instancemethod(_calc_raster_multi_band.CalcRasterMultiBand_read_double,None,CalcRasterMultiBand)
CalcRasterMultiBand.raster_image = new_instancemethod(_calc_raster_multi_band.CalcRasterMultiBand_raster_image,None,CalcRasterMultiBand)
CalcRasterMultiBand._v_number_band = new_instancemethod(_calc_raster_multi_band.CalcRasterMultiBand__v_number_band,None,CalcRasterMultiBand)
CalcRasterMultiBand._v_data = new_instancemethod(_calc_raster_multi_band.CalcRasterMultiBand__v_data,None,CalcRasterMultiBand)
CalcRasterMultiBand.calc = new_instancemethod(_calc_raster_multi_band.CalcRasterMultiBand_calc,None,CalcRasterMultiBand)
CalcRasterMultiBand.initialize = new_instancemethod(_calc_raster_multi_band.CalcRasterMultiBand_initialize,None,CalcRasterMultiBand)
CalcRasterMultiBand_swigregister = _calc_raster_multi_band.CalcRasterMultiBand_swigregister
CalcRasterMultiBand_swigregister(CalcRasterMultiBand)



