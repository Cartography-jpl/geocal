#! /usr/bin/env python
#
# This takes a VICAR file with a RSM and a set of tiepoints, and uses this
# to produce a improved RSM.

import geocal
import subprocess
import os

version = "September 21, 2020"
usage='''Usage:
  rsm_improve [options] <image> <dem_file> <tiepoint_file> <output>
  rsm_improve -h | --help
  rsm_improve -v | --version

This takes a VICAR file with a RSM or GLAS/GFM and a set of tiepoints,
and uses this to produce a improved RSM or GLAS/GFM.

The image should be a VICAR file with a associated RSM (e.g, output from
mars_generate_rsm). The dem_file should be the output of shelve_dem 
(e.g., a ".xml" file). Tiepoint_file is the output of rsm_tiepoint.
We copy the input file to the output name, and create a new RSM for it
with an updated adjustment.

The adjustment can be one of several set of parameters, see the option.

Options:
  -h --help         
       Print this message

  --image-correction
       Use the image correction parameters. This is the default if nothing
       else is selected.

  --ground-rotation
       Use the ground rotation correction.

  --ground-correction
       Use the ground correction.

  --number-position-breakpoint=d
       Number of position breakpoints for GLAS/GFM. [default: 1]

  --number-attitude-breakpoint=d
       Number of attitude breakpoints for GLAS/GFM. [default: 0]

  --verbose
       Print more information as we run.

  -v --version      
       Print program version
'''

# Mapping between long name and shorter vicar name
long_name_to_vicar = { "image" : "img",
                       "output" : "out",
                       "dem_file" : "dem",
                       "tiepoint_file" : "tp",
                       "image_correction" : "icor",
                       "ground_rotation" : "grot",
                       "ground_correction" : "gcor",
                       "number_position_breakpoint" : "npos",
                       "number_attitude_breakpoint" : "natt",
                       "verbose" : "verbose"
                       }


args = geocal.docopt_simple(usage, version=version,
                     long_name_to_vicar=long_name_to_vicar)

dem = geocal.read_shelve(args.dem_file)
tpcol = geocal.read_shelve(args.tiepoint_file)
if(geocal.VicarLiteFile.is_vicar_file(args.image)):
    img = geocal.VicarLiteRasterImage(args.image)
else:
    img = geocal.GdalRasterImage(args.image)
    rsm = geocal.read_shelve(os.path.splitext(args.image)[0] + ".rsm.xml")
if(img.has_igc_glas_gfm):
    igc = img.igc_glas_gfm
    igc.image = img
    igc.dem = dem
elif(img.has_rsm):
    rsm = img.rsm
    igc = geocal.RsmImageGroundConnection(rsm, dem, img, "RSM Image")
igccol = geocal.IgcArray([igc,])
if(img.has_rsm):
    icorr = args.image_correction
    if((not args.image_correction) and (not args.ground_correction) and
       (not args.ground_rotation)):
        # Default is image correction, if nothing else specified
        icorr = True
    adj = geocal.RsmAdjustableParameterA(igc, rsm.rsm_id, "Triangulation_1",
                                         icorr, args.ground_rotation,
                                         args.ground_correction)
    rsm.rsm_adjustable_parameter = adj
else:
    orb_corr = geocal.OrbitOffsetCorrection(igc.ipi.orbit)
    igc.ipi.orbit = orb_corr
    if(args.number_position_breakpoint == 0):
        orb_corr.fit_position_x = False
        orb_corr.fit_position_y = False
        orb_corr.fit_position_z = False
    if(args.number_attitude_breakpoint == 0):
        orb_corr.fit_yaw = False
        orb_corr.fit_pitch = False
        orb_corr.fit_roll = False
    if(args.number_position_breakpoint >= 1):
        orb_corr.insert_position_time_point(igc.ipi.time_table.min_time)
    if(args.number_attitude_breakpoint >= 1):
        orb_corr.insert_attitude_time_point(igc.ipi.time_table.min_time)
    if(args.number_position_breakpoint >= 2):
        orb_corr.insert_position_time_point(igc.ipi.time_table.max_time)
    if(args.number_attitude_breakpoint >= 2):
        orb_corr.insert_attitude_time_point(igc.ipi.time_table.max_time)
    if(args.number_position_breakpoint > 2):
        nspace = args.number_position_breakpoint - 1
        tspace = (igc.ipi.time_table.max_time -
                  igc.ipi.time_table.min_time) / nspace
        for i in range(args.number_position_breakpoint - 2):
            orb_corr.insert_position_time_point(igc.ipi.time_table.min_time +
                                                (i+1) * tspace)
    if(args.number_attitude_breakpoint > 2):
        nspace = args.number_attitude_breakpoint - 1
        tspace = (igc.ipi.time_table.max_time -
                  igc.ipi.time_table.min_time) / nspace
        for i in range(args.number_attitude_breakpoint - 2):
            orb_corr.insert_attitude_time_point(igc.ipi.time_table.min_time +
                                                (i+1) * tspace)
    igccol.add_object(orb_corr)
    igccol.assume_igc_independent = False
print("Initial data:")
print("----------------------------------")
print(igccol)
print("----------------------------------")
outbase = os.path.splitext(args.output)[0]
initial_igcfname = outbase + "_igccol_initial.xml"
sba_igcfname = outbase + "_igccol_sba.xml"
tp_igcfname = outbase + "_tp_sba.xml"
geocal.write_shelve(initial_igcfname, igccol)
subprocess.run(["sba", "--hold-gcp-fixed", "--verbose",
                initial_igcfname, args.tiepoint_file, sba_igcfname,
                tp_igcfname], check=True)
igccol_sba = geocal.read_shelve(sba_igcfname)
try:
    os.remove(args.output)
except FileNotFoundError:
    pass
if(img.has_rsm):
    subprocess.run(["cp", args.image, args.output], check=True)
    f = geocal.VicarRasterImage(args.output, 1, geocal.VicarFile.UPDATE)
    # NITF file doesn't work yet, so use XML file
    f.set_rsm(igccol_sba.image_ground_connection(0).rsm,
              geocal.VicarFile.RSM_XML_FILE)
else:
    geocal.vicar_update_glas(args.image, args.output, igccol_sba.image_ground_connection(0).ipi.orbit)
print("Improved data:")
print("----------------------------------")
print(igccol_sba)
print("----------------------------------")
# This doesn't give useful output for GLAS/GFM, so comment this out.
# We should probably come up with a a better measure
#df = tpcol.data_frame(igccol, 0)
#print("Initial distance %f m" % df.ground_2d_distance.quantile(.68))
#df_sba = tpcol.data_frame(igccol_sba, 0)
#print("Improved distance %f m" % df_sba.ground_2d_distance.quantile(.68))


                            
