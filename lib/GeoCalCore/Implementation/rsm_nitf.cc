#include "rsm_nitf.h"
#include "geocal_serialize_function.h"
#include <cstdio>
using namespace GeoCal;

//-----------------------------------------------------------------------
/// We have support for saving RSMs as boost XML serialization
/// objects. This works well, but this is not an official standard. It
/// is useful to use a official standard for saving data, so we use
/// the RSM NITF standard, such as:
/// "Replacement Sensor Model Tagged Record Extensions Specification for NITF
/// 2.1" (http://www.gwg.nga.mil/ntb/baseline/docs/RSM/RSM_NITF_TREs_v1.0_.pdf)
///
/// While we could implement this entirely in C++, it is tricky to
/// handle everything. We already have an implementation in
/// python. This function uses a simple wrapper program that goes to
/// and from a NITF file, using python (boost_nitf_rsm). This should
/// be sufficient, we can always revisit this if there is an issue
/// with performance or the python dependency. But for now, we just
/// route the RSM through a system call.
///
/// This writes the given Rsm to a NITF file with the same name. The
/// NITF file has a single image segment in it with a size of 1x1, and
/// the TREs attached to the image segment supply the RSM.
//-----------------------------------------------------------------------

void GeoCal::rsm_write_nitf(const std::string& Fname,
		    const boost::shared_ptr<Rsm>& R)
{
  std::string data = serialize_write_string(R);
  std::string cmd = "boost_nitf_rsm to_nitf " + Fname;
  FILE* f = popen(cmd.c_str(), "w");
  if(!f)
    throw Exception("Trouble calling boost_nitf_rsm in rsm_write_nitf");
  fwrite(data.c_str(), sizeof(char), data.size(), f);
  int status = pclose(f);
  if(status)
    throw Exception("Trouble calling boost_nitf_rsm in rsm_write_nitf");
}

//-----------------------------------------------------------------------
/// We have support for saving RSMs as boost XML serialization
/// objects. This works well, but this is not an official standard. It
/// is useful to use a official standard for saving data, so we use
/// the RSM NITF standard, such as:
/// "Replacement Sensor Model Tagged Record Extensions Specification for NITF
/// 2.1" (http://www.gwg.nga.mil/ntb/baseline/docs/RSM/RSM_NITF_TREs_v1.0_.pdf)
///
/// While we could implement this entirely in C++, it is tricky to
/// handle everything. We already have an implementation in
/// python. This function uses a simple wrapper program that goes to
/// and from a NITF file, using python (boost_nitf_rsm). This should
/// be sufficient, we can always revisit this if there is an issue
/// with performance or the python dependency. But for now, we just
/// route the RSM through a system call.
///
/// This reads a NITF file generated by rsm_write_nitf. We just take
/// the first image segment found in the file, and RSM defined by that
/// image segments TREs.
//-----------------------------------------------------------------------

boost::shared_ptr<Rsm> GeoCal::rsm_read_nitf(const std::string& Fname)
{
  std::string cmd = "boost_nitf_rsm from_nitf " + Fname;
  FILE* f = popen(cmd.c_str(), "r");
  if(!f)
    throw Exception("Trouble calling boost_nitf_rsm in rsm_read_nitf");
  std::string data;
  data.reserve(1000);		// We'll need some space, so go ahead
				// at set it aside.
  int c = fgetc(f);
  while(!feof(f)) {
    data.push_back((char) c);
    c = getc(f);
  }
  int status = pclose(f);
  if(status)
    throw Exception("Trouble calling boost_nitf_rsm in rsm_read_nitf");
  return serialize_read_string<Rsm>(data);
}
