# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _rsm_id

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rsm_id.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rsm_id.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _rsm_id.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rsm_id.delete_SwigPyIterator
    value = _swig_new_instance_method(_rsm_id.SwigPyIterator_value)
    incr = _swig_new_instance_method(_rsm_id.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_rsm_id.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_rsm_id.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_rsm_id.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_rsm_id.SwigPyIterator_copy)
    next = _swig_new_instance_method(_rsm_id.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_rsm_id.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_rsm_id.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_rsm_id.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_rsm_id.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_rsm_id.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_rsm_id.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_rsm_id.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_rsm_id.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_rsm_id.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _rsm_id:
_rsm_id.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _rsm_id.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class RsmIdTiming(geocal_swig.generic_object.GenericObject):
    r"""

    RSM timing information.

    This is just a structure, but we put this together because we always
    either want all or none of these fields.

    C++ includes: rsm_id.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Number_row_acquired_simulatenously, Number_col_acquired_simulatenously, Time_betweeen_adjacent_row_group, Time_betweeen_adjacent_col_group):
        r"""

        GeoCal::RsmIdTiming::RsmIdTiming(int Number_row_acquired_simulatenously, int
        Number_col_acquired_simulatenously, double
        Time_betweeen_adjacent_row_group, double
        Time_betweeen_adjacent_col_group)

        """
        _rsm_id.RsmIdTiming_swiginit(self, _rsm_id.new_RsmIdTiming(Number_row_acquired_simulatenously, Number_col_acquired_simulatenously, Time_betweeen_adjacent_row_group, Time_betweeen_adjacent_col_group))
    _v_number_row_acquired_simultaneously = _swig_new_instance_method(_rsm_id.RsmIdTiming__v_number_row_acquired_simultaneously)

    @property
    def number_row_acquired_simultaneously(self):
        return self._v_number_row_acquired_simultaneously()

    @number_row_acquired_simultaneously.setter
    def number_row_acquired_simultaneously(self, value):
      self._v_number_row_acquired_simultaneously(value)

    _v_number_col_acquired_simultaneously = _swig_new_instance_method(_rsm_id.RsmIdTiming__v_number_col_acquired_simultaneously)

    @property
    def number_col_acquired_simultaneously(self):
        return self._v_number_col_acquired_simultaneously()

    @number_col_acquired_simultaneously.setter
    def number_col_acquired_simultaneously(self, value):
      self._v_number_col_acquired_simultaneously(value)

    _v_time_between_adjacent_row_group = _swig_new_instance_method(_rsm_id.RsmIdTiming__v_time_between_adjacent_row_group)

    @property
    def time_between_adjacent_row_group(self):
        return self._v_time_between_adjacent_row_group()

    @time_between_adjacent_row_group.setter
    def time_between_adjacent_row_group(self, value):
      self._v_time_between_adjacent_row_group(value)

    _v_time_between_adjacent_col_group = _swig_new_instance_method(_rsm_id.RsmIdTiming__v_time_between_adjacent_col_group)

    @property
    def time_between_adjacent_col_group(self):
        return self._v_time_between_adjacent_col_group()

    @time_between_adjacent_col_group.setter
    def time_between_adjacent_col_group(self, value):
      self._v_time_between_adjacent_col_group(value)

    __str__ = _swig_new_instance_method(_rsm_id.RsmIdTiming___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _rsm_id.delete_RsmIdTiming

# Register RsmIdTiming in _rsm_id:
_rsm_id.RsmIdTiming_swigregister(RsmIdTiming)
class RsmId(geocal_swig.generic_object.GenericObject):
    r"""

    This provides additional information about the Rsm, it is what is used
    to populate.

    C++ includes: rsm_id.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Base, Cconv):
        r"""

        GeoCal::RsmId::RsmId(const boost::shared_ptr< RsmBase > &Base, const boost::shared_ptr<
        CoordinateConverter > &Cconv)

        """
        _rsm_id.RsmId_swiginit(self, _rsm_id.new_RsmId(Base, Cconv))
    __str__ = _swig_new_instance_method(_rsm_id.RsmId___str__)
    _v_coordinate_converter = _swig_new_instance_method(_rsm_id.RsmId__v_coordinate_converter)

    @property
    def coordinate_converter(self):
        return self._v_coordinate_converter()

    @coordinate_converter.setter
    def coordinate_converter(self, value):
      self._v_coordinate_converter(value)

    _v_image_identifier = _swig_new_instance_method(_rsm_id.RsmId__v_image_identifier)

    @property
    def image_identifier(self):
        return self._v_image_identifier()

    @image_identifier.setter
    def image_identifier(self, value):
      self._v_image_identifier(value)

    _v_rsm_support_data_edition = _swig_new_instance_method(_rsm_id.RsmId__v_rsm_support_data_edition)

    @property
    def rsm_support_data_edition(self):
        return self._v_rsm_support_data_edition()

    @rsm_support_data_edition.setter
    def rsm_support_data_edition(self, value):
      self._v_rsm_support_data_edition(value)

    _v_image_sequence_identifier = _swig_new_instance_method(_rsm_id.RsmId__v_image_sequence_identifier)

    @property
    def image_sequence_identifier(self):
        return self._v_image_sequence_identifier()

    @image_sequence_identifier.setter
    def image_sequence_identifier(self, value):
      self._v_image_sequence_identifier(value)

    _v_sensor_identifier = _swig_new_instance_method(_rsm_id.RsmId__v_sensor_identifier)

    @property
    def sensor_identifier(self):
        return self._v_sensor_identifier()

    @sensor_identifier.setter
    def sensor_identifier(self, value):
      self._v_sensor_identifier(value)

    _v_sensor_type = _swig_new_instance_method(_rsm_id.RsmId__v_sensor_type)

    @property
    def sensor_type(self):
        return self._v_sensor_type()

    @sensor_type.setter
    def sensor_type(self, value):
      self._v_sensor_type(value)

    _v_image_acquistion_time = _swig_new_instance_method(_rsm_id.RsmId__v_image_acquistion_time)

    @property
    def image_acquistion_time(self):
        return self._v_image_acquistion_time()

    @image_acquistion_time.setter
    def image_acquistion_time(self, value):
      self._v_image_acquistion_time(value)

    _v_timing = _swig_new_instance_method(_rsm_id.RsmId__v_timing)

    @property
    def timing(self):
        return self._v_timing()

    @timing.setter
    def timing(self, value):
      self._v_timing(value)

    _v_ground_domain_vertex = _swig_new_instance_method(_rsm_id.RsmId__v_ground_domain_vertex)

    @property
    def ground_domain_vertex(self):
        return self._v_ground_domain_vertex()

    @ground_domain_vertex.setter
    def ground_domain_vertex(self, value):
      self._v_ground_domain_vertex(value)

    in_ground_domain = _swig_new_instance_method(_rsm_id.RsmId_in_ground_domain)
    _v_ground_reference_point = _swig_new_instance_method(_rsm_id.RsmId__v_ground_reference_point)

    @property
    def ground_reference_point(self):
        return self._v_ground_reference_point()

    @ground_reference_point.setter
    def ground_reference_point(self, value):
      self._v_ground_reference_point(value)

    _v_full_number_line = _swig_new_instance_method(_rsm_id.RsmId__v_full_number_line)

    @property
    def full_number_line(self):
        return self._v_full_number_line()

    @full_number_line.setter
    def full_number_line(self, value):
      self._v_full_number_line(value)

    _v_full_number_sample = _swig_new_instance_method(_rsm_id.RsmId__v_full_number_sample)

    @property
    def full_number_sample(self):
        return self._v_full_number_sample()

    @full_number_sample.setter
    def full_number_sample(self, value):
      self._v_full_number_sample(value)

    _v_min_line = _swig_new_instance_method(_rsm_id.RsmId__v_min_line)

    @property
    def min_line(self):
        return self._v_min_line()

    @min_line.setter
    def min_line(self, value):
      self._v_min_line(value)

    _v_min_sample = _swig_new_instance_method(_rsm_id.RsmId__v_min_sample)

    @property
    def min_sample(self):
        return self._v_min_sample()

    @min_sample.setter
    def min_sample(self, value):
      self._v_min_sample(value)

    _v_max_line = _swig_new_instance_method(_rsm_id.RsmId__v_max_line)

    @property
    def max_line(self):
        return self._v_max_line()

    @max_line.setter
    def max_line(self, value):
      self._v_max_line(value)

    _v_max_sample = _swig_new_instance_method(_rsm_id.RsmId__v_max_sample)

    @property
    def max_sample(self):
        return self._v_max_sample()

    @max_sample.setter
    def max_sample(self, value):
      self._v_max_sample(value)

    _v_naif_code = _swig_new_instance_method(_rsm_id.RsmId__v_naif_code)

    @property
    def naif_code(self):
        return self._v_naif_code()

    @naif_code.setter
    def naif_code(self, value):
      self._v_naif_code(value)

    tre_string = _swig_new_instance_method(_rsm_id.RsmId_tre_string)
    read_tre_string = _swig_new_static_method(_rsm_id.RsmId_read_tre_string)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _rsm_id.delete_RsmId

# Register RsmId in _rsm_id:
_rsm_id.RsmId_swigregister(RsmId)

__all__ = ["RsmId","RsmIdTiming"]


