# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _spice_planet_orbit

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _spice_planet_orbit.SWIG_PyInstanceMethod_New
_swig_new_static_method = _spice_planet_orbit.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _spice_planet_orbit.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spice_planet_orbit.delete_SwigPyIterator
    value = _swig_new_instance_method(_spice_planet_orbit.SwigPyIterator_value)
    incr = _swig_new_instance_method(_spice_planet_orbit.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_spice_planet_orbit.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_spice_planet_orbit.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_spice_planet_orbit.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_spice_planet_orbit.SwigPyIterator_copy)
    next = _swig_new_instance_method(_spice_planet_orbit.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_spice_planet_orbit.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_spice_planet_orbit.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_spice_planet_orbit.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_spice_planet_orbit.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_spice_planet_orbit.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_spice_planet_orbit.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_spice_planet_orbit.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_spice_planet_orbit.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_spice_planet_orbit.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _spice_planet_orbit:
_spice_planet_orbit.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _spice_planet_orbit.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.orbit
import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.with_parameter
import geocal_swig.look_vector
class SpicePlanetOrbit(geocal_swig.orbit.Orbit):
    r"""

    This is an orbit that uses a SPICE kernel as the underlying
    implementation.

    This class is used with planet satellites. Compare this class with
    SpiceOrbit. These could perhaps be merged at some point, but for right
    now just keep these separate. Don't have enough experience with these
    classes yet to know what the interface should be like, or if these
    really could be merged.

    Note that this combined both the space craft coordinate system and
    conversion to frame coordinates. We could split this out into a
    separate camera model, but there doesn't seem to be much of a reason
    to do this. We could revisit this if there is ever a need to. In
    practice, this means that something like a QuaternionCamera would have
    the identify Frame_to_sc quaternion.

    This class can be a bit on the slow side, you may want to consider
    wrapping it with OrbitListCache to cache the orbit data calculation.

    The Abcorr should be any of the strings spkezp (https://naif.jpl.nasa.
    gov/pub/naif/toolkit_docs/C/cspice/spkezp_c.html) accepts (e.g.,
    "LT").

    Note that if you include the stellar correction (e.g., "LT+S") you
    should not also include the velocity aberration correction in e.g.,
    QuaternionOrbitData. Stellar correction gives the "apparent"
    position, which already accounts for the aberration angle correction

    Also, it is important to note that the light time calculated is to the
    center of the Body, not the surface. If you are trying to find a
    intercept with something near the surface this can be considerably
    different (see sincpt_c vs spkezp_c in the SPICE documentation). So
    generally you don't want anything other than the default "NONE".

    C++ includes: spice_planet_orbit.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        SpicePlanetOrbit::SpicePlanetOrbit(const std::string &Target_name, const std::string
        &Spacecraft_reference_frame_name, const SpiceKernelList &Kernel_list,
        int Naif_id, const std::string &Abcorr="NONE")

        """
        _spice_planet_orbit.SpicePlanetOrbit_swiginit(self, _spice_planet_orbit.new_SpicePlanetOrbit(*args))
    orbit_data = _swig_new_instance_method(_spice_planet_orbit.SpicePlanetOrbit_orbit_data)
    set_min_time = _swig_new_instance_method(_spice_planet_orbit.SpicePlanetOrbit_set_min_time)
    set_max_time = _swig_new_instance_method(_spice_planet_orbit.SpicePlanetOrbit_set_max_time)
    surface_intersect = _swig_new_instance_method(_spice_planet_orbit.SpicePlanetOrbit_surface_intersect)
    _v_kernel_list = _swig_new_instance_method(_spice_planet_orbit.SpicePlanetOrbit__v_kernel_list)

    @property
    def kernel_list(self):
        return self._v_kernel_list()

    _v_naif_id = _swig_new_instance_method(_spice_planet_orbit.SpicePlanetOrbit__v_naif_id)

    @property
    def naif_id(self):
        return self._v_naif_id()

    _v_target_name = _swig_new_instance_method(_spice_planet_orbit.SpicePlanetOrbit__v_target_name)

    @property
    def target_name(self):
        return self._v_target_name()

    _v_spacecraft_reference_frame_name = _swig_new_instance_method(_spice_planet_orbit.SpicePlanetOrbit__v_spacecraft_reference_frame_name)

    @property
    def spacecraft_reference_frame_name(self):
        return self._v_spacecraft_reference_frame_name()

    _v_aberration_correction = _swig_new_instance_method(_spice_planet_orbit.SpicePlanetOrbit__v_aberration_correction)

    @property
    def aberration_correction(self):
        return self._v_aberration_correction()

    @aberration_correction.setter
    def aberration_correction(self, value):
      self._v_aberration_correction(value)


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _spice_planet_orbit.delete_SpicePlanetOrbit

# Register SpicePlanetOrbit in _spice_planet_orbit:
_spice_planet_orbit.SpicePlanetOrbit_swigregister(SpicePlanetOrbit)

__all__ = ["SpicePlanetOrbit"]


