# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _ground_coordinate

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _ground_coordinate.SWIG_PyInstanceMethod_New
_swig_new_static_method = _ground_coordinate.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ground_coordinate.delete_SwigPyIterator
    value = _swig_new_instance_method(_ground_coordinate.SwigPyIterator_value)
    incr = _swig_new_instance_method(_ground_coordinate.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_ground_coordinate.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_ground_coordinate.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_ground_coordinate.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_ground_coordinate.SwigPyIterator_copy)
    next = _swig_new_instance_method(_ground_coordinate.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_ground_coordinate.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_ground_coordinate.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_ground_coordinate.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_ground_coordinate.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_ground_coordinate.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_ground_coordinate.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_ground_coordinate.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_ground_coordinate.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_ground_coordinate.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ground_coordinate:
_ground_coordinate.SwigPyIterator_swigregister(SwigPyIterator)
SWIG_MODULE_ALREADY_DONE = _ground_coordinate.SWIG_MODULE_ALREADY_DONE
SHARED_PTR_DISOWN = _ground_coordinate.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.look_vector
class GroundCoordinate(geocal_swig.generic_object.GenericObject):
    r"""

    This represents a location on the ground.

    It is a base class, each of the derived classes represent different
    coordinate systems that can be used to express the ground location.
    Any ground coordinate can be converted to CartesianFixed coordinates.

    Because it is commonly needed, we also can convert to latitude,
    longitude and height_reference_surface. The default is just convert
    first to CartesianFixed, and then convert to latitude, longitude or
    height_reference_surface, but derived classes can supply more
    efficient versions of this if desired.

    Note that for the earth, the latitude is the standard geodetic
    latitude. However, by convention other planets use Planetocentric
    latitude, the equivalent of geocentric latitude for the other planet.
    This is handled transparently and consistently by the various
    coordinate classes (e.g., PlanetConstant, OgrCoordinate), but you
    should be aware of this difference.

    C++ includes: ground_coordinate.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    _v_latitude = _swig_new_instance_method(_ground_coordinate.GroundCoordinate__v_latitude)

    @property
    def latitude(self):
        return self._v_latitude()

    _v_longitude = _swig_new_instance_method(_ground_coordinate.GroundCoordinate__v_longitude)

    @property
    def longitude(self):
        return self._v_longitude()

    _v_height_reference_surface = _swig_new_instance_method(_ground_coordinate.GroundCoordinate__v_height_reference_surface)

    @property
    def height_reference_surface(self):
        return self._v_height_reference_surface()

    convert_to_cf = _swig_new_instance_method(_ground_coordinate.GroundCoordinate_convert_to_cf)
    __str__ = _swig_new_instance_method(_ground_coordinate.GroundCoordinate___str__)
    naif_code = _swig_new_instance_method(_ground_coordinate.GroundCoordinate_naif_code)
    __swig_destroy__ = _ground_coordinate.delete_GroundCoordinate

# Register GroundCoordinate in _ground_coordinate:
_ground_coordinate.GroundCoordinate_swigregister(GroundCoordinate)
class CartesianInertial(geocal_swig.generic_object.GenericObject):
    r"""

    This gives the location in a Cartesian inertial coordinate system
    (.e.g., ECI).

    See CartesianFixed for a discussion on converting to and from
    CartesianFixed.

    C++ includes: ground_coordinate.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    convert_to_cf = _swig_new_instance_method(_ground_coordinate.CartesianInertial_convert_to_cf)
    ci_to_cf = _swig_new_instance_method(_ground_coordinate.CartesianInertial_ci_to_cf)
    ci_to_cf_with_vel = _swig_new_instance_method(_ground_coordinate.CartesianInertial_ci_to_cf_with_vel)
    naif_code = _swig_new_instance_method(_ground_coordinate.CartesianInertial_naif_code)
    ci_to_cf_quat = _swig_new_instance_method(_ground_coordinate.CartesianInertial_ci_to_cf_quat)
    create = _swig_new_instance_method(_ground_coordinate.CartesianInertial_create)
    reference_surface_intersect_approximate = _swig_new_instance_method(_ground_coordinate.CartesianInertial_reference_surface_intersect_approximate)
    __str__ = _swig_new_instance_method(_ground_coordinate.CartesianInertial___str__)
    _v_position = _swig_new_instance_method(_ground_coordinate.CartesianInertial__v_position)

    @property
    def position(self):
        return self._v_position()

    @position.setter
    def position(self, value):
      self._v_position(value)

    __swig_destroy__ = _ground_coordinate.delete_CartesianInertial

# Register CartesianInertial in _ground_coordinate:
_ground_coordinate.CartesianInertial_swigregister(CartesianInertial)
class CartesianFixed(GroundCoordinate):
    r"""

    This gives the fixed Cartesian Coordinates for a ground coordinate.

    This is an abstract base class, there are CartesianFixed for the Earth
    (Ecr), Mars (MarsFixed), etc.

    We want to be able to convert to and from CartesianInertial
    coordinates. However, we want to abstract out the toolkit used to do
    this. We use the toolkit pointed to by
    CartesianFixed::toolkit_coordinate_interface. If either SPICE or SDP
    is available, then that toolkit is the one used for the conversion. If
    we have both available, then we default to SPICE. You can change the
    choice by updating the variable
    CartesianFixed::toolkit_coordinate_interface.

    C++ includes: ground_coordinate.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    convert_to_ci = _swig_new_instance_method(_ground_coordinate.CartesianFixed_convert_to_ci)
    create = _swig_new_instance_method(_ground_coordinate.CartesianFixed_create)
    ci_to_cf = _swig_new_instance_method(_ground_coordinate.CartesianFixed_ci_to_cf)
    cf_to_ci_with_vel = _swig_new_instance_method(_ground_coordinate.CartesianFixed_cf_to_ci_with_vel)
    ci_to_cf_quat = _swig_new_instance_method(_ground_coordinate.CartesianFixed_ci_to_cf_quat)
    reference_surface_intersect_approximate = _swig_new_instance_method(_ground_coordinate.CartesianFixed_reference_surface_intersect_approximate)
    _v_min_radius_reference_surface = _swig_new_instance_method(_ground_coordinate.CartesianFixed__v_min_radius_reference_surface)

    @property
    def min_radius_reference_surface(self):
        return self._v_min_radius_reference_surface()

    _v_position = _swig_new_instance_method(_ground_coordinate.CartesianFixed__v_position)

    @property
    def position(self):
        return self._v_position()

    @position.setter
    def position(self, value):
      self._v_position(value)

    __swig_destroy__ = _ground_coordinate.delete_CartesianFixed

# Register CartesianFixed in _ground_coordinate:
_ground_coordinate.CartesianFixed_swigregister(CartesianFixed)
class LnLookVector(geocal_swig.look_vector.LookVectorDouble):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ground_coordinate.LnLookVector_swiginit(self, _ground_coordinate.new_LnLookVector(*args))
    to_cf = _swig_new_instance_method(_ground_coordinate.LnLookVector_to_cf)
    __str__ = _swig_new_instance_method(_ground_coordinate.LnLookVector___str__)
    cf_to_enu = _swig_new_static_method(_ground_coordinate.LnLookVector_cf_to_enu)
    enu_to_cf = _swig_new_static_method(_ground_coordinate.LnLookVector_enu_to_cf)
    solar_look_vector = _swig_new_static_method(_ground_coordinate.LnLookVector_solar_look_vector)
    body_look_vector = _swig_new_static_method(_ground_coordinate.LnLookVector_body_look_vector)
    _v_view_azimuth = _swig_new_instance_method(_ground_coordinate.LnLookVector__v_view_azimuth)

    @property
    def view_azimuth(self):
        return self._v_view_azimuth()

    _v_view_zenith = _swig_new_instance_method(_ground_coordinate.LnLookVector__v_view_zenith)

    @property
    def view_zenith(self):
        return self._v_view_zenith()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _ground_coordinate.delete_LnLookVector

# Register LnLookVector in _ground_coordinate:
_ground_coordinate.LnLookVector_swigregister(LnLookVector)
class LnLookVectorWithDerivative(geocal_swig.look_vector.LookVectorAutoDerivativeDouble):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ground_coordinate.LnLookVectorWithDerivative_swiginit(self, _ground_coordinate.new_LnLookVectorWithDerivative(*args))
    to_cf = _swig_new_instance_method(_ground_coordinate.LnLookVectorWithDerivative_to_cf)
    __str__ = _swig_new_instance_method(_ground_coordinate.LnLookVectorWithDerivative___str__)
    _v_view_azimuth = _swig_new_instance_method(_ground_coordinate.LnLookVectorWithDerivative__v_view_azimuth)

    @property
    def view_azimuth(self):
        return self._v_view_azimuth()

    _v_view_zenith = _swig_new_instance_method(_ground_coordinate.LnLookVectorWithDerivative__v_view_zenith)

    @property
    def view_zenith(self):
        return self._v_view_zenith()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _ground_coordinate.delete_LnLookVectorWithDerivative

# Register LnLookVectorWithDerivative in _ground_coordinate:
_ground_coordinate.LnLookVectorWithDerivative_swigregister(LnLookVectorWithDerivative)
class CartesianFixedLookVector(geocal_swig.look_vector.LookVectorDouble):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ground_coordinate.CartesianFixedLookVector_swiginit(self, _ground_coordinate.new_CartesianFixedLookVector(*args))
    __str__ = _swig_new_instance_method(_ground_coordinate.CartesianFixedLookVector___str__)
    solar_look_vector = _swig_new_static_method(_ground_coordinate.CartesianFixedLookVector_solar_look_vector)
    body_look_vector = _swig_new_static_method(_ground_coordinate.CartesianFixedLookVector_body_look_vector)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _ground_coordinate.delete_CartesianFixedLookVector

# Register CartesianFixedLookVector in _ground_coordinate:
_ground_coordinate.CartesianFixedLookVector_swigregister(CartesianFixedLookVector)
distance = _ground_coordinate.distance
convert_position_and_velocity = _ground_coordinate.convert_position_and_velocity
class Vector_GroundCoordinate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate___nonzero__)
    __bool__ = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate___bool__)
    __len__ = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate___len__)
    __getslice__ = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate___getslice__)
    __setslice__ = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate___setslice__)
    __delslice__ = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate___delslice__)
    __delitem__ = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate___delitem__)
    __getitem__ = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate___getitem__)
    __setitem__ = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate___setitem__)
    pop = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_pop)
    append = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_append)
    empty = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_empty)
    size = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_size)
    swap = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_swap)
    begin = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_begin)
    end = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_end)
    rbegin = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_rbegin)
    rend = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_rend)
    clear = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_clear)
    get_allocator = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_get_allocator)
    pop_back = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_pop_back)
    erase = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_erase)

    def __init__(self, *args):
        _ground_coordinate.Vector_GroundCoordinate_swiginit(self, _ground_coordinate.new_Vector_GroundCoordinate(*args))
    push_back = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_push_back)
    front = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_front)
    back = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_back)
    assign = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_assign)
    resize = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_resize)
    insert = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_insert)
    reserve = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_reserve)
    capacity = _swig_new_instance_method(_ground_coordinate.Vector_GroundCoordinate_capacity)
    __swig_destroy__ = _ground_coordinate.delete_Vector_GroundCoordinate

# Register Vector_GroundCoordinate in _ground_coordinate:
_ground_coordinate.Vector_GroundCoordinate_swigregister(Vector_GroundCoordinate)

__all__ = ["GroundCoordinate","CartesianFixed","CartesianInertial","LnLookVector","LnLookVectorWithDerivative","CartesianFixedLookVector","distance","convert_position_and_velocity","Vector_GroundCoordinate"]


