# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _air_mspi_orbit.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_air_mspi_orbit', [dirname(__file__)])
        except ImportError:
            import _air_mspi_orbit
            return _air_mspi_orbit
        if fp is not None:
            try:
                _mod = imp.load_module('_air_mspi_orbit', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _air_mspi_orbit = swig_import_helper()
    del swig_import_helper
else:
    import _air_mspi_orbit
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _air_mspi_orbit.SHARED_PTR_DISOWN
def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.orbit
import geocal_swig.generic_object
class AirMspiOrbit(geocal_swig.orbit.Orbit):
    """
    This reads the AirMSPI orbit file.

    As an implementation detail, we use GDAL to read the data. This isn't
    really an image, but by doing this we don't need to bother developing
    all the mechanism for reading/writing HDF files. May want to revisit
    this if we actually do develop that, since there is no reason other
    than convenience to use GDAL here.

    C++ includes: air_mspi_orbit.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        AirMspiOrbit::AirMspiOrbit(const std::string &Fname, const blitz::Array< double, 1 >
        &Gimbal_angle, const blitz::Array< double, 1 > &Ypc_corr, const
        boost::shared_ptr< Datum > &D=boost::shared_ptr< Datum >(new
        NoDatum()), AircraftOrbitData::VerticalDefinition
        Def=AircraftOrbitData::GEODETIC_VERTICAL)
        Read the given file. 
        """
        _air_mspi_orbit.AirMspiOrbit_swiginit(self,_air_mspi_orbit.new_AirMspiOrbit(*args))
    def _v_data_version(self):
        """
        std::string GeoCal::AirMspiOrbit::data_version() const
        The data version. 
        """
        return _air_mspi_orbit.AirMspiOrbit__v_data_version(self)

    @property
    def data_version(self):
        return self._v_data_version()

    def _v_file_name(self):
        """
        std::string GeoCal::AirMspiOrbit::file_name() const
        File name for data. 
        """
        return _air_mspi_orbit.AirMspiOrbit__v_file_name(self)

    @property
    def file_name(self):
        return self._v_file_name()

    def _v_datum(self):
        """
        const boost::shared_ptr<Datum>& GeoCal::AirMspiOrbit::datum() const
        Datum the raw height is relative to. 
        """
        return _air_mspi_orbit.AirMspiOrbit__v_datum(self)

    @property
    def datum(self):
        return self._v_datum()

    def _v_flight_description(self):
        """
        std::string GeoCal::AirMspiOrbit::flight_description() const
        Flight description. 
        """
        return _air_mspi_orbit.AirMspiOrbit__v_flight_description(self)

    @property
    def flight_description(self):
        return self._v_flight_description()

    def _v_gimbal_angle(self):
        """
        blitz::Array<double, 1> GeoCal::AirMspiOrbit::gimbal_angle() const
        Gimbal angles.

        This is in degrees, and is in the order epsilon, psi, theta. 
        """
        return _air_mspi_orbit.AirMspiOrbit__v_gimbal_angle(self)

    @property
    def gimbal_angle(self):
        return self._v_gimbal_angle()

    def _v_ypr_corr(self):
        """
        blitz::Array<double, 1> GeoCal::AirMspiOrbit::ypr_corr() const
        YPR correction.

        This is a pretty simple error model, we may modify this is the future.
        This is in degrees 
        """
        return _air_mspi_orbit.AirMspiOrbit__v_ypr_corr(self)

    @property
    def ypr_corr(self):
        return self._v_ypr_corr()

    def _v_time_spacing(self):
        """
        double GeoCal::AirMspiOrbit::time_spacing() const
        Spacing in time between measurements. This is in seconds. 
        """
        return _air_mspi_orbit.AirMspiOrbit__v_time_spacing(self)

    @property
    def time_spacing(self):
        return self._v_time_spacing()

    def _v_vertical_def(self):
        """
        AircraftOrbitData::VerticalDefinition GeoCal::AirMspiOrbit::vertical_def() const
        Definition of vertical.

        This should almost always be GEODETIC_VERTICAL, but we have this in
        place to be able to match old test data. 
        """
        return _air_mspi_orbit.AirMspiOrbit__v_vertical_def(self)

    @property
    def vertical_def(self):
        return self._v_vertical_def()

    def orbit_data_index(self, *args):
        """
        boost::shared_ptr< QuaternionOrbitData > AirMspiOrbit::orbit_data_index(int Index) const
        Orbit data for given index. 
        """
        return _air_mspi_orbit.AirMspiOrbit_orbit_data_index(self, *args)

    @classmethod
    def pickle_format_version(cls):
      return 1

    def __reduce__(self):
      return _new_from_init, (self.__class__, 1, self.file_name,self.gimbal_angle,self.ypr_corr,self.datum,self.vertical_def)

    __swig_destroy__ = _air_mspi_orbit.delete_AirMspiOrbit
AirMspiOrbit._v_data_version = new_instancemethod(_air_mspi_orbit.AirMspiOrbit__v_data_version,None,AirMspiOrbit)
AirMspiOrbit._v_file_name = new_instancemethod(_air_mspi_orbit.AirMspiOrbit__v_file_name,None,AirMspiOrbit)
AirMspiOrbit._v_datum = new_instancemethod(_air_mspi_orbit.AirMspiOrbit__v_datum,None,AirMspiOrbit)
AirMspiOrbit._v_flight_description = new_instancemethod(_air_mspi_orbit.AirMspiOrbit__v_flight_description,None,AirMspiOrbit)
AirMspiOrbit._v_gimbal_angle = new_instancemethod(_air_mspi_orbit.AirMspiOrbit__v_gimbal_angle,None,AirMspiOrbit)
AirMspiOrbit._v_ypr_corr = new_instancemethod(_air_mspi_orbit.AirMspiOrbit__v_ypr_corr,None,AirMspiOrbit)
AirMspiOrbit._v_time_spacing = new_instancemethod(_air_mspi_orbit.AirMspiOrbit__v_time_spacing,None,AirMspiOrbit)
AirMspiOrbit._v_vertical_def = new_instancemethod(_air_mspi_orbit.AirMspiOrbit__v_vertical_def,None,AirMspiOrbit)
AirMspiOrbit.orbit_data_index = new_instancemethod(_air_mspi_orbit.AirMspiOrbit_orbit_data_index,None,AirMspiOrbit)
AirMspiOrbit_swigregister = _air_mspi_orbit.AirMspiOrbit_swigregister
AirMspiOrbit_swigregister(AirMspiOrbit)



