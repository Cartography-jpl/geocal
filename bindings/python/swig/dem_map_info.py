# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _dem_map_info.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_dem_map_info')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_dem_map_info')
    _dem_map_info = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dem_map_info', [dirname(__file__)])
        except ImportError:
            import _dem_map_info
            return _dem_map_info
        try:
            _mod = imp.load_module('_dem_map_info', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _dem_map_info = swig_import_helper()
    del swig_import_helper
else:
    import _dem_map_info
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dem_map_info.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_dem_map_info.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_dem_map_info.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_dem_map_info.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_dem_map_info.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_dem_map_info.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_dem_map_info.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_dem_map_info.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_dem_map_info.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_dem_map_info.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_dem_map_info.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_dem_map_info.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_dem_map_info.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_dem_map_info.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_dem_map_info.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_dem_map_info.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_dem_map_info.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _dem_map_info.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _dem_map_info.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.dem
import geocal_swig.generic_object
class DemMapInfo(geocal_swig.dem.Dem):
    """

    C++ includes: dem_map_info.h

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def _v_datum(self):
        """

        const boost::shared_ptr<Datum> GeoCal::DemMapInfo::datum_ptr() const
        Pointer to datum. 
        """
        return _dem_map_info.DemMapInfo__v_datum(self)


    @property
    def datum(self):
        return self._v_datum()


    def _v_map_info(self):
        """

        const MapInfo& GeoCal::DemMapInfo::map_info() const
        MapInfo of underlying data. 
        """
        return _dem_map_info.DemMapInfo__v_map_info(self)


    @property
    def map_info(self):
        return self._v_map_info()


    def height_datum(self, Gp):
        """

        double DemMapInfo::height_datum(const Geodetic &Gp) const

        """
        return _dem_map_info.DemMapInfo_height_datum(self, Gp)


    def gradient(self, Y_index, X_index):
        """

        void DemMapInfo::gradient(int Y_index, int X_index, double &dz_dx, double &dz_dy) const
        Calculate dz_dx and dz_dy, which is the first step in calculating
        slope and aspect of the DEM.

        This uses the second order ARCINFO method. We handle the grid edges by
        just using the elevation as Y_index, X_index.

        This is also the method used by richdem (a python package), which
        references Horn, B.K.P., 1981. Hill shading and the reflectance map.
        Proceedings of the IEEE 69, 14â€“47. doi:10.1109/PROC.1981.11918 as the
        original source of this algorithm 
        """
        return _dem_map_info.DemMapInfo_gradient(self, Y_index, X_index)


    def slope_riserun(self, Y_index, X_index):
        """

        double DemMapInfo::slope_riserun(int Y_index, int X_index) const
        Slope for the given point, as a Rise/Run. 
        """
        return _dem_map_info.DemMapInfo_slope_riserun(self, Y_index, X_index)


    def slope_percentage(self, Y_index, X_index):
        """

        double GeoCal::DemMapInfo::slope_percentage(int Y_index, int X_index) const
        Slope for the given point, as a percentage. 
        """
        return _dem_map_info.DemMapInfo_slope_percentage(self, Y_index, X_index)


    def slope_radian(self, Y_index, X_index):
        """

        double GeoCal::DemMapInfo::slope_radian(int Y_index, int X_index) const
        Slope for the given point, as radians. 
        """
        return _dem_map_info.DemMapInfo_slope_radian(self, Y_index, X_index)


    def slope_degree(self, Y_index, X_index):
        """

        double GeoCal::DemMapInfo::slope_degree(int Y_index, int X_index) const
        Slope for the given point, as degrees. 
        """
        return _dem_map_info.DemMapInfo_slope_degree(self, Y_index, X_index)


    def aspect(self, Y_index, X_index):
        """

        double DemMapInfo::aspect(int Y_index, int X_index) const
        Aspect angle.

        This uses the Horn 1981 definition, in degrees [0, 360). 0 is north,
        we increase in a clockwise fashion. Note for perfectly flat areas
        (slope_riserun is 0) this isn't really defined, but by convention we
        return 270 (directly west).

        Aspect is the downslope direction for the maximum rate of change in
        value for each pixel. 
        """
        return _dem_map_info.DemMapInfo_aspect(self, Y_index, X_index)


    def slope_and_aspect(self, Gc):
        """

        void DemMapInfo::slope_and_aspect(const GroundCoordinate &Gc, double &Slope_deg, double &Aspect_deg)
        const
        Frequently we want both the slope and aspect, this one function saves
        a step and returns both.

        There isn't really "one" way to handle slope and aspect for points
        that don't lie on the DEM grid. MISR had a larger footprint and
        calculated an average of slopes/aspect that fell in to the footprint.
        Another approach is to do a bilinear interpolation.

        This particular function just uses bilinear interpolation. 
        """
        return _dem_map_info.DemMapInfo_slope_and_aspect(self, Gc)


    def slope_and_aspect_nearest_neighbor(self, Gc):
        """

        void DemMapInfo::slope_and_aspect_nearest_neighbor(const GroundCoordinate &Gc, double &Slope_deg, double &Aspect_deg)
        const
        Frequently we want both the slope and aspect, this one function saves
        a step and returns both.

        There isn't really "one" way to handle slope and aspect for points
        that don't lie on the DEM grid. MISR had a larger footprint and
        calculated an average of slopes/aspect that fell in to the footprint.
        Another approach is to do a bilinear interpolation.

        This particular function just uses the nearest neighbor. Slope and
        aspect are a bit approximate anyways, so this is probably as good as
        any other approach if the DEM resolution is similar to your pixel
        size. 
        """
        return _dem_map_info.DemMapInfo_slope_and_aspect_nearest_neighbor(self, Gc)


    def _v_outside_dem_is_error(self):
        """

        bool GeoCal::DemMapInfo::outside_dem_is_error() const
        If true, then calling with values outside the range of area of the DEM
        triggers an exception, otherwise we just return a height of 0. 
        """
        return _dem_map_info.DemMapInfo__v_outside_dem_is_error(self)


    @property
    def outside_dem_is_error(self):
        return self._v_outside_dem_is_error()


    def _v_naif_code(self):
        """

        int GeoCal::DemMapInfo::naif_code() const

        """
        return _dem_map_info.DemMapInfo__v_naif_code(self)


    @property
    def naif_code(self):
        return self._v_naif_code()

    __swig_destroy__ = _dem_map_info.delete_DemMapInfo
DemMapInfo._v_datum = new_instancemethod(_dem_map_info.DemMapInfo__v_datum, None, DemMapInfo)
DemMapInfo._v_map_info = new_instancemethod(_dem_map_info.DemMapInfo__v_map_info, None, DemMapInfo)
DemMapInfo.height_datum = new_instancemethod(_dem_map_info.DemMapInfo_height_datum, None, DemMapInfo)
DemMapInfo.gradient = new_instancemethod(_dem_map_info.DemMapInfo_gradient, None, DemMapInfo)
DemMapInfo.slope_riserun = new_instancemethod(_dem_map_info.DemMapInfo_slope_riserun, None, DemMapInfo)
DemMapInfo.slope_percentage = new_instancemethod(_dem_map_info.DemMapInfo_slope_percentage, None, DemMapInfo)
DemMapInfo.slope_radian = new_instancemethod(_dem_map_info.DemMapInfo_slope_radian, None, DemMapInfo)
DemMapInfo.slope_degree = new_instancemethod(_dem_map_info.DemMapInfo_slope_degree, None, DemMapInfo)
DemMapInfo.aspect = new_instancemethod(_dem_map_info.DemMapInfo_aspect, None, DemMapInfo)
DemMapInfo.slope_and_aspect = new_instancemethod(_dem_map_info.DemMapInfo_slope_and_aspect, None, DemMapInfo)
DemMapInfo.slope_and_aspect_nearest_neighbor = new_instancemethod(_dem_map_info.DemMapInfo_slope_and_aspect_nearest_neighbor, None, DemMapInfo)
DemMapInfo._v_outside_dem_is_error = new_instancemethod(_dem_map_info.DemMapInfo__v_outside_dem_is_error, None, DemMapInfo)
DemMapInfo._v_naif_code = new_instancemethod(_dem_map_info.DemMapInfo__v_naif_code, None, DemMapInfo)
DemMapInfo_swigregister = _dem_map_info.DemMapInfo_swigregister
DemMapInfo_swigregister(DemMapInfo)


__all__ = ["DemMapInfo"]



