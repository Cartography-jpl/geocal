# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _vicar_raster_image.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_vicar_raster_image')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_vicar_raster_image')
    _vicar_raster_image = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vicar_raster_image', [dirname(__file__)])
        except ImportError:
            import _vicar_raster_image
            return _vicar_raster_image
        try:
            _mod = imp.load_module('_vicar_raster_image', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _vicar_raster_image = swig_import_helper()
    del swig_import_helper
else:
    import _vicar_raster_image
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vicar_raster_image.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_vicar_raster_image.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_vicar_raster_image.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_vicar_raster_image.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_vicar_raster_image.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_vicar_raster_image.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_vicar_raster_image.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_vicar_raster_image.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_vicar_raster_image.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_vicar_raster_image.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_vicar_raster_image.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_vicar_raster_image.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_vicar_raster_image.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_vicar_raster_image.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_vicar_raster_image.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_vicar_raster_image.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_vicar_raster_image.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _vicar_raster_image.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _vicar_raster_image.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.raster_image_tiled_file
import geocal_swig.raster_image_variable
import geocal_swig.raster_image
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class VicarRasterImage(geocal_swig.raster_image_tiled_file.RasterImageTiledFile):
    """

    This wraps a VicarTiledFile<T> to make a RasterImage.

    The type of T should be one we can convert to and from a int, since
    this is what a RasterImage works in.

    C++ includes: vicar_raster_image.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        GeoCal::VicarRasterImage::VicarRasterImage(int Instance, const MapInfo &M, const std::string &Type="BYTE", int
        Number_band=1, const std::string &Org="BSQ", const std::string
        &Name="OUT", int Number_line_per_tile=100, compression
        C=VicarFile::NONE)
        Create a new VICAR file with the given size.

        Use the VICAR Name and Instance input (so for example, "INP" and 2
        is the second INP file passed to a VICAR program. 
        """
        _vicar_raster_image.VicarRasterImage_swiginit(self, _vicar_raster_image.new_VicarRasterImage(*args))

    def _v_vicar_file(self):
        """

        boost::shared_ptr<VicarFile> GeoCal::VicarRasterImage::vicar_file_ptr() const

        """
        return _vicar_raster_image.VicarRasterImage__v_vicar_file(self)


    @property
    def vicar_file(self):
        return self._v_vicar_file()


    def flush(self):
        """

        virtual void GeoCal::VicarRasterImage::flush() const
        Flush data to disk. 
        """
        return _vicar_raster_image.VicarRasterImage_flush(self)


    def close(self):
        """

        void GeoCal::VicarRasterImage::close()
        Close a file.

        You don't normally need to call this directly, it is done by the
        destructor. But it is useful to have for use by Ruby. 
        """
        return _vicar_raster_image.VicarRasterImage_close(self)


    def set_rpc(self, R):
        """

        void GeoCal::VicarRasterImage::set_rpc(const Rpc &R)
        Set the RPC. 
        """
        return _vicar_raster_image.VicarRasterImage_set_rpc(self, R)


    def set_map_info(self, Mi):
        """

        void GeoCal::VicarRasterImage::set_map_info(const MapInfo &Mi)
        Set the Map Info. 
        """
        return _vicar_raster_image.VicarRasterImage_set_map_info(self, Mi)


    def _v_number_band(self):
        """

        int GeoCal::VicarRasterImage::number_band() const
        Number of bands in file. 
        """
        return _vicar_raster_image.VicarRasterImage__v_number_band(self)


    @property
    def number_band(self):
        return self._v_number_band()


    def _v_band_id(self):
        """

        int GeoCal::VicarRasterImage::band_id() const
        Band id we are reading.

        Note that following the GDAL convention, this is 1 based. 
        """
        return _vicar_raster_image.VicarRasterImage__v_band_id(self)


    @property
    def band_id(self):
        return self._v_band_id()


    @property
    def rpc(self):
        return self._v_rpc()


    @property
    def map_info(self):
        return self._v_map_info()


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)


    @rpc.setter
    def rpc(self, val):
       self.set_rpc(val)

    @map_info.setter
    def map_info(self, val):
       self.set_map_info(val)

    def __getitem__(self, key):
        return self.vicar_file[key]

    def __setitem__(self, key, v):
        self.vicar_file[key] = v


    __swig_destroy__ = _vicar_raster_image.delete_VicarRasterImage
VicarRasterImage._v_vicar_file = new_instancemethod(_vicar_raster_image.VicarRasterImage__v_vicar_file, None, VicarRasterImage)
VicarRasterImage.flush = new_instancemethod(_vicar_raster_image.VicarRasterImage_flush, None, VicarRasterImage)
VicarRasterImage.close = new_instancemethod(_vicar_raster_image.VicarRasterImage_close, None, VicarRasterImage)
VicarRasterImage.set_rpc = new_instancemethod(_vicar_raster_image.VicarRasterImage_set_rpc, None, VicarRasterImage)
VicarRasterImage.set_map_info = new_instancemethod(_vicar_raster_image.VicarRasterImage_set_map_info, None, VicarRasterImage)
VicarRasterImage._v_number_band = new_instancemethod(_vicar_raster_image.VicarRasterImage__v_number_band, None, VicarRasterImage)
VicarRasterImage._v_band_id = new_instancemethod(_vicar_raster_image.VicarRasterImage__v_band_id, None, VicarRasterImage)
VicarRasterImage._v_rpc = new_instancemethod(_vicar_raster_image.VicarRasterImage__v_rpc, None, VicarRasterImage)
VicarRasterImage._v_map_info = new_instancemethod(_vicar_raster_image.VicarRasterImage__v_map_info, None, VicarRasterImage)
VicarRasterImage_swigregister = _vicar_raster_image.VicarRasterImage_swigregister
VicarRasterImage_swigregister(VicarRasterImage)


def vicar_open(*args):
    """

    boost::shared_ptr< RasterImage > GeoCal::vicar_open(const std::string &Fname, int Band_id=1, VicarFile::access_type
    Access=VicarFile::READ, bool Favor_memory_mapped=true, int
    Number_line_per_tile=100, int Number_tile=4, bool
    Force_area_pixel=false)
    Often you want to open a memory mapped VicarLiteRasterImage if you can
    because it is faster, but fall back to using a VicarRasterImage if you
    can't (e.g., the data is compressed).

    This utility routine works out the logic for this. 
    """
    return _vicar_raster_image.vicar_open(*args)

__all__ = ["VicarRasterImage","vicar_open"]



