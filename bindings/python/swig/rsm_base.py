# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rsm_base.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_rsm_base')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_rsm_base')
    _rsm_base = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rsm_base', [dirname(__file__)])
        except ImportError:
            import _rsm_base
            return _rsm_base
        try:
            _mod = imp.load_module('_rsm_base', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _rsm_base = swig_import_helper()
    del swig_import_helper
else:
    import _rsm_base
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rsm_base.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_rsm_base.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_rsm_base.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_rsm_base.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_rsm_base.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_rsm_base.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_rsm_base.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_rsm_base.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_rsm_base.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_rsm_base.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_rsm_base.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_rsm_base.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_rsm_base.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_rsm_base.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_rsm_base.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_rsm_base.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_rsm_base.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _rsm_base.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _rsm_base.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class RsmBase(geocal_swig.generic_object.GenericObject):
    """

    This is the base for some of the Rsm support classes.

    This allows us to use a RsmRationalPolynomial, RsmMultiSection, as
    RsmGrid together.

    C++ includes: rsm_base.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        """

        virtual boost::shared_ptr<RsmBase> GeoCal::RsmBase::clone() const =0

        """
        return _rsm_base.RsmBase_clone(self)


    def image_coordinate(self, *args):
        """

        virtual ImageCoordinate GeoCal::RsmBase::image_coordinate(double X, double Y, double Z) const =0

        """
        return _rsm_base.RsmBase_image_coordinate(self, *args)


    def image_coordinate_jacobian(self, X, Y, Z):
        """

        virtual blitz::Array<double, 2> GeoCal::RsmBase::image_coordinate_jacobian(double X, double Y, double Z) const =0

        """
        return _rsm_base.RsmBase_image_coordinate_jacobian(self, X, Y, Z)


    def initial_guess(self, Line, Sample, Z, X_guess, Y_guess):
        """

        virtual void GeoCal::RsmBase::initial_guess(double Line, double Sample, double Z, double &X_guess, double
        &Y_guess) const =0
        Initial guess to use when inverting the ground to image function. 
        """
        return _rsm_base.RsmBase_initial_guess(self, Line, Sample, Z, X_guess, Y_guess)


    def initial_guess_z(self, Line, Sample):
        """

        virtual double GeoCal::RsmBase::initial_guess_z(double Line, double Sample) const =0
        Initial guess at Z, if we need to find that also. 
        """
        return _rsm_base.RsmBase_initial_guess_z(self, Line, Sample)


    def fit(self, Igc, Cconv, Min_height, Max_height, Min_line, Max_line, Min_sample, Max_sample):
        """

        virtual void GeoCal::RsmBase::fit(const ImageGroundConnection &Igc, const CoordinateConverter &Cconv,
        double Min_height, double Max_height, int Min_line, int Max_line, int
        Min_sample, int Max_sample)=0
        Fit that approximates the calculation done by a ImageGroundConnection.

        To support sections, you can pass in a restricted number of
        line/samples to fit over. 
        """
        return _rsm_base.RsmBase_fit(self, Igc, Cconv, Min_height, Max_height, Min_line, Max_line, Min_sample, Max_sample)


    def fit_data(self, Data, Min_line, Max_line, Min_sample, Max_sample):
        """

        virtual void GeoCal::RsmBase::fit_data(const blitz::Array< double, 2 > &Data, int Min_line, int Max_line,
        int Min_sample, int Max_sample)=0
        Variation of fit that takes data generated by generate_data.

        This is intended for use with adaptive strategies such as varying the
        number of sections to meet a certain tolerance. Note that this does
        not call fill_in_ground_domain_vertex (since we don't have the Igc in
        this call). You should call fill_in_ground_domain_vertex separately
        once you are happy with the fit. 
        """
        return _rsm_base.RsmBase_fit_data(self, Data, Min_line, Max_line, Min_sample, Max_sample)


    def generate_data(Igc, Cconv, Min_x, Max_x, Min_y, Max_y, Min_z, Max_z, Numx, Numy, Numz):
        """

        blitz::Array< double, 4 > RsmBase::generate_data(const ImageGroundConnection &Igc, const CoordinateConverter &Cconv,
        double Min_x, double Max_x, double Min_y, double Max_y, double Min_z,
        double Max_z, int Numx, int Numy, int Numz)

        """
        return _rsm_base.RsmBase_generate_data(Igc, Cconv, Min_x, Max_x, Min_y, Max_y, Min_z, Max_z, Numx, Numy, Numz)

    generate_data = staticmethod(generate_data)

    def set_z_range(self, Z_min, Z_max):
        """

        virtual void GeoCal::RsmBase::set_z_range(double Z_min, double Z_max)
        Based on examples, the MSP library seems to prefer that all sections
        have the same z start and delta.

        This isn't actually required from the RSM standard, but seems to be
        one of the those "unstated" requirements. This gives access for
        RsmMultiSection to pass the z values to use, rather than computing
        this in fit. 
        """
        return _rsm_base.RsmBase_set_z_range(self, Z_min, Z_max)


    def check_zero_crossing(self, Grid_spacing=0.01):
        """

        virtual bool GeoCal::RsmBase::check_zero_crossing(double Grid_spacing=0.01) const =0
        Check for zero crossing in the denominator, i.e., do we have poles in
        our fit. 
        """
        return _rsm_base.RsmBase_check_zero_crossing(self, Grid_spacing)


    def _v_min_line(self):
        """

        virtual int GeoCal::RsmBase::min_line() const =0

        """
        return _rsm_base.RsmBase__v_min_line(self)


    @property
    def min_line(self):
        return self._v_min_line()


    def _v_max_line(self):
        """

        virtual int GeoCal::RsmBase::max_line() const =0

        """
        return _rsm_base.RsmBase__v_max_line(self)


    @property
    def max_line(self):
        return self._v_max_line()


    def _v_min_sample(self):
        """

        virtual int GeoCal::RsmBase::min_sample() const =0

        """
        return _rsm_base.RsmBase__v_min_sample(self)


    @property
    def min_sample(self):
        return self._v_min_sample()


    def _v_max_sample(self):
        """

        virtual int GeoCal::RsmBase::max_sample() const =0

        """
        return _rsm_base.RsmBase__v_max_sample(self)


    @property
    def max_sample(self):
        return self._v_max_sample()


    def _v_min_x(self):
        """

        virtual double GeoCal::RsmBase::min_x() const =0

        """
        return _rsm_base.RsmBase__v_min_x(self)


    @property
    def min_x(self):
        return self._v_min_x()


    def _v_max_x(self):
        """

        virtual double GeoCal::RsmBase::max_x() const =0

        """
        return _rsm_base.RsmBase__v_max_x(self)


    @property
    def max_x(self):
        return self._v_max_x()


    def _v_min_y(self):
        """

        virtual double GeoCal::RsmBase::min_y() const =0

        """
        return _rsm_base.RsmBase__v_min_y(self)


    @property
    def min_y(self):
        return self._v_min_y()


    def _v_max_y(self):
        """

        virtual double GeoCal::RsmBase::max_y() const =0

        """
        return _rsm_base.RsmBase__v_max_y(self)


    @property
    def max_y(self):
        return self._v_max_y()


    def _v_min_z(self):
        """

        virtual double GeoCal::RsmBase::min_z() const =0

        """
        return _rsm_base.RsmBase__v_min_z(self)


    @property
    def min_z(self):
        return self._v_min_z()


    def _v_max_z(self):
        """

        virtual double GeoCal::RsmBase::max_z() const =0

        """
        return _rsm_base.RsmBase__v_max_z(self)


    @property
    def max_z(self):
        return self._v_max_z()


    def _v_image_identifier(self, *args):
        """

        virtual void GeoCal::RsmBase::image_identifier(const std::string &V)

        """
        return _rsm_base.RsmBase__v_image_identifier(self, *args)


    @property
    def image_identifier(self):
        return self._v_image_identifier()

    @image_identifier.setter
    def image_identifier(self, value):
      self._v_image_identifier(value)


    def _v_rsm_support_data_edition(self, *args):
        """

        virtual void GeoCal::RsmBase::rsm_support_data_edition(const std::string &V)

        """
        return _rsm_base.RsmBase__v_rsm_support_data_edition(self, *args)


    @property
    def rsm_support_data_edition(self):
        return self._v_rsm_support_data_edition()

    @rsm_support_data_edition.setter
    def rsm_support_data_edition(self, value):
      self._v_rsm_support_data_edition(value)


    def _v_row_section_number(self, *args):
        """

        virtual void GeoCal::RsmBase::row_section_number(int UNUSED(V))

        """
        return _rsm_base.RsmBase__v_row_section_number(self, *args)


    @property
    def row_section_number(self):
        return self._v_row_section_number()

    @row_section_number.setter
    def row_section_number(self, value):
      self._v_row_section_number(value)


    def _v_col_section_number(self, *args):
        """

        virtual void GeoCal::RsmBase::col_section_number(int UNUSED(V))

        """
        return _rsm_base.RsmBase__v_col_section_number(self, *args)


    @property
    def col_section_number(self):
        return self._v_col_section_number()

    @col_section_number.setter
    def col_section_number(self, value):
      self._v_col_section_number(value)


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _rsm_base.delete_RsmBase
RsmBase.__str__ = new_instancemethod(_rsm_base.RsmBase___str__, None, RsmBase)
RsmBase.clone = new_instancemethod(_rsm_base.RsmBase_clone, None, RsmBase)
RsmBase.image_coordinate = new_instancemethod(_rsm_base.RsmBase_image_coordinate, None, RsmBase)
RsmBase.image_coordinate_jacobian = new_instancemethod(_rsm_base.RsmBase_image_coordinate_jacobian, None, RsmBase)
RsmBase.initial_guess = new_instancemethod(_rsm_base.RsmBase_initial_guess, None, RsmBase)
RsmBase.initial_guess_z = new_instancemethod(_rsm_base.RsmBase_initial_guess_z, None, RsmBase)
RsmBase.fit = new_instancemethod(_rsm_base.RsmBase_fit, None, RsmBase)
RsmBase.fit_data = new_instancemethod(_rsm_base.RsmBase_fit_data, None, RsmBase)
RsmBase.set_z_range = new_instancemethod(_rsm_base.RsmBase_set_z_range, None, RsmBase)
RsmBase.check_zero_crossing = new_instancemethod(_rsm_base.RsmBase_check_zero_crossing, None, RsmBase)
RsmBase._v_min_line = new_instancemethod(_rsm_base.RsmBase__v_min_line, None, RsmBase)
RsmBase._v_max_line = new_instancemethod(_rsm_base.RsmBase__v_max_line, None, RsmBase)
RsmBase._v_min_sample = new_instancemethod(_rsm_base.RsmBase__v_min_sample, None, RsmBase)
RsmBase._v_max_sample = new_instancemethod(_rsm_base.RsmBase__v_max_sample, None, RsmBase)
RsmBase._v_min_x = new_instancemethod(_rsm_base.RsmBase__v_min_x, None, RsmBase)
RsmBase._v_max_x = new_instancemethod(_rsm_base.RsmBase__v_max_x, None, RsmBase)
RsmBase._v_min_y = new_instancemethod(_rsm_base.RsmBase__v_min_y, None, RsmBase)
RsmBase._v_max_y = new_instancemethod(_rsm_base.RsmBase__v_max_y, None, RsmBase)
RsmBase._v_min_z = new_instancemethod(_rsm_base.RsmBase__v_min_z, None, RsmBase)
RsmBase._v_max_z = new_instancemethod(_rsm_base.RsmBase__v_max_z, None, RsmBase)
RsmBase._v_image_identifier = new_instancemethod(_rsm_base.RsmBase__v_image_identifier, None, RsmBase)
RsmBase._v_rsm_support_data_edition = new_instancemethod(_rsm_base.RsmBase__v_rsm_support_data_edition, None, RsmBase)
RsmBase._v_row_section_number = new_instancemethod(_rsm_base.RsmBase__v_row_section_number, None, RsmBase)
RsmBase._v_col_section_number = new_instancemethod(_rsm_base.RsmBase__v_col_section_number, None, RsmBase)
RsmBase_swigregister = _rsm_base.RsmBase_swigregister
RsmBase_swigregister(RsmBase)

def RsmBase_generate_data(Igc, Cconv, Min_x, Max_x, Min_y, Max_y, Min_z, Max_z, Numx, Numy, Numz):
    """

    blitz::Array< double, 4 > RsmBase::generate_data(const ImageGroundConnection &Igc, const CoordinateConverter &Cconv,
    double Min_x, double Max_x, double Min_y, double Max_y, double Min_z,
    double Max_z, int Numx, int Numy, int Numz)

    """
    return _rsm_base.RsmBase_generate_data(Igc, Cconv, Min_x, Max_x, Min_y, Max_y, Min_z, Max_z, Numx, Numy, Numz)


__all__ = ["RsmBase"]



