# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _igc_map_projected

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _igc_map_projected.SWIG_PyInstanceMethod_New
_swig_new_static_method = _igc_map_projected.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _igc_map_projected.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _igc_map_projected.delete_SwigPyIterator
    value = _swig_new_instance_method(_igc_map_projected.SwigPyIterator_value)
    incr = _swig_new_instance_method(_igc_map_projected.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_igc_map_projected.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_igc_map_projected.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_igc_map_projected.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_igc_map_projected.SwigPyIterator_copy)
    next = _swig_new_instance_method(_igc_map_projected.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_igc_map_projected.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_igc_map_projected.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_igc_map_projected.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_igc_map_projected.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_igc_map_projected.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_igc_map_projected.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_igc_map_projected.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_igc_map_projected.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_igc_map_projected.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _igc_map_projected:
_igc_map_projected.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _igc_map_projected.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.calc_raster
import geocal_swig.raster_image_variable
import geocal_swig.raster_image
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.calc_raster_multi_band
import geocal_swig.raster_image_multi_band_variable
import geocal_swig.raster_image_multi_band
import geocal_swig.geocal_exception
class IgcMapProjected(geocal_swig.calc_raster.CalcRaster):
    r"""

    This is a RasterImage that has been map projected using an
    ImageGroundConnection.

    To do this we do two steps:

    We calculate roughly what the difference in resolution is between the
    original data and final MapInfo. We do this by looking at the center
    pixel of the original data and the pixel +1 in line and sample. We
    then use RasterAveraged to average the original data to roughly the
    resolution of the final MapInfo. If the final MapInfo is near the same
    resolution as the original, or if it has a higher resolution, then we
    don't do any averaging. Alternatively, you can pass in the averaging
    factor (include a value of 1 which turns this behavior off).

    We then interpolate the possibly averaged data to the final
    projection.

    It is ok if the final MapInfo contains areas outside of the original
    data. For any pixel outside of the original data, we just return a
    value of 0.

    This class calculates the data on the fly. Sometimes this is what you
    want, but if you are going to be using the resulting data a few times,
    you may want to use a MemoryRasterImage to generate a copy once and
    keep it in memory.

    C++ includes: igc_map_projected.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Mi, Igc, Grid_spacing=1, Avg_fact=-1, Read_into_memory=True, Number_tile_line=-1, Number_tile_sample=-1, Fill_value=0.0):
        r"""

        IgcMapProjected::IgcMapProjected(const MapInfo &Mi, const boost::shared_ptr< ImageGroundConnection >
        &Igc, int Grid_spacing=1, int Avg_fact=-1, bool Read_into_memory=true,
        int Number_tile_line=-1, int Number_tile_sample=-1, double
        Fill_value=0.0)
        GeoCal::IgcMapProjected::IgcMapProjected
        Constructor.
        We average the data either by the factor given as Avg_fact, or by
        ratio of the Mapinfo resolution and the Igc resolution.

        You can optionally pass a grid spacing to use. We calculate image
        coordinates in the input exactly at the grid spacing, and interpolate
        in betweeen. This is much faster than calculating every point, and if
        the grid spacing is small compared to the Dem and any nonlinearities
        then it gives results very close to the full calculation. 
        """
        _igc_map_projected.IgcMapProjected_swiginit(self, _igc_map_projected.new_IgcMapProjected(Mi, Igc, Grid_spacing, Avg_fact, Read_into_memory, Number_tile_line, Number_tile_sample, Fill_value))
    _v_igc_original = _swig_new_instance_method(_igc_map_projected.IgcMapProjected__v_igc_original)

    @property
    def igc_original(self):
        return self._v_igc_original()

    _v_avg_factor = _swig_new_instance_method(_igc_map_projected.IgcMapProjected__v_avg_factor)

    @property
    def avg_factor(self):
        return self._v_avg_factor()

    _v_grid_spacing = _swig_new_instance_method(_igc_map_projected.IgcMapProjected__v_grid_spacing)

    @property
    def grid_spacing(self):
        return self._v_grid_spacing()

    _v_fill_value = _swig_new_instance_method(_igc_map_projected.IgcMapProjected__v_fill_value)

    @property
    def fill_value(self):
        return self._v_fill_value()

    _v_read_into_memory = _swig_new_instance_method(_igc_map_projected.IgcMapProjected__v_read_into_memory)

    @property
    def read_into_memory(self):
        return self._v_read_into_memory()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _igc_map_projected.delete_IgcMapProjected

# Register IgcMapProjected in _igc_map_projected:
_igc_map_projected.IgcMapProjected_swigregister(IgcMapProjected)
class IgcMapProjectedMultiBand(geocal_swig.calc_raster_multi_band.CalcRasterMultiBand):
    r"""

    This is a RasterImageMultiBand that has been map projected using an
    ImageGroundConnection.

    To do this we do two steps:

    We calculate roughly what the difference in resolution is between the
    original data and final MapInfo. We do this by looking at the center
    pixel of the original data and the pixel +1 in line and sample. We
    then use RasterAveraged to average the original data to roughly the
    resolution of the final MapInfo. If the final MapInfo is near the same
    resolution as the original, or if it has a higher resolution, then we
    don't do any averaging. Alternatively, you can pass in the averaging
    factor (include a value of 1 which turns this behavior off).

    We then interpolate the possibly averaged data to the final
    projection.

    It is ok if the final MapInfo contains areas outside of the original
    data. For any pixel outside of the original data, we just return a
    value of 0.

    This class calculates the data on the fly. Sometimes this is what you
    want, but if you are going to be using the resulting data a few times,
    you may want to use a MemoryRasterImage to generate a copy once and
    keep it in memory.

    C++ includes: igc_map_projected.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Mi, Igc, Grid_spacing=1, Avg_fact=-1, Read_into_memory=True, Number_tile_line=-1, Number_tile_sample=-1, Fill_value=0.0):
        r"""

        IgcMapProjectedMultiBand::IgcMapProjectedMultiBand(const MapInfo &Mi, const boost::shared_ptr< ImageGroundConnection >
        &Igc, int Grid_spacing=1, int Avg_fact=-1, bool Read_into_memory=true,
        int Number_tile_line=-1, int Number_tile_sample=-1, double
        Fill_value=0.0)
        GeoCal::IgcMapProjectedMultiBand::IgcMapProjectedMultiBand
        Constructor.
        We average the data either by the factor given as Avg_fact, or by
        ratio of the Mapinfo resolution and the Igc resolution.

        You can optionally pass a grid spacing to use. We calculate image
        coordinates in the input exactly at the grid spacing, and interpolate
        in betweeen. This is much faster than calculating every point, and if
        the grid spacing is small compared to the Dem and any nonlinearities
        then it gives results very close to the full calculation. 
        """
        _igc_map_projected.IgcMapProjectedMultiBand_swiginit(self, _igc_map_projected.new_IgcMapProjectedMultiBand(Mi, Igc, Grid_spacing, Avg_fact, Read_into_memory, Number_tile_line, Number_tile_sample, Fill_value))
    _v_igc_original = _swig_new_instance_method(_igc_map_projected.IgcMapProjectedMultiBand__v_igc_original)

    @property
    def igc_original(self):
        return self._v_igc_original()

    _v_avg_factor = _swig_new_instance_method(_igc_map_projected.IgcMapProjectedMultiBand__v_avg_factor)

    @property
    def avg_factor(self):
        return self._v_avg_factor()

    _v_grid_spacing = _swig_new_instance_method(_igc_map_projected.IgcMapProjectedMultiBand__v_grid_spacing)

    @property
    def grid_spacing(self):
        return self._v_grid_spacing()

    _v_fill_value = _swig_new_instance_method(_igc_map_projected.IgcMapProjectedMultiBand__v_fill_value)

    @property
    def fill_value(self):
        return self._v_fill_value()

    _v_read_into_memory = _swig_new_instance_method(_igc_map_projected.IgcMapProjectedMultiBand__v_read_into_memory)

    @property
    def read_into_memory(self):
        return self._v_read_into_memory()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _igc_map_projected.delete_IgcMapProjectedMultiBand

# Register IgcMapProjectedMultiBand in _igc_map_projected:
_igc_map_projected.IgcMapProjectedMultiBand_swigregister(IgcMapProjectedMultiBand)

__all__ = ["IgcMapProjected","IgcMapProjectedMultiBand"]


