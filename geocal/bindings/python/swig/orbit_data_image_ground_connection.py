# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _orbit_data_image_ground_connection.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_orbit_data_image_ground_connection', [dirname(__file__)])
        except ImportError:
            import _orbit_data_image_ground_connection
            return _orbit_data_image_ground_connection
        if fp is not None:
            try:
                _mod = imp.load_module('_orbit_data_image_ground_connection', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _orbit_data_image_ground_connection = swig_import_helper()
    del swig_import_helper
else:
    import _orbit_data_image_ground_connection
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _orbit_data_image_ground_connection.SHARED_PTR_DISOWN
def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal.image_ground_connection
import geocal.generic_object
import geocal.geocal_exception
class OrbitDataImageGroundConnection(geocal.image_ground_connection.ImageGroundConnection):
    """
    This is a ImageGroundConnection where the connection is made by
    OrbitData and a Camera.

    C++ includes: orbit_data_image_ground_connection.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        GeoCal::OrbitDataImageGroundConnection::OrbitDataImageGroundConnection(const boost::shared_ptr< OrbitData > &Od, const boost::shared_ptr<
        Camera > &Cam, const boost::shared_ptr< Dem > &D, const
        boost::shared_ptr< RasterImage > &Img, const std::string Title="",
        const boost::shared_ptr< Refraction > &Ref=boost::shared_ptr<
        Refraction >(), bool Include_refraction=false, double Resolution=30,
        int Band=0, double Max_height=9000)
        Constructor.

        You can optionally include a approximate refraction correction, the
        default is not to. 
        """
        _orbit_data_image_ground_connection.OrbitDataImageGroundConnection_swiginit(self,_orbit_data_image_ground_connection.new_OrbitDataImageGroundConnection(*args))
    def cf_look_vector(self, *args):
        """
        virtual void GeoCal::OrbitDataImageGroundConnection::cf_look_vector(const ImageCoordinate &Ic, CartesianFixedLookVector &Lv,
        boost::shared_ptr< CartesianFixed > &P) const

        """
        return _orbit_data_image_ground_connection.OrbitDataImageGroundConnection_cf_look_vector(self, *args)

    def _v_orbit_data(self):
        """
        const boost::shared_ptr<OrbitData>& GeoCal::OrbitDataImageGroundConnection::orbit_data_ptr() const
        Orbit data that we are using. 
        """
        return _orbit_data_image_ground_connection.OrbitDataImageGroundConnection__v_orbit_data(self)

    @property
    def orbit_data(self):
        return self._v_orbit_data()

    def _v_camera(self):
        """
        const boost::shared_ptr<Camera>& GeoCal::OrbitDataImageGroundConnection::camera_ptr() const
        Camera that we are using. 
        """
        return _orbit_data_image_ground_connection.OrbitDataImageGroundConnection__v_camera(self)

    @property
    def camera(self):
        return self._v_camera()

    def _v_resolution(self):
        """
        double GeoCal::OrbitDataImageGroundConnection::resolution() const
        Resolution in meters that we examine Dem out.

        This affects how long ground_coordinate takes to figure out. It should
        be about the resolution of the Dem 
        """
        return _orbit_data_image_ground_connection.OrbitDataImageGroundConnection__v_resolution(self)

    @property
    def resolution(self):
        return self._v_resolution()

    def _v_refraction(self):
        """
        boost::shared_ptr<Refraction> GeoCal::OrbitDataImageGroundConnection::refraction() const
        Refraction object we are using.

        May be null if we aren't including refraction. 
        """
        return _orbit_data_image_ground_connection.OrbitDataImageGroundConnection__v_refraction(self)

    @property
    def refraction(self):
        return self._v_refraction()

    def _v_band(self):
        """
        int GeoCal::OrbitDataImageGroundConnection::band() const
        Camera band we are using. 
        """
        return _orbit_data_image_ground_connection.OrbitDataImageGroundConnection__v_band(self)

    @property
    def band(self):
        return self._v_band()

    def _v_max_height(self):
        """
        int GeoCal::OrbitDataImageGroundConnection::max_height() const
        Maximum height that we expect to see in the Dem. 
        """
        return _orbit_data_image_ground_connection.OrbitDataImageGroundConnection__v_max_height(self)

    @property
    def max_height(self):
        return self._v_max_height()

    @classmethod
    def pickle_format_version(cls):
      return 1

    def __reduce__(self):
      return _new_from_init, (self.__class__, 1, self.orbit_data,self.camera,self.dem,self.image,self.title,self.refraction,self.resolution,self.band,self.max_height)

    __swig_destroy__ = _orbit_data_image_ground_connection.delete_OrbitDataImageGroundConnection
OrbitDataImageGroundConnection.cf_look_vector = new_instancemethod(_orbit_data_image_ground_connection.OrbitDataImageGroundConnection_cf_look_vector,None,OrbitDataImageGroundConnection)
OrbitDataImageGroundConnection._v_image = new_instancemethod(_orbit_data_image_ground_connection.OrbitDataImageGroundConnection__v_image,None,OrbitDataImageGroundConnection)
OrbitDataImageGroundConnection._v_title = new_instancemethod(_orbit_data_image_ground_connection.OrbitDataImageGroundConnection__v_title,None,OrbitDataImageGroundConnection)
OrbitDataImageGroundConnection._v_orbit_data = new_instancemethod(_orbit_data_image_ground_connection.OrbitDataImageGroundConnection__v_orbit_data,None,OrbitDataImageGroundConnection)
OrbitDataImageGroundConnection._v_camera = new_instancemethod(_orbit_data_image_ground_connection.OrbitDataImageGroundConnection__v_camera,None,OrbitDataImageGroundConnection)
OrbitDataImageGroundConnection._v_resolution = new_instancemethod(_orbit_data_image_ground_connection.OrbitDataImageGroundConnection__v_resolution,None,OrbitDataImageGroundConnection)
OrbitDataImageGroundConnection._v_refraction = new_instancemethod(_orbit_data_image_ground_connection.OrbitDataImageGroundConnection__v_refraction,None,OrbitDataImageGroundConnection)
OrbitDataImageGroundConnection._v_band = new_instancemethod(_orbit_data_image_ground_connection.OrbitDataImageGroundConnection__v_band,None,OrbitDataImageGroundConnection)
OrbitDataImageGroundConnection._v_max_height = new_instancemethod(_orbit_data_image_ground_connection.OrbitDataImageGroundConnection__v_max_height,None,OrbitDataImageGroundConnection)
OrbitDataImageGroundConnection_swigregister = _orbit_data_image_ground_connection.OrbitDataImageGroundConnection_swigregister
OrbitDataImageGroundConnection_swigregister(OrbitDataImageGroundConnection)



