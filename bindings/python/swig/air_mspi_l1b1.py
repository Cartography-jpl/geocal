# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _air_mspi_l1b1

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _air_mspi_l1b1.SWIG_PyInstanceMethod_New
_swig_new_static_method = _air_mspi_l1b1.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _air_mspi_l1b1.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _air_mspi_l1b1.delete_SwigPyIterator
    value = _swig_new_instance_method(_air_mspi_l1b1.SwigPyIterator_value)
    incr = _swig_new_instance_method(_air_mspi_l1b1.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_air_mspi_l1b1.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_air_mspi_l1b1.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_air_mspi_l1b1.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_air_mspi_l1b1.SwigPyIterator_copy)
    next = _swig_new_instance_method(_air_mspi_l1b1.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_air_mspi_l1b1.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_air_mspi_l1b1.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_air_mspi_l1b1.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_air_mspi_l1b1.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_air_mspi_l1b1.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_air_mspi_l1b1.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_air_mspi_l1b1.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_air_mspi_l1b1.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_air_mspi_l1b1.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _air_mspi_l1b1:
_air_mspi_l1b1.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _air_mspi_l1b1.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.raster_image_tiled_file
import geocal_swig.raster_image_variable
import geocal_swig.raster_image
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class AirMspiL1b1File(geocal_swig.generic_object.GenericObject):
    r"""

    This provides access to a AirMspiL1b1File.

    Note that somewhat confusingly, row index is not the same as the
    MspiCamera band index. In fact, for the current configuration the
    MspiCamera bands run in the opposite order from the row index. You
    should not assume any particular relationship between the 2, instead
    you'll want to relate the row numbers to each other, which are
    consistent. AirMspiIgc handles this correctly, but if you are directly
    working with these classes you'll need to do that yourself.

    C++ includes: air_mspi_l1b1.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        AirMspiL1b1File::AirMspiL1b1File(const std::string &Fname, const std::string &Swath_to_use="660-I",
        int Min_l1b1_line=0, int Max_l1b1_line=-1, int Tile_number_line=-1,
        int Tile_number_sample=-1, unsigned int Number_tile=4)
        GeoCal::AirMspiL1b1File::AirMspiL1b1File
        Constructor.

        """
        _air_mspi_l1b1.AirMspiL1b1File_swiginit(self, _air_mspi_l1b1.new_AirMspiL1b1File(*args))
    _v_number_row_index = _swig_new_instance_method(_air_mspi_l1b1.AirMspiL1b1File__v_number_row_index)

    @property
    def number_row_index(self):
        return self._v_number_row_index()

    _v_file_name = _swig_new_instance_method(_air_mspi_l1b1.AirMspiL1b1File__v_file_name)

    @property
    def file_name(self):
        return self._v_file_name()

    _v_swath_to_use = _swig_new_instance_method(_air_mspi_l1b1.AirMspiL1b1File__v_swath_to_use)

    @property
    def swath_to_use(self):
        return self._v_swath_to_use()

    _v_row_index_to_use = _swig_new_instance_method(_air_mspi_l1b1.AirMspiL1b1File__v_row_index_to_use)

    @property
    def row_index_to_use(self):
        return self._v_row_index_to_use()

    _v_row_number_to_use = _swig_new_instance_method(_air_mspi_l1b1.AirMspiL1b1File__v_row_number_to_use)

    @property
    def row_number_to_use(self):
        return self._v_row_number_to_use()

    _v_granule_id = _swig_new_instance_method(_air_mspi_l1b1.AirMspiL1b1File__v_granule_id)

    @property
    def granule_id(self):
        return self._v_granule_id()

    _v_time = _swig_new_instance_method(_air_mspi_l1b1.AirMspiL1b1File__v_time)

    @property
    def time(self):
        return self._v_time()

    field_names = _swig_new_instance_method(_air_mspi_l1b1.AirMspiL1b1File_field_names)
    wavelength = _swig_new_instance_method(_air_mspi_l1b1.AirMspiL1b1File_wavelength)
    polarization_angle = _swig_new_instance_method(_air_mspi_l1b1.AirMspiL1b1File_polarization_angle)
    swath_name = _swig_new_instance_method(_air_mspi_l1b1.AirMspiL1b1File_swath_name)
    row_index_to_row_number = _swig_new_instance_method(_air_mspi_l1b1.AirMspiL1b1File_row_index_to_row_number)
    row_number_to_row_index = _swig_new_instance_method(_air_mspi_l1b1.AirMspiL1b1File_row_number_to_row_index)

    def __reduce__(self):
      return _new_from_serialization_dir, (os.getcwd(), geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _air_mspi_l1b1.delete_AirMspiL1b1File

# Register AirMspiL1b1File in _air_mspi_l1b1:
_air_mspi_l1b1.AirMspiL1b1File_swigregister(AirMspiL1b1File)
class AirMspiL1b1(geocal_swig.raster_image_tiled_file.RasterImageTiledFile):
    r"""

    C++ includes: air_mspi_l1b1.h

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        AirMspiL1b1::AirMspiL1b1(const std::string &Fname, const std::string &Swath_to_use="660-I",
        int Tile_number_line=-1, int Tile_number_sample=-1, unsigned int
        Number_tile=4)
        GeoCal::AirMspiL1b1::AirMspiL1b1
        Constructor.

        """
        _air_mspi_l1b1.AirMspiL1b1_swiginit(self, _air_mspi_l1b1.new_AirMspiL1b1(*args))

    def __reduce__(self):
      return _new_from_serialization_dir, (os.getcwd(), geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _air_mspi_l1b1.delete_AirMspiL1b1

# Register AirMspiL1b1 in _air_mspi_l1b1:
_air_mspi_l1b1.AirMspiL1b1_swigregister(AirMspiL1b1)

__all__ = ["AirMspiL1b1File","AirMspiL1b1"]


