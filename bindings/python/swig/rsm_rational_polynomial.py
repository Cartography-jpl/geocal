# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _rsm_rational_polynomial

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rsm_rational_polynomial.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rsm_rational_polynomial.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _rsm_rational_polynomial.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rsm_rational_polynomial.delete_SwigPyIterator
    value = _swig_new_instance_method(_rsm_rational_polynomial.SwigPyIterator_value)
    incr = _swig_new_instance_method(_rsm_rational_polynomial.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_rsm_rational_polynomial.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_rsm_rational_polynomial.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_rsm_rational_polynomial.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_rsm_rational_polynomial.SwigPyIterator_copy)
    next = _swig_new_instance_method(_rsm_rational_polynomial.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_rsm_rational_polynomial.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_rsm_rational_polynomial.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_rsm_rational_polynomial.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_rsm_rational_polynomial.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_rsm_rational_polynomial.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_rsm_rational_polynomial.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_rsm_rational_polynomial.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_rsm_rational_polynomial.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_rsm_rational_polynomial.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _rsm_rational_polynomial:
_rsm_rational_polynomial.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _rsm_rational_polynomial.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.rsm_base
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class RsmRationalPolynomial(geocal_swig.rsm_base.RsmBase):
    r"""

    This is a RsmRationalPolynomial.

    C++ includes: rsm_rational_polynomial.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        RsmRationalPolynomial::RsmRationalPolynomial(int Np_x, int Np_y, int Np_z, int Dp_x, int Dp_y, int Dp_z, int
        N_max_order=-1, int D_max_order=-1, int Nline_fit=20, int
        Nsample_fit=20, int Nheight_fit=20, int Nsecond_pass_fit=20, bool
        Ignore_igc_error_in_fit=false, int Row_section_number=1, int
        Col_section_number=1, const std::string &Image_identifier="", const
        std::string &Rsm_support_data_edition="fake-1")
        Constructor.

        You indicated the order of the polynomial in each dimension for both
        the numerator and denominator. This particular constructor uses the
        same dimensions for both the line and the sample, there is no actual
        requirement in a Rsm that this be the case (although it is pretty
        common).

        You can limit the over all order of cross terms by supplying a
        max_order for the numerator, denominator, or both. This holds all
        cross terms with a total order > max to 0. The default is to not
        restrict the cross terms.

        You can give the number of points to generate in the fit function by
        giving the grid dimensions Nline_fit x Nsample_fit x Nheight_fit. For
        Geodetic like coordinate systems this usually gives pretty good
        coverage, but for something like LocalRectangularCoordinate this kind
        of a grid doesn't cover the full space. You can give the value for
        second pass through where we make a X, Y, Z grid of points. This is
        often slower, but can be necessary. If you set Nsecond_pass_fit to 0,
        then we skip this step in fit. In fit we always ignore
        ImageGroundConnectionFailed exceptions, but you can optionally ignore
        other errors in the Igc by setting Ignore_igc_error_in_fit to true. 
        """
        _rsm_rational_polynomial.RsmRationalPolynomial_swiginit(self, _rsm_rational_polynomial.new_RsmRationalPolynomial(*args))
    image_coordinate = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial_image_coordinate)
    set_rpc_coeff = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial_set_rpc_coeff)
    fit_offset_and_scale = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial_fit_offset_and_scale)
    fit_data = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial_fit_data)
    tre_string = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial_tre_string)
    read_tre_string = _swig_new_static_method(_rsm_rational_polynomial.RsmRationalPolynomial_read_tre_string)
    _v_number_line_fit = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_number_line_fit)

    @property
    def number_line_fit(self):
        return self._v_number_line_fit()

    @number_line_fit.setter
    def number_line_fit(self, value):
      self._v_number_line_fit(value)

    _v_number_sample_fit = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_number_sample_fit)

    @property
    def number_sample_fit(self):
        return self._v_number_sample_fit()

    @number_sample_fit.setter
    def number_sample_fit(self, value):
      self._v_number_sample_fit(value)

    _v_number_height_fit = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_number_height_fit)

    @property
    def number_height_fit(self):
        return self._v_number_height_fit()

    @number_height_fit.setter
    def number_height_fit(self, value):
      self._v_number_height_fit(value)

    _v_number_second_pass_fit = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_number_second_pass_fit)

    @property
    def number_second_pass_fit(self):
        return self._v_number_second_pass_fit()

    @number_second_pass_fit.setter
    def number_second_pass_fit(self, value):
      self._v_number_second_pass_fit(value)

    _v_ignore_igc_error_in_fit = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_ignore_igc_error_in_fit)

    @property
    def ignore_igc_error_in_fit(self):
        return self._v_ignore_igc_error_in_fit()

    @ignore_igc_error_in_fit.setter
    def ignore_igc_error_in_fit(self, value):
      self._v_ignore_igc_error_in_fit(value)

    _v_line_offset = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_line_offset)

    @property
    def line_offset(self):
        return self._v_line_offset()

    _v_line_scale = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_line_scale)

    @property
    def line_scale(self):
        return self._v_line_scale()

    _v_sample_offset = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_sample_offset)

    @property
    def sample_offset(self):
        return self._v_sample_offset()

    _v_sample_scale = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_sample_scale)

    @property
    def sample_scale(self):
        return self._v_sample_scale()

    _v_x_offset = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_x_offset)

    @property
    def x_offset(self):
        return self._v_x_offset()

    _v_x_scale = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_x_scale)

    @property
    def x_scale(self):
        return self._v_x_scale()

    _v_y_offset = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_y_offset)

    @property
    def y_offset(self):
        return self._v_y_offset()

    _v_y_scale = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_y_scale)

    @property
    def y_scale(self):
        return self._v_y_scale()

    _v_z_offset = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_z_offset)

    @property
    def z_offset(self):
        return self._v_z_offset()

    _v_z_scale = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_z_scale)

    @property
    def z_scale(self):
        return self._v_z_scale()

    _v_line_numerator = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_line_numerator)

    @property
    def line_numerator(self):
        return self._v_line_numerator()

    _v_line_denominator = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_line_denominator)

    @property
    def line_denominator(self):
        return self._v_line_denominator()

    _v_sample_numerator = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_sample_numerator)

    @property
    def sample_numerator(self):
        return self._v_sample_numerator()

    _v_sample_denominator = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_sample_denominator)

    @property
    def sample_denominator(self):
        return self._v_sample_denominator()

    _v_row_section_number = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_row_section_number)

    @property
    def row_section_number(self):
        return self._v_row_section_number()

    @row_section_number.setter
    def row_section_number(self, value):
      self._v_row_section_number(value)

    _v_col_section_number = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_col_section_number)

    @property
    def col_section_number(self):
        return self._v_col_section_number()

    @col_section_number.setter
    def col_section_number(self, value):
      self._v_col_section_number(value)

    _v_line_fit_error = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_line_fit_error)

    @property
    def line_fit_error(self):
        return self._v_line_fit_error()

    @line_fit_error.setter
    def line_fit_error(self, value):
      self._v_line_fit_error(value)

    _v_sample_fit_error = _swig_new_instance_method(_rsm_rational_polynomial.RsmRationalPolynomial__v_sample_fit_error)

    @property
    def sample_fit_error(self):
        return self._v_sample_fit_error()

    @sample_fit_error.setter
    def sample_fit_error(self, value):
      self._v_sample_fit_error(value)


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _rsm_rational_polynomial.delete_RsmRationalPolynomial

# Register RsmRationalPolynomial in _rsm_rational_polynomial:
_rsm_rational_polynomial.RsmRationalPolynomial_swigregister(RsmRationalPolynomial)

__all__ = ["RsmRationalPolynomial"]


