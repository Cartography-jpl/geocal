#! /usr/bin/env python
#
# This copies a NITF file to a new vicar file. This is very similar to
# gdal_translate already found in GDAL, but this adds handling of TREs
# in NITF for things like RPC and igeolo information.

try:
    import afids
except ImportError:
    pass
import geocal
have_pynitf = False
try:
    import pynitf
    have_pynitf = True
except ImportError:
    pass
from tempfile import NamedTemporaryFile
import subprocess
import os
import re

version="%prog May 9, 2014"
usage="""Usage: 
  nitf_to_gdal [options] <input_file> <output_vicar>
  nitf_to_gdal -h | --help
  nitf_to_gdal -v | --version

This copies a NITF file to a new vicar file. This is very similar to
gdal_translate already found in GDAL, but this adds handling of TREs
in NITF for things like RPC and igeolo information.

The input file can be any file supported by GDAL, although this only 
really make sense to call for a NITF file.

Note that this program should be a replacement for the old VICAR
proc nvextract

Options:
  -h --help         
       Print this message

  -b --band=b
       Band of file to use (1 based). [default: 1]
  
  --dem=f
       DEM file to use. If supplied, we generate NITF corners

  --gdal-cache=d
       The GDAL cache to use, in MB. This needs to be large enough that
       we don't thrash while writing out data. VICAR needs to be written
       a full line at a time, while NITF tends to be organized as tiles
       (which are expensive to read if we are using JPEG 2000 compression).
       So this cache needs to be enough to keep at least as many blocks as
       needed to cover a full scanline.
       [default: 10000]

  -i --image=i
       Image of file to use (1 based). [default: 1]

  -k --keep-aux
       By default, we remove the .aux.xml file gdal_translate creates to
       store things that don't fit in the VICAR file. Use this option to
       keep that file.

  -q --quiet
       Don't print status message as we copy the data.

  -v --version      
       Print program version

"""
args = geocal.docopt_simple(usage, version=version)

# Create a "virtual raster image". This is a text file that allows us to
# set various metadata fields without changing the original file. GDAL then
# treats this raster image we can later copy.

with NamedTemporaryFile() as tmp:
    in_name = "NITF_IM:%d:%s" % (args.image - 1, args.input_file)
    subprocess.check_call(["gdal_translate", "-of", "VRT", "-q",
                           "-b", str(args.band), in_name, tmp.name])
    fin = geocal.GdalRasterImage(in_name, args.band)
    fvrt = geocal.GdalRasterImage(tmp.name)

    geocal.tre_use00a_to_gdal(fin, fvrt)

    # Function is only optionally available, depending on options
    # used at build time of AFIDS. If this isn't found then just
    # continue without complaint
    try:
        afids.tre_afid_a_to_gdal(fin, fvrt)
    except (NameError, AttributeError) as exc:
        pass

    # Check for RSM
    rsm = None
    if(have_pynitf):
        rsm = pynitf.NitfFile(args.input_file).image_segment[args.image - 1].rsm
    
    # Sometimes have a rpc value in a NITF file is actually invalid. We
    # identify this by trying to use the RPC
    rpc_is_valid = fin.has_rpc
    if(fin.has_rpc):
        try:
            fin.rpc.ground_coordinate(geocal.ImageCoordinate(0.5, 0.5),
                                      geocal.SimpleDem())
        except:
            rpc_is_valid = False
    if((rpc_is_valid or rsm) and args.dem):
        dem = geocal.GdalDem(args.dem)
        for i,ic in enumerate([geocal.ImageCoordinate(0.5,0.5),
                               geocal.ImageCoordinate(0.5,
                                                      fin.number_sample - 0.5),
                               geocal.ImageCoordinate(fin.number_line - 0.5,
                                               fin.number_sample - 0.5),
                               geocal.ImageCoordinate(fin.number_line - 0.5,
                                                      0.5)]):
            if(rsm):
                pt = rsm.ground_coordinate(ic, dem)
            else:
                pt = fin.rpc.ground_coordinate(ic, dem)
            fvrt["NITF_CORNERLON%d" % (i + 1)] = str(pt.longitude)
            fvrt["NITF_CORNERLAT%d" % (i + 1)] = str(pt.latitude)
        mi = fvrt.map_info_from_nitf_corner(True)
        fvrt.set_map_info(mi)
                               
    fvrt.close()
    cmd = ["gdal_translate", "-of", "VICAR"]
    if(args.quiet):
        cmd.append("-q")
    cmd.extend(["--config", "GDAL_CACHEMAX", str(args.gdal_cache)])
    cmd.append(tmp.name)
    cmd.append(args.output_vicar)
    subprocess.check_call(cmd)
    if(not args.keep_aux):
        try:
            os.remove(args.output_vicar + ".aux.xml")
        except OSError:
            # Ok if file doesn't exist
            pass

    # Add RSM if we find one. GDAL doesn't handle this on its own.
    if(rsm):
        f = geocal.VicarFile(args.output_vicar, geocal.VicarFile.UPDATE)
        f.rsm = rsm
        # Might also have RPC, if we find both only use the RSM
        for lb in f.label_list():
            if(re.match("GEOTIFF RPC", lb)):
                prop, lbnm = re.split(' ', lb)
                f.label_delete(lbnm, prop)
        f.close()
            
    # GDAL will always convert the RPC to format B. If the underlying NITF is format
    # A we want to update the VICAR file to also be A format.
    if(rpc_is_valid):
        fvrt = geocal.GdalRasterImage(in_name, args.band)
        if(fvrt.has_metadata("RPC00A", "TRE")):
            f = geocal.VicarFile(args.output_vicar, geocal.VicarFile.UPDATE)
            f.rpc = fvrt.rpc00a.rpc
            f.close()
    else:
        # Delete anything that might have been put into the file
        f = geocal.VicarFile(args.output_vicar, geocal.VicarFile.UPDATE)
        try:
            f.label_delete("NITF_CETAG", "GEOTIFF")
        except:
            # Ok if fails, was presumably just not in the file.
            pass
        for lb in f.label_list():
            if(re.match("GEOTIFF RPC", lb)):
                prop, lbnm = re.split(' ', lb)
                f.label_delete(lbnm, prop)

        
