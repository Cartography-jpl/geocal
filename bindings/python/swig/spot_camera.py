# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _spot_camera

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _spot_camera.SWIG_PyInstanceMethod_New
_swig_new_static_method = _spot_camera.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _spot_camera.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spot_camera.delete_SwigPyIterator
    value = _swig_new_instance_method(_spot_camera.SwigPyIterator_value)
    incr = _swig_new_instance_method(_spot_camera.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_spot_camera.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_spot_camera.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_spot_camera.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_spot_camera.SwigPyIterator_copy)
    next = _swig_new_instance_method(_spot_camera.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_spot_camera.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_spot_camera.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_spot_camera.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_spot_camera.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_spot_camera.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_spot_camera.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_spot_camera.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_spot_camera.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_spot_camera.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _spot_camera:
_spot_camera.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _spot_camera.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.camera
import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.with_parameter
class SpotCamera(geocal_swig.camera.Camera):
    r"""

    This class models the SPOT camera.

    The camera parameters are given by an DIMAP file. This file is an XML
    file format. You can find documentation for this format
    athttp://www.spot.com/web/SICORP/452-sicorp-the-dimap-format.php.

    We don't actually read this file format. XML is a bit of a pain to
    deal with in C++, and is much easier to process in Ruby. So we set up
    an interface that just takes the PSI_X and PSI_Y values for each
    pixel. The Afids class Dimap processes the XML file and can use that
    to create an instance of this class.

    The various angles and so forth are described in the "SPOT Geometry
    Handbook", available athttp://www.spotimage.com/automne_modules_files
    /standard/public/p229_0b
    9c0d94a22e77aac09df2b360c73073SPOT_Geometry_Handbook.pdf

    C++ includes: spot_camera.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Psi_x, Psi_y):
        r"""

        SpotCamera::SpotCamera(const std::vector< double > &Psi_x, const std::vector< double >
        &Psi_y)
        Create a spot camera with the given PSI angles.

        Psi_x and Psi_y need to be equal in size, and have at least two
        values.

        The angles should be in radians.

        We require that Psi_y be strictly increasing. 
        """
        _spot_camera.SpotCamera_swiginit(self, _spot_camera.new_SpotCamera(Psi_x, Psi_y))
    _v_psi_x = _swig_new_instance_method(_spot_camera.SpotCamera__v_psi_x)

    @property
    def psi_x(self):
        return self._v_psi_x()

    _v_psi_y = _swig_new_instance_method(_spot_camera.SpotCamera__v_psi_y)

    @property
    def psi_y(self):
        return self._v_psi_y()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _spot_camera.delete_SpotCamera

# Register SpotCamera in _spot_camera:
_spot_camera.SpotCamera_swigregister(SpotCamera)

__all__ = ["SpotCamera"]


