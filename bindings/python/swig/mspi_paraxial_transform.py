# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _mspi_paraxial_transform.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mspi_paraxial_transform', [dirname(__file__)])
        except ImportError:
            import _mspi_paraxial_transform
            return _mspi_paraxial_transform
        if fp is not None:
            try:
                _mod = imp.load_module('_mspi_paraxial_transform', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mspi_paraxial_transform = swig_import_helper()
    del swig_import_helper
else:
    import _mspi_paraxial_transform
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _mspi_paraxial_transform.SHARED_PTR_DISOWN
def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst
 
def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
class MspiParaxialTransform(geocal_swig.generic_object.GenericObject):
    """
    This handles the non-linearity of MSPI camera optics.

    This goes to and from real frame camera coordinate (i.e. x and y of
    the CCD) and the location we'd get for a pinhole camera with no non-
    linearity (the paraxial approximation).

    This transformation is a polynomial expansion going to or from the
    paraxial coordinate system. It is described in detail in [1].

    References: [1] Veljko Jovanovic, "Algorithm Theoretical Basis and
    processing software design consideration for GroundMSPI L1B2
    process", Rev A.1, April 4, 2012.

    C++ includes: mspi_paraxial_transform.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        MspiParaxialTransform::MspiParaxialTransform(const std::string &File_name)
        Constructor that reads the given file for the transform coefficients.

        """
        _mspi_paraxial_transform.MspiParaxialTransform_swiginit(self,_mspi_paraxial_transform.new_MspiParaxialTransform(*args))
    def _v_file_name(self):
        """
        const std::string& GeoCal::MspiParaxialTransform::file_name() const
        File name for MspiConfigFile. 
        """
        return _mspi_paraxial_transform.MspiParaxialTransform__v_file_name(self)

    @property
    def file_name(self):
        return self._v_file_name()

    def paraxial_to_real(self, *args):
        """
        void MspiParaxialTransform::paraxial_to_real(int Row_number, double Paraxial_x, double Paraxial_y, double &Real_x,
        double &Real_y) const
        Convert from paraxial to real coordinates. 
        """
        return _mspi_paraxial_transform.MspiParaxialTransform_paraxial_to_real(self, *args)

    def real_to_paraxial(self, *args):
        """
        void MspiParaxialTransform::real_to_paraxial(int Row_number, double Real_x, double Real_y, double &Paraxial_x,
        double &Paraxial_y) const
        Convert from real coordinates to paraxial. 
        """
        return _mspi_paraxial_transform.MspiParaxialTransform_real_to_paraxial(self, *args)

    def has_row(self, *args):
        """
        bool GeoCal::MspiParaxialTransform::has_row(int Row_number) const
        True if we have the given row. 
        """
        return _mspi_paraxial_transform.MspiParaxialTransform_has_row(self, *args)

    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _mspi_paraxial_transform.delete_MspiParaxialTransform
MspiParaxialTransform._v_file_name = new_instancemethod(_mspi_paraxial_transform.MspiParaxialTransform__v_file_name,None,MspiParaxialTransform)
MspiParaxialTransform.paraxial_to_real = new_instancemethod(_mspi_paraxial_transform.MspiParaxialTransform_paraxial_to_real,None,MspiParaxialTransform)
MspiParaxialTransform.real_to_paraxial = new_instancemethod(_mspi_paraxial_transform.MspiParaxialTransform_real_to_paraxial,None,MspiParaxialTransform)
MspiParaxialTransform.has_row = new_instancemethod(_mspi_paraxial_transform.MspiParaxialTransform_has_row,None,MspiParaxialTransform)
MspiParaxialTransform.__str__ = new_instancemethod(_mspi_paraxial_transform.MspiParaxialTransform___str__,None,MspiParaxialTransform)
MspiParaxialTransform_swigregister = _mspi_paraxial_transform.MspiParaxialTransform_swigregister
MspiParaxialTransform_swigregister(MspiParaxialTransform)



